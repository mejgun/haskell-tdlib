-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Please see the README on GitHub at
--   <a>https://github.com/mejgun/haskell-tdlib</a>
@package haskell-tdlib
@version 0.2.4.0

module Utils
p :: Show a => String -> Maybe a -> String
cc :: [String] -> String
rm :: Read a => Maybe String -> Maybe a
rl :: Read a => Maybe [String] -> Maybe [a]
toS :: Show a => Maybe a -> Value
toLS :: Show a => Maybe [a] -> [Value]


module TD.Query.WriteGeneratedFilePart

-- | Writes a part of a generated file. This method is intended to be used
--   only if the application has no direct access to TDLib's file system,
--   because it is usually slower than a direct write to the destination
--   file
data WriteGeneratedFilePart
WriteGeneratedFilePart :: Maybe String -> Maybe Int -> Maybe Int -> WriteGeneratedFilePart

[_data] :: WriteGeneratedFilePart -> Maybe String

[offset] :: WriteGeneratedFilePart -> Maybe Int

-- | The identifier of the generation process <tt>offset The offset from
--   which to write the data to the file </tt>data The data to write
[generation_id] :: WriteGeneratedFilePart -> Maybe Int
instance GHC.Classes.Eq TD.Query.WriteGeneratedFilePart.WriteGeneratedFilePart
instance GHC.Show.Show TD.Query.WriteGeneratedFilePart.WriteGeneratedFilePart
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.WriteGeneratedFilePart.WriteGeneratedFilePart


module TD.Query.ViewTrendingStickerSets

-- | Informs the server that some trending sticker sets have been viewed by
--   the user @sticker_set_ids Identifiers of viewed trending sticker sets
data ViewTrendingStickerSets
ViewTrendingStickerSets :: Maybe [Int] -> ViewTrendingStickerSets

[sticker_set_ids] :: ViewTrendingStickerSets -> Maybe [Int]
instance GHC.Classes.Eq TD.Query.ViewTrendingStickerSets.ViewTrendingStickerSets
instance GHC.Show.Show TD.Query.ViewTrendingStickerSets.ViewTrendingStickerSets
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ViewTrendingStickerSets.ViewTrendingStickerSets


module TD.Query.ViewMessages

-- | Informs TDLib that messages are being viewed by the user. Sponsored
--   messages must be marked as viewed only when the entire text of the
--   message is shown on the screen (excluding the button). Many useful
--   activities depend on whether the messages are currently being viewed
--   or not (e.g., marking messages as read, incrementing a view counter,
--   updating a view counter, removing deleted messages in supergroups and
--   channels)
data ViewMessages
ViewMessages :: Maybe Bool -> Maybe [Int] -> Maybe Int -> Maybe Int -> ViewMessages

-- | Pass true to mark as read the specified messages even the chat is
--   closed
[force_read] :: ViewMessages -> Maybe Bool

-- | The identifiers of the messages being viewed
[message_ids] :: ViewMessages -> Maybe [Int]

-- | If not 0, a message thread identifier in which the messages are being
--   viewed
[message_thread_id] :: ViewMessages -> Maybe Int

-- | Chat identifier
[chat_id] :: ViewMessages -> Maybe Int
instance GHC.Classes.Eq TD.Query.ViewMessages.ViewMessages
instance GHC.Show.Show TD.Query.ViewMessages.ViewMessages
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ViewMessages.ViewMessages


module TD.Query.UpgradeBasicGroupChatToSupergroupChat

-- | Creates a new supergroup from an existing basic group and sends a
--   corresponding messageChatUpgradeTo and messageChatUpgradeFrom;
--   requires creator privileges. Deactivates the original basic group
--   @chat_id Identifier of the chat to upgrade
data UpgradeBasicGroupChatToSupergroupChat
UpgradeBasicGroupChatToSupergroupChat :: Maybe Int -> UpgradeBasicGroupChatToSupergroupChat

[chat_id] :: UpgradeBasicGroupChatToSupergroupChat -> Maybe Int
instance GHC.Classes.Eq TD.Query.UpgradeBasicGroupChatToSupergroupChat.UpgradeBasicGroupChatToSupergroupChat
instance GHC.Show.Show TD.Query.UpgradeBasicGroupChatToSupergroupChat.UpgradeBasicGroupChatToSupergroupChat
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.UpgradeBasicGroupChatToSupergroupChat.UpgradeBasicGroupChatToSupergroupChat


module TD.Query.UnpinChatMessage

-- | Removes a pinned message from a chat; requires can_pin_messages rights
--   in the group or can_edit_messages rights in the channel <tt>chat_id
--   Identifier of the chat </tt>message_id Identifier of the removed
--   pinned message
data UnpinChatMessage
UnpinChatMessage :: Maybe Int -> Maybe Int -> UnpinChatMessage

[message_id] :: UnpinChatMessage -> Maybe Int

[chat_id] :: UnpinChatMessage -> Maybe Int
instance GHC.Classes.Eq TD.Query.UnpinChatMessage.UnpinChatMessage
instance GHC.Show.Show TD.Query.UnpinChatMessage.UnpinChatMessage
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.UnpinChatMessage.UnpinChatMessage


module TD.Query.UnpinAllChatMessages

-- | Removes all pinned messages from a chat; requires can_pin_messages
--   rights in the group or can_edit_messages rights in the channel
--   @chat_id Identifier of the chat
data UnpinAllChatMessages
UnpinAllChatMessages :: Maybe Int -> UnpinAllChatMessages

[chat_id] :: UnpinAllChatMessages -> Maybe Int
instance GHC.Classes.Eq TD.Query.UnpinAllChatMessages.UnpinAllChatMessages
instance GHC.Show.Show TD.Query.UnpinAllChatMessages.UnpinAllChatMessages
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.UnpinAllChatMessages.UnpinAllChatMessages


module TD.Query.TranslateText

-- | Translates a text to the given language. Returns a 404 error if the
--   translation can't be performed
data TranslateText
TranslateText :: Maybe String -> Maybe String -> Maybe String -> TranslateText

-- | A two-letter ISO 639-1 language code of the language to which the
--   message is translated
[to_language_code] :: TranslateText -> Maybe String

-- | A two-letter ISO 639-1 language code of the language from which the
--   message is translated. If empty, the language will be detected
--   automatically
[from_language_code] :: TranslateText -> Maybe String

-- | Text to translate
[text] :: TranslateText -> Maybe String
instance GHC.Classes.Eq TD.Query.TranslateText.TranslateText
instance GHC.Show.Show TD.Query.TranslateText.TranslateText
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.TranslateText.TranslateText


module TD.Query.TransferChatOwnership

-- | Changes the owner of a chat. The current user must be a current owner
--   of the chat. Use the method canTransferOwnership to check whether the
--   ownership can be transferred from the current session. Available only
--   for supergroups and channel chats
data TransferChatOwnership
TransferChatOwnership :: Maybe String -> Maybe Int -> Maybe Int -> TransferChatOwnership

[password] :: TransferChatOwnership -> Maybe String

[user_id] :: TransferChatOwnership -> Maybe Int

-- | Chat identifier <tt>user_id Identifier of the user to which transfer
--   the ownership. The ownership can't be transferred to a bot or to a
--   deleted user </tt>password The password of the current user
[chat_id] :: TransferChatOwnership -> Maybe Int
instance GHC.Classes.Eq TD.Query.TransferChatOwnership.TransferChatOwnership
instance GHC.Show.Show TD.Query.TransferChatOwnership.TransferChatOwnership
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.TransferChatOwnership.TransferChatOwnership


module TD.Query.ToggleSupergroupSignMessages

-- | Toggles whether sender signature is added to sent messages in a
--   channel; requires can_change_info administrator right
--   <tt>supergroup_id Identifier of the channel </tt>sign_messages New
--   value of sign_messages
data ToggleSupergroupSignMessages
ToggleSupergroupSignMessages :: Maybe Bool -> Maybe Int -> ToggleSupergroupSignMessages

[sign_messages] :: ToggleSupergroupSignMessages -> Maybe Bool

[supergroup_id] :: ToggleSupergroupSignMessages -> Maybe Int
instance GHC.Classes.Eq TD.Query.ToggleSupergroupSignMessages.ToggleSupergroupSignMessages
instance GHC.Show.Show TD.Query.ToggleSupergroupSignMessages.ToggleSupergroupSignMessages
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ToggleSupergroupSignMessages.ToggleSupergroupSignMessages


module TD.Query.ToggleSupergroupJoinToSendMessages

-- | Toggles whether joining is mandatory to send messages to a discussion
--   supergroup; requires can_restrict_members administrator right
--   <tt>supergroup_id Identifier of the supergroup
--   </tt>join_to_send_messages New value of join_to_send_messages
data ToggleSupergroupJoinToSendMessages
ToggleSupergroupJoinToSendMessages :: Maybe Bool -> Maybe Int -> ToggleSupergroupJoinToSendMessages

[join_to_send_messages] :: ToggleSupergroupJoinToSendMessages -> Maybe Bool

[supergroup_id] :: ToggleSupergroupJoinToSendMessages -> Maybe Int
instance GHC.Classes.Eq TD.Query.ToggleSupergroupJoinToSendMessages.ToggleSupergroupJoinToSendMessages
instance GHC.Show.Show TD.Query.ToggleSupergroupJoinToSendMessages.ToggleSupergroupJoinToSendMessages
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ToggleSupergroupJoinToSendMessages.ToggleSupergroupJoinToSendMessages


module TD.Query.ToggleSupergroupJoinByRequest

-- | Toggles whether all users directly joining the supergroup need to be
--   approved by supergroup administrators; requires can_restrict_members
--   administrator right <tt>supergroup_id Identifier of the channel
--   </tt>join_by_request New value of join_by_request
data ToggleSupergroupJoinByRequest
ToggleSupergroupJoinByRequest :: Maybe Bool -> Maybe Int -> ToggleSupergroupJoinByRequest

[join_by_request] :: ToggleSupergroupJoinByRequest -> Maybe Bool

[supergroup_id] :: ToggleSupergroupJoinByRequest -> Maybe Int
instance GHC.Classes.Eq TD.Query.ToggleSupergroupJoinByRequest.ToggleSupergroupJoinByRequest
instance GHC.Show.Show TD.Query.ToggleSupergroupJoinByRequest.ToggleSupergroupJoinByRequest
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ToggleSupergroupJoinByRequest.ToggleSupergroupJoinByRequest


module TD.Query.ToggleSupergroupIsBroadcastGroup

-- | Upgrades supergroup to a broadcast group; requires owner privileges in
--   the supergroup @supergroup_id Identifier of the supergroup
data ToggleSupergroupIsBroadcastGroup
ToggleSupergroupIsBroadcastGroup :: Maybe Int -> ToggleSupergroupIsBroadcastGroup

[supergroup_id] :: ToggleSupergroupIsBroadcastGroup -> Maybe Int
instance GHC.Classes.Eq TD.Query.ToggleSupergroupIsBroadcastGroup.ToggleSupergroupIsBroadcastGroup
instance GHC.Show.Show TD.Query.ToggleSupergroupIsBroadcastGroup.ToggleSupergroupIsBroadcastGroup
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ToggleSupergroupIsBroadcastGroup.ToggleSupergroupIsBroadcastGroup


module TD.Query.ToggleSupergroupIsAllHistoryAvailable

-- | Toggles whether the message history of a supergroup is available to
--   new members; requires can_change_info administrator right
--   <tt>supergroup_id The identifier of the supergroup
--   </tt>is_all_history_available The new value of
--   is_all_history_available
data ToggleSupergroupIsAllHistoryAvailable
ToggleSupergroupIsAllHistoryAvailable :: Maybe Bool -> Maybe Int -> ToggleSupergroupIsAllHistoryAvailable

[is_all_history_available] :: ToggleSupergroupIsAllHistoryAvailable -> Maybe Bool

[supergroup_id] :: ToggleSupergroupIsAllHistoryAvailable -> Maybe Int
instance GHC.Classes.Eq TD.Query.ToggleSupergroupIsAllHistoryAvailable.ToggleSupergroupIsAllHistoryAvailable
instance GHC.Show.Show TD.Query.ToggleSupergroupIsAllHistoryAvailable.ToggleSupergroupIsAllHistoryAvailable
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ToggleSupergroupIsAllHistoryAvailable.ToggleSupergroupIsAllHistoryAvailable


module TD.Query.ToggleSessionCanAcceptSecretChats

-- | Toggles whether a session can accept incoming secret chats
--   <tt>session_id Session identifier </tt>can_accept_secret_chats Pass
--   true to allow accepring secret chats by the session; pass false
--   otherwise
data ToggleSessionCanAcceptSecretChats
ToggleSessionCanAcceptSecretChats :: Maybe Bool -> Maybe Int -> ToggleSessionCanAcceptSecretChats

[can_accept_secret_chats] :: ToggleSessionCanAcceptSecretChats -> Maybe Bool

[session_id] :: ToggleSessionCanAcceptSecretChats -> Maybe Int
instance GHC.Classes.Eq TD.Query.ToggleSessionCanAcceptSecretChats.ToggleSessionCanAcceptSecretChats
instance GHC.Show.Show TD.Query.ToggleSessionCanAcceptSecretChats.ToggleSessionCanAcceptSecretChats
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ToggleSessionCanAcceptSecretChats.ToggleSessionCanAcceptSecretChats


module TD.Query.ToggleSessionCanAcceptCalls

-- | Toggles whether a session can accept incoming calls <tt>session_id
--   Session identifier </tt>can_accept_calls Pass true to allow accepting
--   incoming calls by the session; pass false otherwise
data ToggleSessionCanAcceptCalls
ToggleSessionCanAcceptCalls :: Maybe Bool -> Maybe Int -> ToggleSessionCanAcceptCalls

[can_accept_calls] :: ToggleSessionCanAcceptCalls -> Maybe Bool

[session_id] :: ToggleSessionCanAcceptCalls -> Maybe Int
instance GHC.Classes.Eq TD.Query.ToggleSessionCanAcceptCalls.ToggleSessionCanAcceptCalls
instance GHC.Show.Show TD.Query.ToggleSessionCanAcceptCalls.ToggleSessionCanAcceptCalls
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ToggleSessionCanAcceptCalls.ToggleSessionCanAcceptCalls


module TD.Query.ToggleGroupCallScreenSharingIsPaused

-- | Pauses or unpauses screen sharing in a joined group call
--   <tt>group_call_id Group call identifier </tt>is_paused True if screen
--   sharing is paused
data ToggleGroupCallScreenSharingIsPaused
ToggleGroupCallScreenSharingIsPaused :: Maybe Bool -> Maybe Int -> ToggleGroupCallScreenSharingIsPaused

[is_paused] :: ToggleGroupCallScreenSharingIsPaused -> Maybe Bool

[group_call_id] :: ToggleGroupCallScreenSharingIsPaused -> Maybe Int
instance GHC.Classes.Eq TD.Query.ToggleGroupCallScreenSharingIsPaused.ToggleGroupCallScreenSharingIsPaused
instance GHC.Show.Show TD.Query.ToggleGroupCallScreenSharingIsPaused.ToggleGroupCallScreenSharingIsPaused
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ToggleGroupCallScreenSharingIsPaused.ToggleGroupCallScreenSharingIsPaused


module TD.Query.ToggleGroupCallMuteNewParticipants

-- | Toggles whether new participants of a group call can be unmuted only
--   by administrators of the group call. Requires
--   groupCall.can_toggle_mute_new_participants group call flag
data ToggleGroupCallMuteNewParticipants
ToggleGroupCallMuteNewParticipants :: Maybe Bool -> Maybe Int -> ToggleGroupCallMuteNewParticipants

[mute_new_participants] :: ToggleGroupCallMuteNewParticipants -> Maybe Bool

-- | Group call identifier @mute_new_participants New value of the
--   mute_new_participants setting
[group_call_id] :: ToggleGroupCallMuteNewParticipants -> Maybe Int
instance GHC.Classes.Eq TD.Query.ToggleGroupCallMuteNewParticipants.ToggleGroupCallMuteNewParticipants
instance GHC.Show.Show TD.Query.ToggleGroupCallMuteNewParticipants.ToggleGroupCallMuteNewParticipants
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ToggleGroupCallMuteNewParticipants.ToggleGroupCallMuteNewParticipants


module TD.Query.ToggleGroupCallIsMyVideoPaused

-- | Toggles whether current user's video is paused <tt>group_call_id Group
--   call identifier </tt>is_my_video_paused Pass true if the current
--   user's video is paused
data ToggleGroupCallIsMyVideoPaused
ToggleGroupCallIsMyVideoPaused :: Maybe Bool -> Maybe Int -> ToggleGroupCallIsMyVideoPaused

[is_my_video_paused] :: ToggleGroupCallIsMyVideoPaused -> Maybe Bool

[group_call_id] :: ToggleGroupCallIsMyVideoPaused -> Maybe Int
instance GHC.Classes.Eq TD.Query.ToggleGroupCallIsMyVideoPaused.ToggleGroupCallIsMyVideoPaused
instance GHC.Show.Show TD.Query.ToggleGroupCallIsMyVideoPaused.ToggleGroupCallIsMyVideoPaused
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ToggleGroupCallIsMyVideoPaused.ToggleGroupCallIsMyVideoPaused


module TD.Query.ToggleGroupCallIsMyVideoEnabled

-- | Toggles whether current user's video is enabled <tt>group_call_id
--   Group call identifier </tt>is_my_video_enabled Pass true if the
--   current user's video is enabled
data ToggleGroupCallIsMyVideoEnabled
ToggleGroupCallIsMyVideoEnabled :: Maybe Bool -> Maybe Int -> ToggleGroupCallIsMyVideoEnabled

[is_my_video_enabled] :: ToggleGroupCallIsMyVideoEnabled -> Maybe Bool

[group_call_id] :: ToggleGroupCallIsMyVideoEnabled -> Maybe Int
instance GHC.Classes.Eq TD.Query.ToggleGroupCallIsMyVideoEnabled.ToggleGroupCallIsMyVideoEnabled
instance GHC.Show.Show TD.Query.ToggleGroupCallIsMyVideoEnabled.ToggleGroupCallIsMyVideoEnabled
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ToggleGroupCallIsMyVideoEnabled.ToggleGroupCallIsMyVideoEnabled


module TD.Query.ToggleGroupCallEnabledStartNotification

-- | Toggles whether the current user will receive a notification when the
--   group call will start; scheduled group calls only
data ToggleGroupCallEnabledStartNotification
ToggleGroupCallEnabledStartNotification :: Maybe Bool -> Maybe Int -> ToggleGroupCallEnabledStartNotification

[enabled_start_notification] :: ToggleGroupCallEnabledStartNotification -> Maybe Bool

-- | Group call identifier @enabled_start_notification New value of the
--   enabled_start_notification setting
[group_call_id] :: ToggleGroupCallEnabledStartNotification -> Maybe Int
instance GHC.Classes.Eq TD.Query.ToggleGroupCallEnabledStartNotification.ToggleGroupCallEnabledStartNotification
instance GHC.Show.Show TD.Query.ToggleGroupCallEnabledStartNotification.ToggleGroupCallEnabledStartNotification
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ToggleGroupCallEnabledStartNotification.ToggleGroupCallEnabledStartNotification


module TD.Query.ToggleDownloadIsPaused

-- | Changes pause state of a file in the file download list
data ToggleDownloadIsPaused
ToggleDownloadIsPaused :: Maybe Bool -> Maybe Int -> ToggleDownloadIsPaused

-- | Pass true if the download is paused
[is_paused] :: ToggleDownloadIsPaused -> Maybe Bool

-- | Identifier of the downloaded file
[file_id] :: ToggleDownloadIsPaused -> Maybe Int
instance GHC.Classes.Eq TD.Query.ToggleDownloadIsPaused.ToggleDownloadIsPaused
instance GHC.Show.Show TD.Query.ToggleDownloadIsPaused.ToggleDownloadIsPaused
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ToggleDownloadIsPaused.ToggleDownloadIsPaused


module TD.Query.ToggleChatIsMarkedAsUnread

-- | Changes the marked as unread state of a chat <tt>chat_id Chat
--   identifier </tt>is_marked_as_unread New value of is_marked_as_unread
data ToggleChatIsMarkedAsUnread
ToggleChatIsMarkedAsUnread :: Maybe Bool -> Maybe Int -> ToggleChatIsMarkedAsUnread

[is_marked_as_unread] :: ToggleChatIsMarkedAsUnread -> Maybe Bool

[chat_id] :: ToggleChatIsMarkedAsUnread -> Maybe Int
instance GHC.Classes.Eq TD.Query.ToggleChatIsMarkedAsUnread.ToggleChatIsMarkedAsUnread
instance GHC.Show.Show TD.Query.ToggleChatIsMarkedAsUnread.ToggleChatIsMarkedAsUnread
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ToggleChatIsMarkedAsUnread.ToggleChatIsMarkedAsUnread


module TD.Query.ToggleChatHasProtectedContent

-- | Changes the ability of users to save, forward, or copy chat content.
--   Supported only for basic groups, supergroups and channels. Requires
--   owner privileges
data ToggleChatHasProtectedContent
ToggleChatHasProtectedContent :: Maybe Bool -> Maybe Int -> ToggleChatHasProtectedContent

[has_protected_content] :: ToggleChatHasProtectedContent -> Maybe Bool

-- | Chat identifier @has_protected_content New value of
--   has_protected_content
[chat_id] :: ToggleChatHasProtectedContent -> Maybe Int
instance GHC.Classes.Eq TD.Query.ToggleChatHasProtectedContent.ToggleChatHasProtectedContent
instance GHC.Show.Show TD.Query.ToggleChatHasProtectedContent.ToggleChatHasProtectedContent
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ToggleChatHasProtectedContent.ToggleChatHasProtectedContent


module TD.Query.ToggleChatDefaultDisableNotification

-- | Changes the value of the default disable_notification parameter, used
--   when a message is sent to a chat <tt>chat_id Chat identifier
--   </tt>default_disable_notification New value of
--   default_disable_notification
data ToggleChatDefaultDisableNotification
ToggleChatDefaultDisableNotification :: Maybe Bool -> Maybe Int -> ToggleChatDefaultDisableNotification

[default_disable_notification] :: ToggleChatDefaultDisableNotification -> Maybe Bool

[chat_id] :: ToggleChatDefaultDisableNotification -> Maybe Int
instance GHC.Classes.Eq TD.Query.ToggleChatDefaultDisableNotification.ToggleChatDefaultDisableNotification
instance GHC.Show.Show TD.Query.ToggleChatDefaultDisableNotification.ToggleChatDefaultDisableNotification
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ToggleChatDefaultDisableNotification.ToggleChatDefaultDisableNotification


module TD.Query.ToggleBotIsAddedToAttachmentMenu

-- | Adds or removes a bot to attachment menu. Bot can be added to
--   attachment menu, only if userTypeBot.can_be_added_to_attachment_menu
--   == true <tt>bot_user_id Bot's user identifier </tt>is_added Pass true
--   to add the bot to attachment menu; pass false to remove the bot from
--   attachment menu
data ToggleBotIsAddedToAttachmentMenu
ToggleBotIsAddedToAttachmentMenu :: Maybe Bool -> Maybe Int -> ToggleBotIsAddedToAttachmentMenu

[is_added] :: ToggleBotIsAddedToAttachmentMenu -> Maybe Bool

[bot_user_id] :: ToggleBotIsAddedToAttachmentMenu -> Maybe Int
instance GHC.Classes.Eq TD.Query.ToggleBotIsAddedToAttachmentMenu.ToggleBotIsAddedToAttachmentMenu
instance GHC.Show.Show TD.Query.ToggleBotIsAddedToAttachmentMenu.ToggleBotIsAddedToAttachmentMenu
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ToggleBotIsAddedToAttachmentMenu.ToggleBotIsAddedToAttachmentMenu


module TD.Query.ToggleAllDownloadsArePaused

-- | Changes pause state of all files in the file download list @are_paused
--   Pass true to pause all downloads; pass false to unpause them
data ToggleAllDownloadsArePaused
ToggleAllDownloadsArePaused :: Maybe Bool -> ToggleAllDownloadsArePaused

[are_paused] :: ToggleAllDownloadsArePaused -> Maybe Bool
instance GHC.Classes.Eq TD.Query.ToggleAllDownloadsArePaused.ToggleAllDownloadsArePaused
instance GHC.Show.Show TD.Query.ToggleAllDownloadsArePaused.ToggleAllDownloadsArePaused
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ToggleAllDownloadsArePaused.ToggleAllDownloadsArePaused


module TD.Query.TestUseUpdate

-- | Does nothing and ensures that the Update object is used; for testing
--   only. This is an offline method. Can be called before authorization
data TestUseUpdate
TestUseUpdate :: TestUseUpdate
instance GHC.Classes.Eq TD.Query.TestUseUpdate.TestUseUpdate
instance GHC.Show.Show TD.Query.TestUseUpdate.TestUseUpdate
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.TestUseUpdate.TestUseUpdate


module TD.Query.TestSquareInt

-- | Returns the squared received number; for testing only. This is an
--   offline method. Can be called before authorization @x Number to square
data TestSquareInt
TestSquareInt :: Maybe Int -> TestSquareInt

[x] :: TestSquareInt -> Maybe Int
instance GHC.Classes.Eq TD.Query.TestSquareInt.TestSquareInt
instance GHC.Show.Show TD.Query.TestSquareInt.TestSquareInt
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.TestSquareInt.TestSquareInt


module TD.Query.TestNetwork

-- | Sends a simple network request to the Telegram servers; for testing
--   only. Can be called before authorization
data TestNetwork
TestNetwork :: TestNetwork
instance GHC.Classes.Eq TD.Query.TestNetwork.TestNetwork
instance GHC.Show.Show TD.Query.TestNetwork.TestNetwork
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.TestNetwork.TestNetwork


module TD.Query.TestGetDifference

-- | Forces an updates.getDifference call to the Telegram servers; for
--   testing only
data TestGetDifference
TestGetDifference :: TestGetDifference
instance GHC.Classes.Eq TD.Query.TestGetDifference.TestGetDifference
instance GHC.Show.Show TD.Query.TestGetDifference.TestGetDifference
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.TestGetDifference.TestGetDifference


module TD.Query.TestCallVectorString

-- | Returns the received vector of strings; for testing only. This is an
--   offline method. Can be called before authorization @x Vector of
--   strings to return
data TestCallVectorString
TestCallVectorString :: Maybe [String] -> TestCallVectorString

[x] :: TestCallVectorString -> Maybe [String]
instance GHC.Classes.Eq TD.Query.TestCallVectorString.TestCallVectorString
instance GHC.Show.Show TD.Query.TestCallVectorString.TestCallVectorString
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.TestCallVectorString.TestCallVectorString


module TD.Query.TestCallVectorInt

-- | Returns the received vector of numbers; for testing only. This is an
--   offline method. Can be called before authorization @x Vector of
--   numbers to return
data TestCallVectorInt
TestCallVectorInt :: Maybe [Int] -> TestCallVectorInt

[x] :: TestCallVectorInt -> Maybe [Int]
instance GHC.Classes.Eq TD.Query.TestCallVectorInt.TestCallVectorInt
instance GHC.Show.Show TD.Query.TestCallVectorInt.TestCallVectorInt
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.TestCallVectorInt.TestCallVectorInt


module TD.Query.TestCallString

-- | Returns the received string; for testing only. This is an offline
--   method. Can be called before authorization @x String to return
data TestCallString
TestCallString :: Maybe String -> TestCallString

[x] :: TestCallString -> Maybe String
instance GHC.Classes.Eq TD.Query.TestCallString.TestCallString
instance GHC.Show.Show TD.Query.TestCallString.TestCallString
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.TestCallString.TestCallString


module TD.Query.TestCallEmpty

-- | Does nothing; for testing only. This is an offline method. Can be
--   called before authorization
data TestCallEmpty
TestCallEmpty :: TestCallEmpty
instance GHC.Classes.Eq TD.Query.TestCallEmpty.TestCallEmpty
instance GHC.Show.Show TD.Query.TestCallEmpty.TestCallEmpty
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.TestCallEmpty.TestCallEmpty


module TD.Query.TestCallBytes

-- | Returns the received bytes; for testing only. This is an offline
--   method. Can be called before authorization @x Bytes to return
data TestCallBytes
TestCallBytes :: Maybe String -> TestCallBytes

[x] :: TestCallBytes -> Maybe String
instance GHC.Classes.Eq TD.Query.TestCallBytes.TestCallBytes
instance GHC.Show.Show TD.Query.TestCallBytes.TestCallBytes
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.TestCallBytes.TestCallBytes


module TD.Query.TerminateSession

-- | Terminates a session of the current user @session_id Session
--   identifier
data TerminateSession
TerminateSession :: Maybe Int -> TerminateSession

[session_id] :: TerminateSession -> Maybe Int
instance GHC.Classes.Eq TD.Query.TerminateSession.TerminateSession
instance GHC.Show.Show TD.Query.TerminateSession.TerminateSession
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.TerminateSession.TerminateSession


module TD.Query.TerminateAllOtherSessions

-- | Terminates all other sessions of the current user
data TerminateAllOtherSessions
TerminateAllOtherSessions :: TerminateAllOtherSessions
instance GHC.Classes.Eq TD.Query.TerminateAllOtherSessions.TerminateAllOtherSessions
instance GHC.Show.Show TD.Query.TerminateAllOtherSessions.TerminateAllOtherSessions
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.TerminateAllOtherSessions.TerminateAllOtherSessions


module TD.Query.SynchronizeLanguagePack

-- | Fetches the latest versions of all strings from a language pack in the
--   current localization target from the server. This method doesn't need
--   to be called explicitly for the current used/base language packs. Can
--   be called before authorization @language_pack_id Language pack
--   identifier
data SynchronizeLanguagePack
SynchronizeLanguagePack :: Maybe String -> SynchronizeLanguagePack

[language_pack_id] :: SynchronizeLanguagePack -> Maybe String
instance GHC.Classes.Eq TD.Query.SynchronizeLanguagePack.SynchronizeLanguagePack
instance GHC.Show.Show TD.Query.SynchronizeLanguagePack.SynchronizeLanguagePack
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SynchronizeLanguagePack.SynchronizeLanguagePack


module TD.Query.StartScheduledGroupCall

-- | Starts a scheduled group call @group_call_id Group call identifier
data StartScheduledGroupCall
StartScheduledGroupCall :: Maybe Int -> StartScheduledGroupCall

[group_call_id] :: StartScheduledGroupCall -> Maybe Int
instance GHC.Classes.Eq TD.Query.StartScheduledGroupCall.StartScheduledGroupCall
instance GHC.Show.Show TD.Query.StartScheduledGroupCall.StartScheduledGroupCall
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.StartScheduledGroupCall.StartScheduledGroupCall


module TD.Query.StartGroupCallScreenSharing

-- | Starts screen sharing in a joined group call. Returns join response
--   payload for tgcalls
data StartGroupCallScreenSharing
StartGroupCallScreenSharing :: Maybe String -> Maybe Int -> Maybe Int -> StartGroupCallScreenSharing

-- | Group call join payload; received from tgcalls
[payload] :: StartGroupCallScreenSharing -> Maybe String

-- | Screen sharing audio channel synchronization source identifier;
--   received from tgcalls
[audio_source_id] :: StartGroupCallScreenSharing -> Maybe Int

-- | Group call identifier
[group_call_id] :: StartGroupCallScreenSharing -> Maybe Int
instance GHC.Classes.Eq TD.Query.StartGroupCallScreenSharing.StartGroupCallScreenSharing
instance GHC.Show.Show TD.Query.StartGroupCallScreenSharing.StartGroupCallScreenSharing
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.StartGroupCallScreenSharing.StartGroupCallScreenSharing


module TD.Query.StartGroupCallRecording

-- | Starts recording of an active group call. Requires
--   groupCall.can_be_managed group call flag <tt>group_call_id Group call
--   identifier </tt>title Group call recording title; 0-64 characters
data StartGroupCallRecording
StartGroupCallRecording :: Maybe Bool -> Maybe Bool -> Maybe String -> Maybe Int -> StartGroupCallRecording

[use_portrait_orientation] :: StartGroupCallRecording -> Maybe Bool

-- | Pass true to record a video file instead of an audio file
--   @use_portrait_orientation Pass true to use portrait orientation for
--   video instead of landscape one
[record_video] :: StartGroupCallRecording -> Maybe Bool

[title] :: StartGroupCallRecording -> Maybe String

[group_call_id] :: StartGroupCallRecording -> Maybe Int
instance GHC.Classes.Eq TD.Query.StartGroupCallRecording.StartGroupCallRecording
instance GHC.Show.Show TD.Query.StartGroupCallRecording.StartGroupCallRecording
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.StartGroupCallRecording.StartGroupCallRecording


module TD.Query.SharePhoneNumber

-- | Shares the phone number of the current user with a mutual contact.
--   Supposed to be called when the user clicks on
--   chatActionBarSharePhoneNumber @user_id Identifier of the user with
--   whom to share the phone number. The user must be a mutual contact
data SharePhoneNumber
SharePhoneNumber :: Maybe Int -> SharePhoneNumber

[user_id] :: SharePhoneNumber -> Maybe Int
instance GHC.Classes.Eq TD.Query.SharePhoneNumber.SharePhoneNumber
instance GHC.Show.Show TD.Query.SharePhoneNumber.SharePhoneNumber
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SharePhoneNumber.SharePhoneNumber


module TD.Query.SetUsername

-- | Changes the username of the current user @username The new value of
--   the username. Use an empty string to remove the username
data SetUsername
SetUsername :: Maybe String -> SetUsername

[username] :: SetUsername -> Maybe String
instance GHC.Classes.Eq TD.Query.SetUsername.SetUsername
instance GHC.Show.Show TD.Query.SetUsername.SetUsername
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SetUsername.SetUsername


module TD.Query.SetSupergroupUsername

-- | Changes the username of a supergroup or channel, requires owner
--   privileges in the supergroup or channel <tt>supergroup_id Identifier
--   of the supergroup or channel </tt>username New value of the username.
--   Use an empty string to remove the username
data SetSupergroupUsername
SetSupergroupUsername :: Maybe String -> Maybe Int -> SetSupergroupUsername

[username] :: SetSupergroupUsername -> Maybe String

[supergroup_id] :: SetSupergroupUsername -> Maybe Int
instance GHC.Classes.Eq TD.Query.SetSupergroupUsername.SetSupergroupUsername
instance GHC.Show.Show TD.Query.SetSupergroupUsername.SetSupergroupUsername
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SetSupergroupUsername.SetSupergroupUsername


module TD.Query.SetSupergroupStickerSet

-- | Changes the sticker set of a supergroup; requires can_change_info
--   administrator right <tt>supergroup_id Identifier of the supergroup
--   </tt>sticker_set_id New value of the supergroup sticker set
--   identifier. Use 0 to remove the supergroup sticker set
data SetSupergroupStickerSet
SetSupergroupStickerSet :: Maybe Int -> Maybe Int -> SetSupergroupStickerSet

[sticker_set_id] :: SetSupergroupStickerSet -> Maybe Int

[supergroup_id] :: SetSupergroupStickerSet -> Maybe Int
instance GHC.Classes.Eq TD.Query.SetSupergroupStickerSet.SetSupergroupStickerSet
instance GHC.Show.Show TD.Query.SetSupergroupStickerSet.SetSupergroupStickerSet
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SetSupergroupStickerSet.SetSupergroupStickerSet


module TD.Query.SetRecoveryEmailAddress

-- | Changes the 2-step verification recovery email address of the user. If
--   a new recovery email address is specified, then the change will not be
--   applied until the new recovery email address is confirmed. If
--   new_recovery_email_address is the same as the email address that is
--   currently set up, this call succeeds immediately and aborts all other
--   requests waiting for an email confirmation <tt>password Password of
--   the current user </tt>new_recovery_email_address New recovery email
--   address
data SetRecoveryEmailAddress
SetRecoveryEmailAddress :: Maybe String -> Maybe String -> SetRecoveryEmailAddress

[new_recovery_email_address] :: SetRecoveryEmailAddress -> Maybe String

[password] :: SetRecoveryEmailAddress -> Maybe String
instance GHC.Classes.Eq TD.Query.SetRecoveryEmailAddress.SetRecoveryEmailAddress
instance GHC.Show.Show TD.Query.SetRecoveryEmailAddress.SetRecoveryEmailAddress
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SetRecoveryEmailAddress.SetRecoveryEmailAddress


module TD.Query.SetPollAnswer

-- | Changes the user answer to a poll. A poll in quiz mode can be answered
--   only once
data SetPollAnswer
SetPollAnswer :: Maybe [Int] -> Maybe Int -> Maybe Int -> SetPollAnswer

-- | 0-based identifiers of answer options, chosen by the user. User can
--   choose more than 1 answer option only is the poll allows multiple
--   answers
[option_ids] :: SetPollAnswer -> Maybe [Int]

-- | Identifier of the message containing the poll
[message_id] :: SetPollAnswer -> Maybe Int

-- | Identifier of the chat to which the poll belongs
[chat_id] :: SetPollAnswer -> Maybe Int
instance GHC.Classes.Eq TD.Query.SetPollAnswer.SetPollAnswer
instance GHC.Show.Show TD.Query.SetPollAnswer.SetPollAnswer
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SetPollAnswer.SetPollAnswer


module TD.Query.SetPassword

-- | Changes the password for the current user. If a new recovery email
--   address is specified, then the change will not be applied until the
--   new recovery email address is confirmed
data SetPassword
SetPassword :: Maybe String -> Maybe Bool -> Maybe String -> Maybe String -> Maybe String -> SetPassword

[new_recovery_email_address] :: SetPassword -> Maybe String

[set_recovery_email_address] :: SetPassword -> Maybe Bool

[new_hint] :: SetPassword -> Maybe String

[new_password] :: SetPassword -> Maybe String

-- | Previous password of the user <tt>new_password New password of the
--   user; may be empty to remove the password </tt>new_hint New password
--   hint; may be empty <tt>set_recovery_email_address Pass true to change
--   also the recovery email address </tt>new_recovery_email_address New
--   recovery email address; may be empty
[old_password] :: SetPassword -> Maybe String
instance GHC.Classes.Eq TD.Query.SetPassword.SetPassword
instance GHC.Show.Show TD.Query.SetPassword.SetPassword
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SetPassword.SetPassword


module TD.Query.SetName

-- | Changes the first and last name of the current user <tt>first_name The
--   new value of the first name for the current user; 1-64 characters
--   </tt>last_name The new value of the optional last name for the current
--   user; 0-64 characters
data SetName
SetName :: Maybe String -> Maybe String -> SetName

[last_name] :: SetName -> Maybe String

[first_name] :: SetName -> Maybe String
instance GHC.Classes.Eq TD.Query.SetName.SetName
instance GHC.Show.Show TD.Query.SetName.SetName
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SetName.SetName


module TD.Query.SetMessageReaction

-- | Changes chosen reaction for a message
data SetMessageReaction
SetMessageReaction :: Maybe Bool -> Maybe String -> Maybe Int -> Maybe Int -> SetMessageReaction

-- | Pass true if the reaction is added with a big animation
[is_big] :: SetMessageReaction -> Maybe Bool

-- | Text representation of the new chosen reaction. Can be an empty string
--   or the currently chosen non-big reaction to remove the reaction
[reaction] :: SetMessageReaction -> Maybe String

-- | Identifier of the message
[message_id] :: SetMessageReaction -> Maybe Int

-- | Identifier of the chat to which the message belongs
[chat_id] :: SetMessageReaction -> Maybe Int
instance GHC.Classes.Eq TD.Query.SetMessageReaction.SetMessageReaction
instance GHC.Show.Show TD.Query.SetMessageReaction.SetMessageReaction
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SetMessageReaction.SetMessageReaction


module TD.Query.SetLogVerbosityLevel

-- | Sets the verbosity level of the internal logging of TDLib. Can be
--   called synchronously
data SetLogVerbosityLevel
SetLogVerbosityLevel :: Maybe Int -> SetLogVerbosityLevel

-- | New value of the verbosity level for logging. Value 0 corresponds to
--   fatal errors, value 1 corresponds to errors, value 2 corresponds to
--   warnings and debug warnings, value 3 corresponds to informational,
--   value 4 corresponds to debug, value 5 corresponds to verbose debug,
--   value greater than 5 and up to 1023 can be used to enable even more
--   logging
[new_verbosity_level] :: SetLogVerbosityLevel -> Maybe Int
instance GHC.Classes.Eq TD.Query.SetLogVerbosityLevel.SetLogVerbosityLevel
instance GHC.Show.Show TD.Query.SetLogVerbosityLevel.SetLogVerbosityLevel
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SetLogVerbosityLevel.SetLogVerbosityLevel


module TD.Query.SetLogTagVerbosityLevel

-- | Sets the verbosity level for a specified TDLib internal log tag. Can
--   be called synchronously
data SetLogTagVerbosityLevel
SetLogTagVerbosityLevel :: Maybe Int -> Maybe String -> SetLogTagVerbosityLevel

[new_verbosity_level] :: SetLogTagVerbosityLevel -> Maybe Int

-- | Logging tag to change verbosity level @new_verbosity_level New
--   verbosity level; 1-1024
[tag] :: SetLogTagVerbosityLevel -> Maybe String
instance GHC.Classes.Eq TD.Query.SetLogTagVerbosityLevel.SetLogTagVerbosityLevel
instance GHC.Show.Show TD.Query.SetLogTagVerbosityLevel.SetLogTagVerbosityLevel
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SetLogTagVerbosityLevel.SetLogTagVerbosityLevel


module TD.Query.SetInlineGameScore

-- | Updates the game score of the specified user in a game; for bots only
--   <tt>inline_message_id Inline message identifier </tt>edit_message Pass
--   true to edit the game message to include the current scoreboard
--   <tt>user_id User identifier </tt>score The new score
data SetInlineGameScore
SetInlineGameScore :: Maybe Bool -> Maybe Int -> Maybe Int -> Maybe Bool -> Maybe String -> SetInlineGameScore

-- | Pass true to update the score even if it decreases. If the score is 0,
--   the user will be deleted from the high score table
[force] :: SetInlineGameScore -> Maybe Bool

[score] :: SetInlineGameScore -> Maybe Int

[user_id] :: SetInlineGameScore -> Maybe Int

[edit_message] :: SetInlineGameScore -> Maybe Bool

[inline_message_id] :: SetInlineGameScore -> Maybe String
instance GHC.Classes.Eq TD.Query.SetInlineGameScore.SetInlineGameScore
instance GHC.Show.Show TD.Query.SetInlineGameScore.SetInlineGameScore
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SetInlineGameScore.SetInlineGameScore


module TD.Query.SetInactiveSessionTtl

-- | Changes the period of inactivity after which sessions will
--   automatically be terminated @inactive_session_ttl_days New number of
--   days of inactivity before sessions will be automatically terminated;
--   1-366 days
data SetInactiveSessionTtl
SetInactiveSessionTtl :: Maybe Int -> SetInactiveSessionTtl

[inactive_session_ttl_days] :: SetInactiveSessionTtl -> Maybe Int
instance GHC.Classes.Eq TD.Query.SetInactiveSessionTtl.SetInactiveSessionTtl
instance GHC.Show.Show TD.Query.SetInactiveSessionTtl.SetInactiveSessionTtl
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SetInactiveSessionTtl.SetInactiveSessionTtl


module TD.Query.SetGroupCallTitle

-- | Sets group call title. Requires groupCall.can_be_managed group call
--   flag <tt>group_call_id Group call identifier </tt>title New group call
--   title; 1-64 characters
data SetGroupCallTitle
SetGroupCallTitle :: Maybe String -> Maybe Int -> SetGroupCallTitle

[title] :: SetGroupCallTitle -> Maybe String

[group_call_id] :: SetGroupCallTitle -> Maybe Int
instance GHC.Classes.Eq TD.Query.SetGroupCallTitle.SetGroupCallTitle
instance GHC.Show.Show TD.Query.SetGroupCallTitle.SetGroupCallTitle
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SetGroupCallTitle.SetGroupCallTitle


module TD.Query.SetGroupCallParticipantIsSpeaking

-- | Informs TDLib that speaking state of a participant of an active group
--   has changed @group_call_id Group call identifier
data SetGroupCallParticipantIsSpeaking
SetGroupCallParticipantIsSpeaking :: Maybe Bool -> Maybe Int -> Maybe Int -> SetGroupCallParticipantIsSpeaking

[is_speaking] :: SetGroupCallParticipantIsSpeaking -> Maybe Bool

-- | Group call participant's synchronization audio source identifier, or 0
--   for the current user @is_speaking Pass true if the user is speaking
[audio_source] :: SetGroupCallParticipantIsSpeaking -> Maybe Int

[group_call_id] :: SetGroupCallParticipantIsSpeaking -> Maybe Int
instance GHC.Classes.Eq TD.Query.SetGroupCallParticipantIsSpeaking.SetGroupCallParticipantIsSpeaking
instance GHC.Show.Show TD.Query.SetGroupCallParticipantIsSpeaking.SetGroupCallParticipantIsSpeaking
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SetGroupCallParticipantIsSpeaking.SetGroupCallParticipantIsSpeaking


module TD.Query.SetGameScore

-- | Updates the game score of the specified user in the game; for bots
--   only <tt>chat_id The chat to which the message with the game belongs
--   </tt>message_id Identifier of the message
data SetGameScore
SetGameScore :: Maybe Bool -> Maybe Int -> Maybe Int -> Maybe Bool -> Maybe Int -> Maybe Int -> SetGameScore

-- | Pass true to update the score even if it decreases. If the score is 0,
--   the user will be deleted from the high score table
[force] :: SetGameScore -> Maybe Bool

[score] :: SetGameScore -> Maybe Int

[user_id] :: SetGameScore -> Maybe Int

-- | Pass true to edit the game message to include the current scoreboard
--   <tt>user_id User identifier </tt>score The new score
[edit_message] :: SetGameScore -> Maybe Bool

[message_id] :: SetGameScore -> Maybe Int

[chat_id] :: SetGameScore -> Maybe Int
instance GHC.Classes.Eq TD.Query.SetGameScore.SetGameScore
instance GHC.Show.Show TD.Query.SetGameScore.SetGameScore
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SetGameScore.SetGameScore


module TD.Query.SetFileGenerationProgress

-- | Informs TDLib on a file generation progress
data SetFileGenerationProgress
SetFileGenerationProgress :: Maybe Int -> Maybe Int -> Maybe Int -> SetFileGenerationProgress

-- | The number of bytes already generated
[local_prefix_size] :: SetFileGenerationProgress -> Maybe Int

-- | Expected size of the generated file, in bytes; 0 if unknown
[expected_size] :: SetFileGenerationProgress -> Maybe Int

-- | The identifier of the generation process
[generation_id] :: SetFileGenerationProgress -> Maybe Int
instance GHC.Classes.Eq TD.Query.SetFileGenerationProgress.SetFileGenerationProgress
instance GHC.Show.Show TD.Query.SetFileGenerationProgress.SetFileGenerationProgress
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SetFileGenerationProgress.SetFileGenerationProgress


module TD.Query.SetDatabaseEncryptionKey

-- | Changes the database encryption key. Usually the encryption key is
--   never changed and is stored in some OS keychain @new_encryption_key
--   New encryption key
data SetDatabaseEncryptionKey
SetDatabaseEncryptionKey :: Maybe String -> SetDatabaseEncryptionKey

[new_encryption_key] :: SetDatabaseEncryptionKey -> Maybe String
instance GHC.Classes.Eq TD.Query.SetDatabaseEncryptionKey.SetDatabaseEncryptionKey
instance GHC.Show.Show TD.Query.SetDatabaseEncryptionKey.SetDatabaseEncryptionKey
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SetDatabaseEncryptionKey.SetDatabaseEncryptionKey


module TD.Query.SetChatTitle

-- | Changes the chat title. Supported only for basic groups, supergroups
--   and channels. Requires can_change_info administrator right
data SetChatTitle
SetChatTitle :: Maybe String -> Maybe Int -> SetChatTitle

[title] :: SetChatTitle -> Maybe String

-- | Chat identifier @title New title of the chat; 1-128 characters
[chat_id] :: SetChatTitle -> Maybe Int
instance GHC.Classes.Eq TD.Query.SetChatTitle.SetChatTitle
instance GHC.Show.Show TD.Query.SetChatTitle.SetChatTitle
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SetChatTitle.SetChatTitle


module TD.Query.SetChatTheme

-- | Changes the chat theme. Supported only in private and secret chats
--   <tt>chat_id Chat identifier </tt>theme_name Name of the new chat
--   theme; pass an empty string to return the default theme
data SetChatTheme
SetChatTheme :: Maybe String -> Maybe Int -> SetChatTheme

[theme_name] :: SetChatTheme -> Maybe String

[chat_id] :: SetChatTheme -> Maybe Int
instance GHC.Classes.Eq TD.Query.SetChatTheme.SetChatTheme
instance GHC.Show.Show TD.Query.SetChatTheme.SetChatTheme
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SetChatTheme.SetChatTheme


module TD.Query.SetChatSlowModeDelay

-- | Changes the slow mode delay of a chat. Available only for supergroups;
--   requires can_restrict_members rights <tt>chat_id Chat identifier
--   </tt>slow_mode_delay New slow mode delay for the chat, in seconds;
--   must be one of 0, 10, 30, 60, 300, 900, 3600
data SetChatSlowModeDelay
SetChatSlowModeDelay :: Maybe Int -> Maybe Int -> SetChatSlowModeDelay

[slow_mode_delay] :: SetChatSlowModeDelay -> Maybe Int

[chat_id] :: SetChatSlowModeDelay -> Maybe Int
instance GHC.Classes.Eq TD.Query.SetChatSlowModeDelay.SetChatSlowModeDelay
instance GHC.Show.Show TD.Query.SetChatSlowModeDelay.SetChatSlowModeDelay
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SetChatSlowModeDelay.SetChatSlowModeDelay


module TD.Query.SetChatMessageTtl

-- | Changes the message TTL in a chat. Requires can_delete_messages
--   administrator right in basic groups, supergroups and channels Message
--   TTL can't be changed in a chat with the current user (Saved Messages)
--   and the chat 777000 (Telegram).
data SetChatMessageTtl
SetChatMessageTtl :: Maybe Int -> Maybe Int -> SetChatMessageTtl

[ttl] :: SetChatMessageTtl -> Maybe Int

-- | Chat identifier @ttl New TTL value, in seconds; unless the chat is
--   secret, it must be from 0 up to 365 * 86400 and be divisible by 86400
[chat_id] :: SetChatMessageTtl -> Maybe Int
instance GHC.Classes.Eq TD.Query.SetChatMessageTtl.SetChatMessageTtl
instance GHC.Show.Show TD.Query.SetChatMessageTtl.SetChatMessageTtl
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SetChatMessageTtl.SetChatMessageTtl


module TD.Query.SetChatDiscussionGroup

-- | Changes the discussion group of a channel chat; requires
--   can_change_info administrator right in the channel if it is specified
--   <tt>chat_id Identifier of the channel chat. Pass 0 to remove a link
--   from the supergroup passed in the second argument to a linked channel
--   chat (requires can_pin_messages rights in the supergroup)
--   </tt>discussion_chat_id Identifier of a new channel's discussion
--   group. Use 0 to remove the discussion group. Use the method
--   getSuitableDiscussionChats to find all suitable groups. Basic group
--   chats must be first upgraded to supergroup chats. If new chat members
--   don't have access to old messages in the supergroup, then
--   toggleSupergroupIsAllHistoryAvailable must be used first to change
--   that
data SetChatDiscussionGroup
SetChatDiscussionGroup :: Maybe Int -> Maybe Int -> SetChatDiscussionGroup

[discussion_chat_id] :: SetChatDiscussionGroup -> Maybe Int

[chat_id] :: SetChatDiscussionGroup -> Maybe Int
instance GHC.Classes.Eq TD.Query.SetChatDiscussionGroup.SetChatDiscussionGroup
instance GHC.Show.Show TD.Query.SetChatDiscussionGroup.SetChatDiscussionGroup
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SetChatDiscussionGroup.SetChatDiscussionGroup


module TD.Query.SetChatDescription

-- | Changes information about a chat. Available for basic groups,
--   supergroups, and channels. Requires can_change_info administrator
--   right <tt>chat_id Identifier of the chat </tt>param_description New
--   chat description; 0-255 characters
data SetChatDescription
SetChatDescription :: Maybe String -> Maybe Int -> SetChatDescription

[description] :: SetChatDescription -> Maybe String

[chat_id] :: SetChatDescription -> Maybe Int
instance GHC.Classes.Eq TD.Query.SetChatDescription.SetChatDescription
instance GHC.Show.Show TD.Query.SetChatDescription.SetChatDescription
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SetChatDescription.SetChatDescription


module TD.Query.SetChatClientData

-- | Changes application-specific data associated with a chat <tt>chat_id
--   Chat identifier </tt>client_data New value of client_data
data SetChatClientData
SetChatClientData :: Maybe String -> Maybe Int -> SetChatClientData

[client_data] :: SetChatClientData -> Maybe String

[chat_id] :: SetChatClientData -> Maybe Int
instance GHC.Classes.Eq TD.Query.SetChatClientData.SetChatClientData
instance GHC.Show.Show TD.Query.SetChatClientData.SetChatClientData
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SetChatClientData.SetChatClientData


module TD.Query.SetChatAvailableReactions

-- | Changes reactions, available in a chat. Available for basic groups,
--   supergroups, and channels. Requires can_change_info administrator
--   right <tt>chat_id Identifier of the chat </tt>available_reactions New
--   list of reactions, available in the chat. All reactions must be active
data SetChatAvailableReactions
SetChatAvailableReactions :: Maybe [String] -> Maybe Int -> SetChatAvailableReactions

[available_reactions] :: SetChatAvailableReactions -> Maybe [String]

[chat_id] :: SetChatAvailableReactions -> Maybe Int
instance GHC.Classes.Eq TD.Query.SetChatAvailableReactions.SetChatAvailableReactions
instance GHC.Show.Show TD.Query.SetChatAvailableReactions.SetChatAvailableReactions
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SetChatAvailableReactions.SetChatAvailableReactions


module TD.Query.SetBotUpdatesStatus

-- | Informs the server about the number of pending bot updates if they
--   haven't been processed for a long time; for bots only
--   <tt>pending_update_count The number of pending updates
--   </tt>error_message The last error message
data SetBotUpdatesStatus
SetBotUpdatesStatus :: Maybe String -> Maybe Int -> SetBotUpdatesStatus

[error_message] :: SetBotUpdatesStatus -> Maybe String

[pending_update_count] :: SetBotUpdatesStatus -> Maybe Int
instance GHC.Classes.Eq TD.Query.SetBotUpdatesStatus.SetBotUpdatesStatus
instance GHC.Show.Show TD.Query.SetBotUpdatesStatus.SetBotUpdatesStatus
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SetBotUpdatesStatus.SetBotUpdatesStatus


module TD.Query.SetBio

-- | Changes the bio of the current user @bio The new value of the user
--   bio; 0-GetOption("bio_length_max") characters without line feeds
data SetBio
SetBio :: Maybe String -> SetBio

[bio] :: SetBio -> Maybe String
instance GHC.Classes.Eq TD.Query.SetBio.SetBio
instance GHC.Show.Show TD.Query.SetBio.SetBio
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SetBio.SetBio


module TD.Query.SetAlarm

-- | Succeeds after a specified amount of time has passed. Can be called
--   before initialization @seconds Number of seconds before the function
--   returns
data SetAlarm
SetAlarm :: Maybe Float -> SetAlarm

[seconds] :: SetAlarm -> Maybe Float
instance GHC.Classes.Eq TD.Query.SetAlarm.SetAlarm
instance GHC.Show.Show TD.Query.SetAlarm.SetAlarm
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SetAlarm.SetAlarm


module TD.Query.SendWebAppData

-- | Sends data received from a keyboardButtonTypeWebApp Web App to a bot
data SendWebAppData
SendWebAppData :: Maybe String -> Maybe String -> Maybe Int -> SendWebAppData

[_data] :: SendWebAppData -> Maybe String

[button_text] :: SendWebAppData -> Maybe String

-- | Identifier of the target bot <tt>button_text Text of the
--   keyboardButtonTypeWebApp button, which opened the Web App </tt>data
--   Received data
[bot_user_id] :: SendWebAppData -> Maybe Int
instance GHC.Classes.Eq TD.Query.SendWebAppData.SendWebAppData
instance GHC.Show.Show TD.Query.SendWebAppData.SendWebAppData
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SendWebAppData.SendWebAppData


module TD.Query.SendEmailAddressVerificationCode

-- | Sends a code to verify an email address to be added to a user's
--   Telegram Passport @email_address Email address
data SendEmailAddressVerificationCode
SendEmailAddressVerificationCode :: Maybe String -> SendEmailAddressVerificationCode

[email_address] :: SendEmailAddressVerificationCode -> Maybe String
instance GHC.Classes.Eq TD.Query.SendEmailAddressVerificationCode.SendEmailAddressVerificationCode
instance GHC.Show.Show TD.Query.SendEmailAddressVerificationCode.SendEmailAddressVerificationCode
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SendEmailAddressVerificationCode.SendEmailAddressVerificationCode


module TD.Query.SendCustomRequest

-- | Sends a custom request; for bots only <tt>method The method name
--   </tt>parameters JSON-serialized method parameters
data SendCustomRequest
SendCustomRequest :: Maybe String -> Maybe String -> SendCustomRequest

[parameters] :: SendCustomRequest -> Maybe String

[method] :: SendCustomRequest -> Maybe String
instance GHC.Classes.Eq TD.Query.SendCustomRequest.SendCustomRequest
instance GHC.Show.Show TD.Query.SendCustomRequest.SendCustomRequest
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SendCustomRequest.SendCustomRequest


module TD.Query.SendChatScreenshotTakenNotification

-- | Sends a notification about a screenshot taken in a chat. Supported
--   only in private and secret chats @chat_id Chat identifier
data SendChatScreenshotTakenNotification
SendChatScreenshotTakenNotification :: Maybe Int -> SendChatScreenshotTakenNotification

[chat_id] :: SendChatScreenshotTakenNotification -> Maybe Int
instance GHC.Classes.Eq TD.Query.SendChatScreenshotTakenNotification.SendChatScreenshotTakenNotification
instance GHC.Show.Show TD.Query.SendChatScreenshotTakenNotification.SendChatScreenshotTakenNotification
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SendChatScreenshotTakenNotification.SendChatScreenshotTakenNotification


module TD.Query.SendCallSignalingData

-- | Sends call signaling data <tt>call_id Call identifier </tt>data The
--   data
data SendCallSignalingData
SendCallSignalingData :: Maybe String -> Maybe Int -> SendCallSignalingData

[_data] :: SendCallSignalingData -> Maybe String

[call_id] :: SendCallSignalingData -> Maybe Int
instance GHC.Classes.Eq TD.Query.SendCallSignalingData.SendCallSignalingData
instance GHC.Show.Show TD.Query.SendCallSignalingData.SendCallSignalingData
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SendCallSignalingData.SendCallSignalingData


module TD.Query.SendCallDebugInformation

-- | Sends debug information for a call to Telegram servers <tt>call_id
--   Call identifier </tt>debug_information Debug information in
--   application-specific format
data SendCallDebugInformation
SendCallDebugInformation :: Maybe String -> Maybe Int -> SendCallDebugInformation

[debug_information] :: SendCallDebugInformation -> Maybe String

[call_id] :: SendCallDebugInformation -> Maybe Int
instance GHC.Classes.Eq TD.Query.SendCallDebugInformation.SendCallDebugInformation
instance GHC.Show.Show TD.Query.SendCallDebugInformation.SendCallDebugInformation
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SendCallDebugInformation.SendCallDebugInformation


module TD.Query.SendBotStartMessage

-- | Invites a bot to a chat (if it is not yet a member) and sends it the
--   /start command. Bots can't be invited to a private chat other than the
--   chat with the bot. Bots can't be invited to channels (although they
--   can be added as admins) and secret chats. Returns the sent message
data SendBotStartMessage
SendBotStartMessage :: Maybe String -> Maybe Int -> Maybe Int -> SendBotStartMessage

[parameter] :: SendBotStartMessage -> Maybe String

[chat_id] :: SendBotStartMessage -> Maybe Int

-- | Identifier of the bot <tt>chat_id Identifier of the target chat
--   </tt>parameter A hidden parameter sent to the bot for deep linking
--   purposes (https:/<i>core.telegram.org</i>bots#deep-linking)
[bot_user_id] :: SendBotStartMessage -> Maybe Int
instance GHC.Classes.Eq TD.Query.SendBotStartMessage.SendBotStartMessage
instance GHC.Show.Show TD.Query.SendBotStartMessage.SendBotStartMessage
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SendBotStartMessage.SendBotStartMessage


module TD.Query.SearchUserByPhoneNumber

-- | Searches a user by their phone number. Returns a 404 error if the user
--   can't be found @phone_number Phone number to search for
data SearchUserByPhoneNumber
SearchUserByPhoneNumber :: Maybe String -> SearchUserByPhoneNumber

[phone_number] :: SearchUserByPhoneNumber -> Maybe String
instance GHC.Classes.Eq TD.Query.SearchUserByPhoneNumber.SearchUserByPhoneNumber
instance GHC.Show.Show TD.Query.SearchUserByPhoneNumber.SearchUserByPhoneNumber
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SearchUserByPhoneNumber.SearchUserByPhoneNumber


module TD.Query.SearchStickers

-- | Searches for stickers from public sticker sets that correspond to a
--   given emoji <tt>emoji String representation of emoji; must be
--   non-empty </tt>limit The maximum number of stickers to be returned
data SearchStickers
SearchStickers :: Maybe Int -> Maybe String -> SearchStickers

[limit] :: SearchStickers -> Maybe Int

[emoji] :: SearchStickers -> Maybe String
instance GHC.Classes.Eq TD.Query.SearchStickers.SearchStickers
instance GHC.Show.Show TD.Query.SearchStickers.SearchStickers
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SearchStickers.SearchStickers


module TD.Query.SearchStickerSets

-- | Searches for ordinary sticker sets by looking for specified query in
--   their title and name. Excludes installed sticker sets from the results
--   @query Query to search for
data SearchStickerSets
SearchStickerSets :: Maybe String -> SearchStickerSets

[query] :: SearchStickerSets -> Maybe String
instance GHC.Classes.Eq TD.Query.SearchStickerSets.SearchStickerSets
instance GHC.Show.Show TD.Query.SearchStickerSets.SearchStickerSets
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SearchStickerSets.SearchStickerSets


module TD.Query.SearchStickerSet

-- | Searches for a sticker set by its name @name Name of the sticker set
data SearchStickerSet
SearchStickerSet :: Maybe String -> SearchStickerSet

[name] :: SearchStickerSet -> Maybe String
instance GHC.Classes.Eq TD.Query.SearchStickerSet.SearchStickerSet
instance GHC.Show.Show TD.Query.SearchStickerSet.SearchStickerSet
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SearchStickerSet.SearchStickerSet


module TD.Query.SearchPublicChats

-- | Searches public chats by looking for specified query in their username
--   and title. Currently, only private chats, supergroups and channels can
--   be public. Returns a meaningful number of results. Excludes private
--   chats with contacts and chats from the chat list from the results
--   @query Query to search for
data SearchPublicChats
SearchPublicChats :: Maybe String -> SearchPublicChats

[query] :: SearchPublicChats -> Maybe String
instance GHC.Classes.Eq TD.Query.SearchPublicChats.SearchPublicChats
instance GHC.Show.Show TD.Query.SearchPublicChats.SearchPublicChats
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SearchPublicChats.SearchPublicChats


module TD.Query.SearchPublicChat

-- | Searches a public chat by its username. Currently, only private chats,
--   supergroups and channels can be public. Returns the chat if found;
--   otherwise an error is returned @username Username to be resolved
data SearchPublicChat
SearchPublicChat :: Maybe String -> SearchPublicChat

[username] :: SearchPublicChat -> Maybe String
instance GHC.Classes.Eq TD.Query.SearchPublicChat.SearchPublicChat
instance GHC.Show.Show TD.Query.SearchPublicChat.SearchPublicChat
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SearchPublicChat.SearchPublicChat


module TD.Query.SearchOutgoingDocumentMessages

-- | Searches for outgoing messages with content of the type
--   messageDocument in all chats except secret chats. Returns the results
--   in reverse chronological order
data SearchOutgoingDocumentMessages
SearchOutgoingDocumentMessages :: Maybe Int -> Maybe String -> SearchOutgoingDocumentMessages

-- | The maximum number of messages to be returned; up to 100
[limit] :: SearchOutgoingDocumentMessages -> Maybe Int

-- | Query to search for in document file name and message caption
[query] :: SearchOutgoingDocumentMessages -> Maybe String
instance GHC.Classes.Eq TD.Query.SearchOutgoingDocumentMessages.SearchOutgoingDocumentMessages
instance GHC.Show.Show TD.Query.SearchOutgoingDocumentMessages.SearchOutgoingDocumentMessages
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SearchOutgoingDocumentMessages.SearchOutgoingDocumentMessages


module TD.Query.SearchInstalledStickerSets

-- | Searches for installed sticker sets by looking for specified query in
--   their title and name <tt>is_masks Pass true to return mask sticker
--   sets; pass false to return ordinary sticker sets </tt>query Query to
--   search for @limit The maximum number of sticker sets to return
data SearchInstalledStickerSets
SearchInstalledStickerSets :: Maybe Int -> Maybe String -> Maybe Bool -> SearchInstalledStickerSets

[limit] :: SearchInstalledStickerSets -> Maybe Int

[query] :: SearchInstalledStickerSets -> Maybe String

[is_masks] :: SearchInstalledStickerSets -> Maybe Bool
instance GHC.Classes.Eq TD.Query.SearchInstalledStickerSets.SearchInstalledStickerSets
instance GHC.Show.Show TD.Query.SearchInstalledStickerSets.SearchInstalledStickerSets
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SearchInstalledStickerSets.SearchInstalledStickerSets


module TD.Query.SearchHashtags

-- | Searches for recently used hashtags by their prefix <tt>prefix Hashtag
--   prefix to search for </tt>limit The maximum number of hashtags to be
--   returned
data SearchHashtags
SearchHashtags :: Maybe Int -> Maybe String -> SearchHashtags

[limit] :: SearchHashtags -> Maybe Int

[prefix] :: SearchHashtags -> Maybe String
instance GHC.Classes.Eq TD.Query.SearchHashtags.SearchHashtags
instance GHC.Show.Show TD.Query.SearchHashtags.SearchHashtags
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SearchHashtags.SearchHashtags


module TD.Query.SearchFileDownloads

-- | Searches for files in the file download list or recently downloaded
--   files from the list
data SearchFileDownloads
SearchFileDownloads :: Maybe Int -> Maybe String -> Maybe Bool -> Maybe Bool -> Maybe String -> SearchFileDownloads

-- | The maximum number of files to be returned
[limit] :: SearchFileDownloads -> Maybe Int

-- | Offset of the first entry to return as received from the previous
--   request; use empty string to get the first chunk of results
[offset] :: SearchFileDownloads -> Maybe String

-- | Pass true to search only for completed downloads
[only_completed] :: SearchFileDownloads -> Maybe Bool

-- | Pass true to search only for active downloads, including paused
[only_active] :: SearchFileDownloads -> Maybe Bool

-- | Query to search for; may be empty to return all downloaded files
[query] :: SearchFileDownloads -> Maybe String
instance GHC.Classes.Eq TD.Query.SearchFileDownloads.SearchFileDownloads
instance GHC.Show.Show TD.Query.SearchFileDownloads.SearchFileDownloads
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SearchFileDownloads.SearchFileDownloads


module TD.Query.SearchEmojis

-- | Searches for emojis by keywords. Supported only if the file database
--   is enabled <tt>text Text to search for </tt>exact_match Pass true if
--   only emojis, which exactly match the text, needs to be returned
--   @input_language_codes List of possible IETF language tags of the
--   user's input language; may be empty if unknown
data SearchEmojis
SearchEmojis :: Maybe [String] -> Maybe Bool -> Maybe String -> SearchEmojis

[input_language_codes] :: SearchEmojis -> Maybe [String]

[exact_match] :: SearchEmojis -> Maybe Bool

[text] :: SearchEmojis -> Maybe String
instance GHC.Classes.Eq TD.Query.SearchEmojis.SearchEmojis
instance GHC.Show.Show TD.Query.SearchEmojis.SearchEmojis
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SearchEmojis.SearchEmojis


module TD.Query.SearchContacts

-- | Searches for the specified query in the first names, last names and
--   usernames of the known user contacts <tt>query Query to search for;
--   may be empty to return all contacts </tt>limit The maximum number of
--   users to be returned
data SearchContacts
SearchContacts :: Maybe Int -> Maybe String -> SearchContacts

[limit] :: SearchContacts -> Maybe Int

[query] :: SearchContacts -> Maybe String
instance GHC.Classes.Eq TD.Query.SearchContacts.SearchContacts
instance GHC.Show.Show TD.Query.SearchContacts.SearchContacts
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SearchContacts.SearchContacts


module TD.Query.SearchChatsOnServer

-- | Searches for the specified query in the title and username of already
--   known chats via request to the server. Returns chats in the order seen
--   in the main chat list <tt>query Query to search for </tt>limit The
--   maximum number of chats to be returned
data SearchChatsOnServer
SearchChatsOnServer :: Maybe Int -> Maybe String -> SearchChatsOnServer

[limit] :: SearchChatsOnServer -> Maybe Int

[query] :: SearchChatsOnServer -> Maybe String
instance GHC.Classes.Eq TD.Query.SearchChatsOnServer.SearchChatsOnServer
instance GHC.Show.Show TD.Query.SearchChatsOnServer.SearchChatsOnServer
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SearchChatsOnServer.SearchChatsOnServer


module TD.Query.SearchChats

-- | Searches for the specified query in the title and username of already
--   known chats, this is an offline request. Returns chats in the order
--   seen in the main chat list <tt>query Query to search for. If the query
--   is empty, returns up to 50 recently found chats </tt>limit The maximum
--   number of chats to be returned
data SearchChats
SearchChats :: Maybe Int -> Maybe String -> SearchChats

[limit] :: SearchChats -> Maybe Int

[query] :: SearchChats -> Maybe String
instance GHC.Classes.Eq TD.Query.SearchChats.SearchChats
instance GHC.Show.Show TD.Query.SearchChats.SearchChats
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SearchChats.SearchChats


module TD.Query.SearchChatRecentLocationMessages

-- | Returns information about the recent locations of chat members that
--   were sent to the chat. Returns up to 1 location message per user
--   <tt>chat_id Chat identifier </tt>limit The maximum number of messages
--   to be returned
data SearchChatRecentLocationMessages
SearchChatRecentLocationMessages :: Maybe Int -> Maybe Int -> SearchChatRecentLocationMessages

[limit] :: SearchChatRecentLocationMessages -> Maybe Int

[chat_id] :: SearchChatRecentLocationMessages -> Maybe Int
instance GHC.Classes.Eq TD.Query.SearchChatRecentLocationMessages.SearchChatRecentLocationMessages
instance GHC.Show.Show TD.Query.SearchChatRecentLocationMessages.SearchChatRecentLocationMessages
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SearchChatRecentLocationMessages.SearchChatRecentLocationMessages


module TD.Query.SearchCallMessages

-- | Searches for call messages. Returns the results in reverse
--   chronological order (i. e., in order of decreasing message_id). For
--   optimal performance, the number of returned messages is chosen by
--   TDLib
data SearchCallMessages
SearchCallMessages :: Maybe Bool -> Maybe Int -> Maybe Int -> SearchCallMessages

-- | Pass true to search only for messages with missed/declined calls
[only_missed] :: SearchCallMessages -> Maybe Bool

-- | The maximum number of messages to be returned; up to 100. For optimal
--   performance, the number of returned messages is chosen by TDLib and
--   can be smaller than the specified limit
[limit] :: SearchCallMessages -> Maybe Int

-- | Identifier of the message from which to search; use 0 to get results
--   from the last message
[from_message_id] :: SearchCallMessages -> Maybe Int
instance GHC.Classes.Eq TD.Query.SearchCallMessages.SearchCallMessages
instance GHC.Show.Show TD.Query.SearchCallMessages.SearchCallMessages
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SearchCallMessages.SearchCallMessages


module TD.Query.SearchBackground

-- | Searches for a background by its name @name The name of the background
data SearchBackground
SearchBackground :: Maybe String -> SearchBackground

[name] :: SearchBackground -> Maybe String
instance GHC.Classes.Eq TD.Query.SearchBackground.SearchBackground
instance GHC.Show.Show TD.Query.SearchBackground.SearchBackground
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SearchBackground.SearchBackground


module TD.Query.RevokeGroupCallInviteLink

-- | Revokes invite link for a group call. Requires
--   groupCall.can_be_managed group call flag @group_call_id Group call
--   identifier
data RevokeGroupCallInviteLink
RevokeGroupCallInviteLink :: Maybe Int -> RevokeGroupCallInviteLink

[group_call_id] :: RevokeGroupCallInviteLink -> Maybe Int
instance GHC.Classes.Eq TD.Query.RevokeGroupCallInviteLink.RevokeGroupCallInviteLink
instance GHC.Show.Show TD.Query.RevokeGroupCallInviteLink.RevokeGroupCallInviteLink
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.RevokeGroupCallInviteLink.RevokeGroupCallInviteLink


module TD.Query.RevokeChatInviteLink

-- | Revokes invite link for a chat. Available for basic groups,
--   supergroups, and channels. Requires administrator privileges and
--   can_invite_users right in the chat for own links and owner privileges
--   for other links. If a primary link is revoked, then additionally to
--   the revoked link returns new primary link
data RevokeChatInviteLink
RevokeChatInviteLink :: Maybe String -> Maybe Int -> RevokeChatInviteLink

-- | Invite link to be revoked
[invite_link] :: RevokeChatInviteLink -> Maybe String

-- | Chat identifier
[chat_id] :: RevokeChatInviteLink -> Maybe Int
instance GHC.Classes.Eq TD.Query.RevokeChatInviteLink.RevokeChatInviteLink
instance GHC.Show.Show TD.Query.RevokeChatInviteLink.RevokeChatInviteLink
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.RevokeChatInviteLink.RevokeChatInviteLink


module TD.Query.ResetPassword

-- | Removes 2-step verification password without previous password and
--   access to recovery email address. The password can't be reset
--   immediately and the request needs to be repeated after the specified
--   time
data ResetPassword
ResetPassword :: ResetPassword
instance GHC.Classes.Eq TD.Query.ResetPassword.ResetPassword
instance GHC.Show.Show TD.Query.ResetPassword.ResetPassword
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ResetPassword.ResetPassword


module TD.Query.ResetNetworkStatistics

-- | Resets all network data usage statistics to zero. Can be called before
--   authorization
data ResetNetworkStatistics
ResetNetworkStatistics :: ResetNetworkStatistics
instance GHC.Classes.Eq TD.Query.ResetNetworkStatistics.ResetNetworkStatistics
instance GHC.Show.Show TD.Query.ResetNetworkStatistics.ResetNetworkStatistics
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ResetNetworkStatistics.ResetNetworkStatistics


module TD.Query.ResetBackgrounds

-- | Resets list of installed backgrounds to its default value
data ResetBackgrounds
ResetBackgrounds :: ResetBackgrounds
instance GHC.Classes.Eq TD.Query.ResetBackgrounds.ResetBackgrounds
instance GHC.Show.Show TD.Query.ResetBackgrounds.ResetBackgrounds
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ResetBackgrounds.ResetBackgrounds


module TD.Query.ResetAllNotificationSettings

-- | Resets all notification settings to their default values. By default,
--   all chats are unmuted and message previews are shown
data ResetAllNotificationSettings
ResetAllNotificationSettings :: ResetAllNotificationSettings
instance GHC.Classes.Eq TD.Query.ResetAllNotificationSettings.ResetAllNotificationSettings
instance GHC.Show.Show TD.Query.ResetAllNotificationSettings.ResetAllNotificationSettings
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ResetAllNotificationSettings.ResetAllNotificationSettings


module TD.Query.ResendRecoveryEmailAddressCode

-- | Resends the 2-step verification recovery email address verification
--   code
data ResendRecoveryEmailAddressCode
ResendRecoveryEmailAddressCode :: ResendRecoveryEmailAddressCode
instance GHC.Classes.Eq TD.Query.ResendRecoveryEmailAddressCode.ResendRecoveryEmailAddressCode
instance GHC.Show.Show TD.Query.ResendRecoveryEmailAddressCode.ResendRecoveryEmailAddressCode
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ResendRecoveryEmailAddressCode.ResendRecoveryEmailAddressCode


module TD.Query.ResendPhoneNumberVerificationCode

-- | Re-sends the code to verify a phone number to be added to a user's
--   Telegram Passport
data ResendPhoneNumberVerificationCode
ResendPhoneNumberVerificationCode :: ResendPhoneNumberVerificationCode
instance GHC.Classes.Eq TD.Query.ResendPhoneNumberVerificationCode.ResendPhoneNumberVerificationCode
instance GHC.Show.Show TD.Query.ResendPhoneNumberVerificationCode.ResendPhoneNumberVerificationCode
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ResendPhoneNumberVerificationCode.ResendPhoneNumberVerificationCode


module TD.Query.ResendPhoneNumberConfirmationCode

-- | Resends phone number confirmation code
data ResendPhoneNumberConfirmationCode
ResendPhoneNumberConfirmationCode :: ResendPhoneNumberConfirmationCode
instance GHC.Classes.Eq TD.Query.ResendPhoneNumberConfirmationCode.ResendPhoneNumberConfirmationCode
instance GHC.Show.Show TD.Query.ResendPhoneNumberConfirmationCode.ResendPhoneNumberConfirmationCode
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ResendPhoneNumberConfirmationCode.ResendPhoneNumberConfirmationCode


module TD.Query.ResendMessages

-- | Resends messages which failed to send. Can be called only for messages
--   for which messageSendingStateFailed.can_retry is true and after
--   specified in messageSendingStateFailed.retry_after time passed. If a
--   message is re-sent, the corresponding failed to send message is
--   deleted. Returns the sent messages in the same order as the message
--   identifiers passed in message_ids. If a message can't be re-sent, null
--   will be returned instead of the message
data ResendMessages
ResendMessages :: Maybe [Int] -> Maybe Int -> ResendMessages

[message_ids] :: ResendMessages -> Maybe [Int]

-- | Identifier of the chat to send messages @message_ids Identifiers of
--   the messages to resend. Message identifiers must be in a strictly
--   increasing order
[chat_id] :: ResendMessages -> Maybe Int
instance GHC.Classes.Eq TD.Query.ResendMessages.ResendMessages
instance GHC.Show.Show TD.Query.ResendMessages.ResendMessages
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ResendMessages.ResendMessages


module TD.Query.ResendEmailAddressVerificationCode

-- | Re-sends the code to verify an email address to be added to a user's
--   Telegram Passport
data ResendEmailAddressVerificationCode
ResendEmailAddressVerificationCode :: ResendEmailAddressVerificationCode
instance GHC.Classes.Eq TD.Query.ResendEmailAddressVerificationCode.ResendEmailAddressVerificationCode
instance GHC.Show.Show TD.Query.ResendEmailAddressVerificationCode.ResendEmailAddressVerificationCode
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ResendEmailAddressVerificationCode.ResendEmailAddressVerificationCode


module TD.Query.ResendChangePhoneNumberCode

-- | Re-sends the authentication code sent to confirm a new phone number
--   for the current user. Works only if the previously received
--   authenticationCodeInfo next_code_type was not null and the
--   server-specified timeout has passed
data ResendChangePhoneNumberCode
ResendChangePhoneNumberCode :: ResendChangePhoneNumberCode
instance GHC.Classes.Eq TD.Query.ResendChangePhoneNumberCode.ResendChangePhoneNumberCode
instance GHC.Show.Show TD.Query.ResendChangePhoneNumberCode.ResendChangePhoneNumberCode
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ResendChangePhoneNumberCode.ResendChangePhoneNumberCode


module TD.Query.ResendAuthenticationCode

-- | Re-sends an authentication code to the user. Works only when the
--   current authorization state is authorizationStateWaitCode, the
--   next_code_type of the result is not null and the server-specified
--   timeout has passed
data ResendAuthenticationCode
ResendAuthenticationCode :: ResendAuthenticationCode
instance GHC.Classes.Eq TD.Query.ResendAuthenticationCode.ResendAuthenticationCode
instance GHC.Show.Show TD.Query.ResendAuthenticationCode.ResendAuthenticationCode
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ResendAuthenticationCode.ResendAuthenticationCode


module TD.Query.RequestQrCodeAuthentication

-- | Requests QR code authentication by scanning a QR code on another
--   logged in device. Works only when the current authorization state is
--   authorizationStateWaitPhoneNumber, or if there is no pending
--   authentication query and the current authorization state is
--   authorizationStateWaitCode, authorizationStateWaitRegistration, or
--   authorizationStateWaitPassword
data RequestQrCodeAuthentication
RequestQrCodeAuthentication :: Maybe [Int] -> RequestQrCodeAuthentication

-- | List of user identifiers of other users currently using the
--   application
[other_user_ids] :: RequestQrCodeAuthentication -> Maybe [Int]
instance GHC.Classes.Eq TD.Query.RequestQrCodeAuthentication.RequestQrCodeAuthentication
instance GHC.Show.Show TD.Query.RequestQrCodeAuthentication.RequestQrCodeAuthentication
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.RequestQrCodeAuthentication.RequestQrCodeAuthentication


module TD.Query.RequestPasswordRecovery

-- | Requests to send a 2-step verification password recovery code to an
--   email address that was previously set up
data RequestPasswordRecovery
RequestPasswordRecovery :: RequestPasswordRecovery
instance GHC.Classes.Eq TD.Query.RequestPasswordRecovery.RequestPasswordRecovery
instance GHC.Show.Show TD.Query.RequestPasswordRecovery.RequestPasswordRecovery
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.RequestPasswordRecovery.RequestPasswordRecovery


module TD.Query.RequestAuthenticationPasswordRecovery

-- | Requests to send a password recovery code to an email address that was
--   previously set up. Works only when the current authorization state is
--   authorizationStateWaitPassword
data RequestAuthenticationPasswordRecovery
RequestAuthenticationPasswordRecovery :: RequestAuthenticationPasswordRecovery
instance GHC.Classes.Eq TD.Query.RequestAuthenticationPasswordRecovery.RequestAuthenticationPasswordRecovery
instance GHC.Show.Show TD.Query.RequestAuthenticationPasswordRecovery.RequestAuthenticationPasswordRecovery
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.RequestAuthenticationPasswordRecovery.RequestAuthenticationPasswordRecovery


module TD.Query.ReportSupergroupSpam

-- | Reports messages in a supergroup as spam; requires administrator
--   rights in the supergroup <tt>supergroup_id Supergroup identifier
--   </tt>message_ids Identifiers of messages to report
data ReportSupergroupSpam
ReportSupergroupSpam :: Maybe [Int] -> Maybe Int -> ReportSupergroupSpam

[message_ids] :: ReportSupergroupSpam -> Maybe [Int]

[supergroup_id] :: ReportSupergroupSpam -> Maybe Int
instance GHC.Classes.Eq TD.Query.ReportSupergroupSpam.ReportSupergroupSpam
instance GHC.Show.Show TD.Query.ReportSupergroupSpam.ReportSupergroupSpam
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ReportSupergroupSpam.ReportSupergroupSpam


module TD.Query.ReplaceVideoChatRtmpUrl

-- | Replaces the current RTMP URL for streaming to the chat; requires
--   creator privileges @chat_id Chat identifier
data ReplaceVideoChatRtmpUrl
ReplaceVideoChatRtmpUrl :: Maybe Int -> ReplaceVideoChatRtmpUrl

[chat_id] :: ReplaceVideoChatRtmpUrl -> Maybe Int
instance GHC.Classes.Eq TD.Query.ReplaceVideoChatRtmpUrl.ReplaceVideoChatRtmpUrl
instance GHC.Show.Show TD.Query.ReplaceVideoChatRtmpUrl.ReplaceVideoChatRtmpUrl
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ReplaceVideoChatRtmpUrl.ReplaceVideoChatRtmpUrl


module TD.Query.ReplacePrimaryChatInviteLink

-- | Replaces current primary invite link for a chat with a new primary
--   invite link. Available for basic groups, supergroups, and channels.
--   Requires administrator privileges and can_invite_users right @chat_id
--   Chat identifier
data ReplacePrimaryChatInviteLink
ReplacePrimaryChatInviteLink :: Maybe Int -> ReplacePrimaryChatInviteLink

[chat_id] :: ReplacePrimaryChatInviteLink -> Maybe Int
instance GHC.Classes.Eq TD.Query.ReplacePrimaryChatInviteLink.ReplacePrimaryChatInviteLink
instance GHC.Show.Show TD.Query.ReplacePrimaryChatInviteLink.ReplacePrimaryChatInviteLink
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ReplacePrimaryChatInviteLink.ReplacePrimaryChatInviteLink


module TD.Query.ReorderInstalledStickerSets

-- | Changes the order of installed sticker sets <tt>is_masks Pass true to
--   change the order of mask sticker sets; pass false to change the order
--   of ordinary sticker sets </tt>sticker_set_ids Identifiers of installed
--   sticker sets in the new correct order
data ReorderInstalledStickerSets
ReorderInstalledStickerSets :: Maybe [Int] -> Maybe Bool -> ReorderInstalledStickerSets

[sticker_set_ids] :: ReorderInstalledStickerSets -> Maybe [Int]

[is_masks] :: ReorderInstalledStickerSets -> Maybe Bool
instance GHC.Classes.Eq TD.Query.ReorderInstalledStickerSets.ReorderInstalledStickerSets
instance GHC.Show.Show TD.Query.ReorderInstalledStickerSets.ReorderInstalledStickerSets
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ReorderInstalledStickerSets.ReorderInstalledStickerSets


module TD.Query.ReorderChatFilters

-- | Changes the order of chat filters <tt>chat_filter_ids Identifiers of
--   chat filters in the new correct order </tt>main_chat_list_position
--   Position of the main chat list among chat filters, 0-based. Can be
--   non-zero only for Premium users
data ReorderChatFilters
ReorderChatFilters :: Maybe Int -> Maybe [Int] -> ReorderChatFilters

[main_chat_list_position] :: ReorderChatFilters -> Maybe Int

[chat_filter_ids] :: ReorderChatFilters -> Maybe [Int]
instance GHC.Classes.Eq TD.Query.ReorderChatFilters.ReorderChatFilters
instance GHC.Show.Show TD.Query.ReorderChatFilters.ReorderChatFilters
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ReorderChatFilters.ReorderChatFilters


module TD.Query.RemoveSavedNotificationSound

-- | Removes a notification sound from the list of saved notification
--   sounds @notification_sound_id Identifier of the notification sound
data RemoveSavedNotificationSound
RemoveSavedNotificationSound :: Maybe Int -> RemoveSavedNotificationSound

[notification_sound_id] :: RemoveSavedNotificationSound -> Maybe Int
instance GHC.Classes.Eq TD.Query.RemoveSavedNotificationSound.RemoveSavedNotificationSound
instance GHC.Show.Show TD.Query.RemoveSavedNotificationSound.RemoveSavedNotificationSound
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.RemoveSavedNotificationSound.RemoveSavedNotificationSound


module TD.Query.RemoveRecentlyFoundChat

-- | Removes a chat from the list of recently found chats @chat_id
--   Identifier of the chat to be removed
data RemoveRecentlyFoundChat
RemoveRecentlyFoundChat :: Maybe Int -> RemoveRecentlyFoundChat

[chat_id] :: RemoveRecentlyFoundChat -> Maybe Int
instance GHC.Classes.Eq TD.Query.RemoveRecentlyFoundChat.RemoveRecentlyFoundChat
instance GHC.Show.Show TD.Query.RemoveRecentlyFoundChat.RemoveRecentlyFoundChat
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.RemoveRecentlyFoundChat.RemoveRecentlyFoundChat


module TD.Query.RemoveRecentHashtag

-- | Removes a hashtag from the list of recently used hashtags @hashtag
--   Hashtag to delete
data RemoveRecentHashtag
RemoveRecentHashtag :: Maybe String -> RemoveRecentHashtag

[hashtag] :: RemoveRecentHashtag -> Maybe String
instance GHC.Classes.Eq TD.Query.RemoveRecentHashtag.RemoveRecentHashtag
instance GHC.Show.Show TD.Query.RemoveRecentHashtag.RemoveRecentHashtag
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.RemoveRecentHashtag.RemoveRecentHashtag


module TD.Query.RemoveProxy

-- | Removes a proxy server. Can be called before authorization @proxy_id
--   Proxy identifier
data RemoveProxy
RemoveProxy :: Maybe Int -> RemoveProxy

[proxy_id] :: RemoveProxy -> Maybe Int
instance GHC.Classes.Eq TD.Query.RemoveProxy.RemoveProxy
instance GHC.Show.Show TD.Query.RemoveProxy.RemoveProxy
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.RemoveProxy.RemoveProxy


module TD.Query.RemoveNotificationGroup

-- | Removes a group of active notifications. Needs to be called only if
--   the notification group is removed by the current user
--   <tt>notification_group_id Notification group identifier
--   </tt>max_notification_id The maximum identifier of removed
--   notifications
data RemoveNotificationGroup
RemoveNotificationGroup :: Maybe Int -> Maybe Int -> RemoveNotificationGroup

[max_notification_id] :: RemoveNotificationGroup -> Maybe Int

[notification_group_id] :: RemoveNotificationGroup -> Maybe Int
instance GHC.Classes.Eq TD.Query.RemoveNotificationGroup.RemoveNotificationGroup
instance GHC.Show.Show TD.Query.RemoveNotificationGroup.RemoveNotificationGroup
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.RemoveNotificationGroup.RemoveNotificationGroup


module TD.Query.RemoveNotification

-- | Removes an active notification from notification list. Needs to be
--   called only if the notification is removed by the current user
--   <tt>notification_group_id Identifier of notification group to which
--   the notification belongs </tt>notification_id Identifier of removed
--   notification
data RemoveNotification
RemoveNotification :: Maybe Int -> Maybe Int -> RemoveNotification

[notification_id] :: RemoveNotification -> Maybe Int

[notification_group_id] :: RemoveNotification -> Maybe Int
instance GHC.Classes.Eq TD.Query.RemoveNotification.RemoveNotification
instance GHC.Show.Show TD.Query.RemoveNotification.RemoveNotification
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.RemoveNotification.RemoveNotification


module TD.Query.RemoveFileFromDownloads

-- | Removes a file from the file download list <tt>file_id Identifier of
--   the downloaded file </tt>delete_from_cache Pass true to delete the
--   file from the TDLib file cache
data RemoveFileFromDownloads
RemoveFileFromDownloads :: Maybe Bool -> Maybe Int -> RemoveFileFromDownloads

[delete_from_cache] :: RemoveFileFromDownloads -> Maybe Bool

[file_id] :: RemoveFileFromDownloads -> Maybe Int
instance GHC.Classes.Eq TD.Query.RemoveFileFromDownloads.RemoveFileFromDownloads
instance GHC.Show.Show TD.Query.RemoveFileFromDownloads.RemoveFileFromDownloads
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.RemoveFileFromDownloads.RemoveFileFromDownloads


module TD.Query.RemoveContacts

-- | Removes users from the contact list @user_ids Identifiers of users to
--   be deleted
data RemoveContacts
RemoveContacts :: Maybe [Int] -> RemoveContacts

[user_ids] :: RemoveContacts -> Maybe [Int]
instance GHC.Classes.Eq TD.Query.RemoveContacts.RemoveContacts
instance GHC.Show.Show TD.Query.RemoveContacts.RemoveContacts
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.RemoveContacts.RemoveContacts


module TD.Query.RemoveChatActionBar

-- | Removes a chat action bar without any other action @chat_id Chat
--   identifier
data RemoveChatActionBar
RemoveChatActionBar :: Maybe Int -> RemoveChatActionBar

[chat_id] :: RemoveChatActionBar -> Maybe Int
instance GHC.Classes.Eq TD.Query.RemoveChatActionBar.RemoveChatActionBar
instance GHC.Show.Show TD.Query.RemoveChatActionBar.RemoveChatActionBar
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.RemoveChatActionBar.RemoveChatActionBar


module TD.Query.RemoveBackground

-- | Removes background from the list of installed backgrounds
--   @background_id The background identifier
data RemoveBackground
RemoveBackground :: Maybe Int -> RemoveBackground

[background_id] :: RemoveBackground -> Maybe Int
instance GHC.Classes.Eq TD.Query.RemoveBackground.RemoveBackground
instance GHC.Show.Show TD.Query.RemoveBackground.RemoveBackground
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.RemoveBackground.RemoveBackground


module TD.Query.RemoveAllFilesFromDownloads

-- | Removes all files from the file download list
data RemoveAllFilesFromDownloads
RemoveAllFilesFromDownloads :: Maybe Bool -> Maybe Bool -> Maybe Bool -> RemoveAllFilesFromDownloads

-- | Pass true to delete the file from the TDLib file cache
[delete_from_cache] :: RemoveAllFilesFromDownloads -> Maybe Bool

-- | Pass true to remove only completed downloads
[only_completed] :: RemoveAllFilesFromDownloads -> Maybe Bool

-- | Pass true to remove only active downloads, including paused
[only_active] :: RemoveAllFilesFromDownloads -> Maybe Bool
instance GHC.Classes.Eq TD.Query.RemoveAllFilesFromDownloads.RemoveAllFilesFromDownloads
instance GHC.Show.Show TD.Query.RemoveAllFilesFromDownloads.RemoveAllFilesFromDownloads
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.RemoveAllFilesFromDownloads.RemoveAllFilesFromDownloads


module TD.Query.RegisterUser

-- | Finishes user registration. Works only when the current authorization
--   state is authorizationStateWaitRegistration
data RegisterUser
RegisterUser :: Maybe String -> Maybe String -> RegisterUser

[last_name] :: RegisterUser -> Maybe String

-- | The first name of the user; 1-64 characters @last_name The last name
--   of the user; 0-64 characters
[first_name] :: RegisterUser -> Maybe String
instance GHC.Classes.Eq TD.Query.RegisterUser.RegisterUser
instance GHC.Show.Show TD.Query.RegisterUser.RegisterUser
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.RegisterUser.RegisterUser


module TD.Query.RecoverPassword

-- | Recovers the 2-step verification password using a recovery code sent
--   to an email address that was previously set up
data RecoverPassword
RecoverPassword :: Maybe String -> Maybe String -> Maybe String -> RecoverPassword

[new_hint] :: RecoverPassword -> Maybe String

[new_password] :: RecoverPassword -> Maybe String

-- | Recovery code to check <tt>new_password New password of the user; may
--   be empty to remove the password </tt>new_hint New password hint; may
--   be empty
[recovery_code] :: RecoverPassword -> Maybe String
instance GHC.Classes.Eq TD.Query.RecoverPassword.RecoverPassword
instance GHC.Show.Show TD.Query.RecoverPassword.RecoverPassword
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.RecoverPassword.RecoverPassword


module TD.Query.RecoverAuthenticationPassword

-- | Recovers the password with a password recovery code sent to an email
--   address that was previously set up. Works only when the current
--   authorization state is authorizationStateWaitPassword
data RecoverAuthenticationPassword
RecoverAuthenticationPassword :: Maybe String -> Maybe String -> Maybe String -> RecoverAuthenticationPassword

[new_hint] :: RecoverAuthenticationPassword -> Maybe String

[new_password] :: RecoverAuthenticationPassword -> Maybe String

-- | Recovery code to check <tt>new_password New password of the user; may
--   be empty to remove the password </tt>new_hint New password hint; may
--   be empty
[recovery_code] :: RecoverAuthenticationPassword -> Maybe String
instance GHC.Classes.Eq TD.Query.RecoverAuthenticationPassword.RecoverAuthenticationPassword
instance GHC.Show.Show TD.Query.RecoverAuthenticationPassword.RecoverAuthenticationPassword
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.RecoverAuthenticationPassword.RecoverAuthenticationPassword


module TD.Query.RecognizeSpeech

-- | Recognizes speech in a voice note message. The message must be
--   successfully sent and must not be scheduled. May return an error with
--   a message <a>MSG_VOICE_TOO_LONG</a> if the voice note is too long to
--   be recognized
data RecognizeSpeech
RecognizeSpeech :: Maybe Int -> Maybe Int -> RecognizeSpeech

-- | Identifier of the message
[message_id] :: RecognizeSpeech -> Maybe Int

-- | Identifier of the chat to which the message belongs
[chat_id] :: RecognizeSpeech -> Maybe Int
instance GHC.Classes.Eq TD.Query.RecognizeSpeech.RecognizeSpeech
instance GHC.Show.Show TD.Query.RecognizeSpeech.RecognizeSpeech
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.RecognizeSpeech.RecognizeSpeech


module TD.Query.ReadFilePart

-- | Reads a part of a file from the TDLib file cache and returns read
--   bytes. This method is intended to be used only if the application has
--   no direct access to TDLib's file system, because it is usually slower
--   than a direct read from the file
data ReadFilePart
ReadFilePart :: Maybe Int -> Maybe Int -> Maybe Int -> ReadFilePart

-- | Number of bytes to read. An error will be returned if there are not
--   enough bytes available in the file from the specified position. Pass 0
--   to read all available data from the specified position
[count] :: ReadFilePart -> Maybe Int

-- | The offset from which to read the file
[offset] :: ReadFilePart -> Maybe Int

-- | Identifier of the file. The file must be located in the TDLib file
--   cache
[file_id] :: ReadFilePart -> Maybe Int
instance GHC.Classes.Eq TD.Query.ReadFilePart.ReadFilePart
instance GHC.Show.Show TD.Query.ReadFilePart.ReadFilePart
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ReadFilePart.ReadFilePart


module TD.Query.ReadAllChatReactions

-- | Marks all reactions in a chat as read @chat_id Chat identifier
data ReadAllChatReactions
ReadAllChatReactions :: Maybe Int -> ReadAllChatReactions

[chat_id] :: ReadAllChatReactions -> Maybe Int
instance GHC.Classes.Eq TD.Query.ReadAllChatReactions.ReadAllChatReactions
instance GHC.Show.Show TD.Query.ReadAllChatReactions.ReadAllChatReactions
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ReadAllChatReactions.ReadAllChatReactions


module TD.Query.ReadAllChatMentions

-- | Marks all mentions in a chat as read @chat_id Chat identifier
data ReadAllChatMentions
ReadAllChatMentions :: Maybe Int -> ReadAllChatMentions

[chat_id] :: ReadAllChatMentions -> Maybe Int
instance GHC.Classes.Eq TD.Query.ReadAllChatMentions.ReadAllChatMentions
instance GHC.Show.Show TD.Query.ReadAllChatMentions.ReadAllChatMentions
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ReadAllChatMentions.ReadAllChatMentions


module TD.Query.RateSpeechRecognition

-- | Rates recognized speech in a voice note message <tt>chat_id Identifier
--   of the chat to which the message belongs </tt>message_id Identifier of
--   the message @is_good Pass true if the speech recognition is good
data RateSpeechRecognition
RateSpeechRecognition :: Maybe Bool -> Maybe Int -> Maybe Int -> RateSpeechRecognition

[is_good] :: RateSpeechRecognition -> Maybe Bool

[message_id] :: RateSpeechRecognition -> Maybe Int

[chat_id] :: RateSpeechRecognition -> Maybe Int
instance GHC.Classes.Eq TD.Query.RateSpeechRecognition.RateSpeechRecognition
instance GHC.Show.Show TD.Query.RateSpeechRecognition.RateSpeechRecognition
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.RateSpeechRecognition.RateSpeechRecognition


module TD.Query.ProcessPushNotification

-- | Handles a push notification. Returns error with code 406 if the push
--   notification is not supported and connection to the server is required
--   to fetch new data. Can be called before authorization
data ProcessPushNotification
ProcessPushNotification :: Maybe String -> ProcessPushNotification

-- | JSON-encoded push notification payload with all fields sent by the
--   server, and "google.sent_time" and "google.notification.sound" fields
--   added
[payload] :: ProcessPushNotification -> Maybe String
instance GHC.Classes.Eq TD.Query.ProcessPushNotification.ProcessPushNotification
instance GHC.Show.Show TD.Query.ProcessPushNotification.ProcessPushNotification
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ProcessPushNotification.ProcessPushNotification


module TD.Query.ProcessChatJoinRequests

-- | Handles all pending join requests for a given link in a chat
data ProcessChatJoinRequests
ProcessChatJoinRequests :: Maybe Bool -> Maybe String -> Maybe Int -> ProcessChatJoinRequests

-- | Pass true to approve all requests; pass false to decline them
[approve] :: ProcessChatJoinRequests -> Maybe Bool

-- | Invite link for which to process join requests. If empty, all join
--   requests will be processed. Requires administrator privileges and
--   can_invite_users right in the chat for own links and owner privileges
--   for other links
[invite_link] :: ProcessChatJoinRequests -> Maybe String

-- | Chat identifier
[chat_id] :: ProcessChatJoinRequests -> Maybe Int
instance GHC.Classes.Eq TD.Query.ProcessChatJoinRequests.ProcessChatJoinRequests
instance GHC.Show.Show TD.Query.ProcessChatJoinRequests.ProcessChatJoinRequests
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ProcessChatJoinRequests.ProcessChatJoinRequests


module TD.Query.ProcessChatJoinRequest

-- | Handles a pending join request in a chat <tt>chat_id Chat identifier
--   </tt>user_id Identifier of the user that sent the request @approve
--   Pass true to approve the request; pass false to decline it
data ProcessChatJoinRequest
ProcessChatJoinRequest :: Maybe Bool -> Maybe Int -> Maybe Int -> ProcessChatJoinRequest

[approve] :: ProcessChatJoinRequest -> Maybe Bool

[user_id] :: ProcessChatJoinRequest -> Maybe Int

[chat_id] :: ProcessChatJoinRequest -> Maybe Int
instance GHC.Classes.Eq TD.Query.ProcessChatJoinRequest.ProcessChatJoinRequest
instance GHC.Show.Show TD.Query.ProcessChatJoinRequest.ProcessChatJoinRequest
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ProcessChatJoinRequest.ProcessChatJoinRequest


module TD.Query.PingProxy

-- | Computes time needed to receive a response from a Telegram server
--   through a proxy. Can be called before authorization @proxy_id Proxy
--   identifier. Use 0 to ping a Telegram server without a proxy
data PingProxy
PingProxy :: Maybe Int -> PingProxy

[proxy_id] :: PingProxy -> Maybe Int
instance GHC.Classes.Eq TD.Query.PingProxy.PingProxy
instance GHC.Show.Show TD.Query.PingProxy.PingProxy
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.PingProxy.PingProxy


module TD.Query.PinChatMessage

-- | Pins a message in a chat; requires can_pin_messages rights or
--   can_edit_messages rights in the channel
data PinChatMessage
PinChatMessage :: Maybe Bool -> Maybe Bool -> Maybe Int -> Maybe Int -> PinChatMessage

-- | Pass true to pin the message only for self; private chats only
[only_for_self] :: PinChatMessage -> Maybe Bool

-- | Pass true to disable notification about the pinned message.
--   Notifications are always disabled in channels and private chats
[disable_notification] :: PinChatMessage -> Maybe Bool

-- | Identifier of the new pinned message
[message_id] :: PinChatMessage -> Maybe Int

-- | Identifier of the chat
[chat_id] :: PinChatMessage -> Maybe Int
instance GHC.Classes.Eq TD.Query.PinChatMessage.PinChatMessage
instance GHC.Show.Show TD.Query.PinChatMessage.PinChatMessage
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.PinChatMessage.PinChatMessage


module TD.Query.OpenMessageContent

-- | Informs TDLib that the message content has been opened (e.g., the user
--   has opened a photo, video, document, location or venue, or has
--   listened to an audio file or voice note message). An
--   updateMessageContentOpened update will be generated if something has
--   changed <tt>chat_id Chat identifier of the message </tt>message_id
--   Identifier of the message with the opened content
data OpenMessageContent
OpenMessageContent :: Maybe Int -> Maybe Int -> OpenMessageContent

[message_id] :: OpenMessageContent -> Maybe Int

[chat_id] :: OpenMessageContent -> Maybe Int
instance GHC.Classes.Eq TD.Query.OpenMessageContent.OpenMessageContent
instance GHC.Show.Show TD.Query.OpenMessageContent.OpenMessageContent
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.OpenMessageContent.OpenMessageContent


module TD.Query.OpenChat

-- | Informs TDLib that the chat is opened by the user. Many useful
--   activities depend on the chat being opened or closed (e.g., in
--   supergroups and channels all updates are received only for opened
--   chats) @chat_id Chat identifier
data OpenChat
OpenChat :: Maybe Int -> OpenChat

[chat_id] :: OpenChat -> Maybe Int
instance GHC.Classes.Eq TD.Query.OpenChat.OpenChat
instance GHC.Show.Show TD.Query.OpenChat.OpenChat
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.OpenChat.OpenChat


module TD.Query.LogOut

-- | Closes the TDLib instance after a proper logout. Requires an available
--   network connection. All local data will be destroyed. After the logout
--   completes, updateAuthorizationState with authorizationStateClosed will
--   be sent
data LogOut
LogOut :: LogOut
instance GHC.Classes.Eq TD.Query.LogOut.LogOut
instance GHC.Show.Show TD.Query.LogOut.LogOut
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.LogOut.LogOut


module TD.Query.LoadGroupCallParticipants

-- | Loads more participants of a group call. The loaded participants will
--   be received through updates. Use the field
--   groupCall.loaded_all_participants to check whether all participants
--   have already been loaded
data LoadGroupCallParticipants
LoadGroupCallParticipants :: Maybe Int -> Maybe Int -> LoadGroupCallParticipants

-- | The maximum number of participants to load; up to 100
[limit] :: LoadGroupCallParticipants -> Maybe Int

-- | Group call identifier. The group call must be previously received
--   through getGroupCall and must be joined or being joined
[group_call_id] :: LoadGroupCallParticipants -> Maybe Int
instance GHC.Classes.Eq TD.Query.LoadGroupCallParticipants.LoadGroupCallParticipants
instance GHC.Show.Show TD.Query.LoadGroupCallParticipants.LoadGroupCallParticipants
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.LoadGroupCallParticipants.LoadGroupCallParticipants


module TD.Query.LeaveGroupCall

-- | Leaves a group call @group_call_id Group call identifier
data LeaveGroupCall
LeaveGroupCall :: Maybe Int -> LeaveGroupCall

[group_call_id] :: LeaveGroupCall -> Maybe Int
instance GHC.Classes.Eq TD.Query.LeaveGroupCall.LeaveGroupCall
instance GHC.Show.Show TD.Query.LeaveGroupCall.LeaveGroupCall
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.LeaveGroupCall.LeaveGroupCall


module TD.Query.LeaveChat

-- | Removes the current user from chat members. Private and secret chats
--   can't be left using this method @chat_id Chat identifier
data LeaveChat
LeaveChat :: Maybe Int -> LeaveChat

[chat_id] :: LeaveChat -> Maybe Int
instance GHC.Classes.Eq TD.Query.LeaveChat.LeaveChat
instance GHC.Show.Show TD.Query.LeaveChat.LeaveChat
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.LeaveChat.LeaveChat


module TD.Query.JoinChatByInviteLink

-- | Uses an invite link to add the current user to the chat if possible.
--   May return an error with a message <a>INVITE_REQUEST_SENT</a> if only
--   a join request was created @invite_link Invite link to use
data JoinChatByInviteLink
JoinChatByInviteLink :: Maybe String -> JoinChatByInviteLink

[invite_link] :: JoinChatByInviteLink -> Maybe String
instance GHC.Classes.Eq TD.Query.JoinChatByInviteLink.JoinChatByInviteLink
instance GHC.Show.Show TD.Query.JoinChatByInviteLink.JoinChatByInviteLink
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.JoinChatByInviteLink.JoinChatByInviteLink


module TD.Query.JoinChat

-- | Adds the current user as a new member to a chat. Private and secret
--   chats can't be joined using this method. May return an error with a
--   message <a>INVITE_REQUEST_SENT</a> if only a join request was created
--   @chat_id Chat identifier
data JoinChat
JoinChat :: Maybe Int -> JoinChat

[chat_id] :: JoinChat -> Maybe Int
instance GHC.Classes.Eq TD.Query.JoinChat.JoinChat
instance GHC.Show.Show TD.Query.JoinChat.JoinChat
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.JoinChat.JoinChat


module TD.Query.InviteGroupCallParticipants

-- | Invites users to an active group call. Sends a service message of type
--   messageInviteToGroupCall for video chats
data InviteGroupCallParticipants
InviteGroupCallParticipants :: Maybe [Int] -> Maybe Int -> InviteGroupCallParticipants

[user_ids] :: InviteGroupCallParticipants -> Maybe [Int]

-- | Group call identifier @user_ids User identifiers. At most 10 users can
--   be invited simultaneously
[group_call_id] :: InviteGroupCallParticipants -> Maybe Int
instance GHC.Classes.Eq TD.Query.InviteGroupCallParticipants.InviteGroupCallParticipants
instance GHC.Show.Show TD.Query.InviteGroupCallParticipants.InviteGroupCallParticipants
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.InviteGroupCallParticipants.InviteGroupCallParticipants


module TD.Query.GetWebPageInstantView

-- | Returns an instant view version of a web page if available. Returns a
--   404 error if the web page has no instant view page <tt>url The web
--   page URL </tt>force_full Pass true to get full instant view for the
--   web page
data GetWebPageInstantView
GetWebPageInstantView :: Maybe Bool -> Maybe String -> GetWebPageInstantView

[force_full] :: GetWebPageInstantView -> Maybe Bool

[url] :: GetWebPageInstantView -> Maybe String
instance GHC.Classes.Eq TD.Query.GetWebPageInstantView.GetWebPageInstantView
instance GHC.Show.Show TD.Query.GetWebPageInstantView.GetWebPageInstantView
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetWebPageInstantView.GetWebPageInstantView


module TD.Query.GetVideoChatRtmpUrl

-- | Returns RTMP URL for streaming to the chat; requires creator
--   privileges @chat_id Chat identifier
data GetVideoChatRtmpUrl
GetVideoChatRtmpUrl :: Maybe Int -> GetVideoChatRtmpUrl

[chat_id] :: GetVideoChatRtmpUrl -> Maybe Int
instance GHC.Classes.Eq TD.Query.GetVideoChatRtmpUrl.GetVideoChatRtmpUrl
instance GHC.Show.Show TD.Query.GetVideoChatRtmpUrl.GetVideoChatRtmpUrl
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetVideoChatRtmpUrl.GetVideoChatRtmpUrl


module TD.Query.GetVideoChatAvailableParticipants

-- | Returns list of participant identifiers, on whose behalf a video chat
--   in the chat can be joined @chat_id Chat identifier
data GetVideoChatAvailableParticipants
GetVideoChatAvailableParticipants :: Maybe Int -> GetVideoChatAvailableParticipants

[chat_id] :: GetVideoChatAvailableParticipants -> Maybe Int
instance GHC.Classes.Eq TD.Query.GetVideoChatAvailableParticipants.GetVideoChatAvailableParticipants
instance GHC.Show.Show TD.Query.GetVideoChatAvailableParticipants.GetVideoChatAvailableParticipants
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetVideoChatAvailableParticipants.GetVideoChatAvailableParticipants


module TD.Query.GetUserProfilePhotos

-- | Returns the profile photos of a user. The result of this query may be
--   outdated: some photos might have been deleted already <tt>user_id User
--   identifier </tt>offset The number of photos to skip; must be
--   non-negative @limit The maximum number of photos to be returned; up to
--   100
data GetUserProfilePhotos
GetUserProfilePhotos :: Maybe Int -> Maybe Int -> Maybe Int -> GetUserProfilePhotos

[limit] :: GetUserProfilePhotos -> Maybe Int

[offset] :: GetUserProfilePhotos -> Maybe Int

[user_id] :: GetUserProfilePhotos -> Maybe Int
instance GHC.Classes.Eq TD.Query.GetUserProfilePhotos.GetUserProfilePhotos
instance GHC.Show.Show TD.Query.GetUserProfilePhotos.GetUserProfilePhotos
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetUserProfilePhotos.GetUserProfilePhotos


module TD.Query.GetUserFullInfo

-- | Returns full information about a user by their identifier @user_id
--   User identifier
data GetUserFullInfo
GetUserFullInfo :: Maybe Int -> GetUserFullInfo

[user_id] :: GetUserFullInfo -> Maybe Int
instance GHC.Classes.Eq TD.Query.GetUserFullInfo.GetUserFullInfo
instance GHC.Show.Show TD.Query.GetUserFullInfo.GetUserFullInfo
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetUserFullInfo.GetUserFullInfo


module TD.Query.GetUser

-- | Returns information about a user by their identifier. This is an
--   offline request if the current user is not a bot @user_id User
--   identifier
data GetUser
GetUser :: Maybe Int -> GetUser

[user_id] :: GetUser -> Maybe Int
instance GHC.Classes.Eq TD.Query.GetUser.GetUser
instance GHC.Show.Show TD.Query.GetUser.GetUser
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetUser.GetUser


module TD.Query.GetTrendingStickerSets

-- | Returns a list of trending sticker sets. For optimal performance, the
--   number of returned sticker sets is chosen by TDLib
data GetTrendingStickerSets
GetTrendingStickerSets :: Maybe Int -> Maybe Int -> GetTrendingStickerSets

-- | The maximum number of sticker sets to be returned; up to 100. For
--   optimal performance, the number of returned sticker sets is chosen by
--   TDLib and can be smaller than the specified limit, even if the end of
--   the list has not been reached
[limit] :: GetTrendingStickerSets -> Maybe Int

-- | The offset from which to return the sticker sets; must be non-negative
[offset] :: GetTrendingStickerSets -> Maybe Int
instance GHC.Classes.Eq TD.Query.GetTrendingStickerSets.GetTrendingStickerSets
instance GHC.Show.Show TD.Query.GetTrendingStickerSets.GetTrendingStickerSets
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetTrendingStickerSets.GetTrendingStickerSets


module TD.Query.GetTextEntities

-- | Returns all entities (mentions, hashtags, cashtags, bot commands, bank
--   card numbers, URLs, and email addresses) contained in the text. Can be
--   called synchronously @text The text in which to look for entites
data GetTextEntities
GetTextEntities :: Maybe String -> GetTextEntities

[text] :: GetTextEntities -> Maybe String
instance GHC.Classes.Eq TD.Query.GetTextEntities.GetTextEntities
instance GHC.Show.Show TD.Query.GetTextEntities.GetTextEntities
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetTextEntities.GetTextEntities


module TD.Query.GetTemporaryPasswordState

-- | Returns information about the current temporary password
data GetTemporaryPasswordState
GetTemporaryPasswordState :: GetTemporaryPasswordState
instance GHC.Classes.Eq TD.Query.GetTemporaryPasswordState.GetTemporaryPasswordState
instance GHC.Show.Show TD.Query.GetTemporaryPasswordState.GetTemporaryPasswordState
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetTemporaryPasswordState.GetTemporaryPasswordState


module TD.Query.GetSupportUser

-- | Returns a user that can be contacted to get support
data GetSupportUser
GetSupportUser :: GetSupportUser
instance GHC.Classes.Eq TD.Query.GetSupportUser.GetSupportUser
instance GHC.Show.Show TD.Query.GetSupportUser.GetSupportUser
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetSupportUser.GetSupportUser


module TD.Query.GetSupergroupFullInfo

-- | Returns full information about a supergroup or a channel by its
--   identifier, cached for up to 1 minute @supergroup_id Supergroup or
--   channel identifier
data GetSupergroupFullInfo
GetSupergroupFullInfo :: Maybe Int -> GetSupergroupFullInfo

[supergroup_id] :: GetSupergroupFullInfo -> Maybe Int
instance GHC.Classes.Eq TD.Query.GetSupergroupFullInfo.GetSupergroupFullInfo
instance GHC.Show.Show TD.Query.GetSupergroupFullInfo.GetSupergroupFullInfo
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetSupergroupFullInfo.GetSupergroupFullInfo


module TD.Query.GetSupergroup

-- | Returns information about a supergroup or a channel by its identifier.
--   This is an offline request if the current user is not a bot
--   @supergroup_id Supergroup or channel identifier
data GetSupergroup
GetSupergroup :: Maybe Int -> GetSupergroup

[supergroup_id] :: GetSupergroup -> Maybe Int
instance GHC.Classes.Eq TD.Query.GetSupergroup.GetSupergroup
instance GHC.Show.Show TD.Query.GetSupergroup.GetSupergroup
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetSupergroup.GetSupergroup


module TD.Query.GetSuitableDiscussionChats

-- | Returns a list of basic group and supergroup chats, which can be used
--   as a discussion group for a channel. Returned basic group chats must
--   be first upgraded to supergroups before they can be set as a
--   discussion group. To set a returned supergroup as a discussion group,
--   access to its old messages must be enabled using
--   toggleSupergroupIsAllHistoryAvailable first
data GetSuitableDiscussionChats
GetSuitableDiscussionChats :: GetSuitableDiscussionChats
instance GHC.Classes.Eq TD.Query.GetSuitableDiscussionChats.GetSuitableDiscussionChats
instance GHC.Show.Show TD.Query.GetSuitableDiscussionChats.GetSuitableDiscussionChats
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetSuitableDiscussionChats.GetSuitableDiscussionChats


module TD.Query.GetSuggestedStickerSetName

-- | Returns a suggested name for a new sticker set with a given title
--   @title Sticker set title; 1-64 characters
data GetSuggestedStickerSetName
GetSuggestedStickerSetName :: Maybe String -> GetSuggestedStickerSetName

[title] :: GetSuggestedStickerSetName -> Maybe String
instance GHC.Classes.Eq TD.Query.GetSuggestedStickerSetName.GetSuggestedStickerSetName
instance GHC.Show.Show TD.Query.GetSuggestedStickerSetName.GetSuggestedStickerSetName
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetSuggestedStickerSetName.GetSuggestedStickerSetName


module TD.Query.GetSuggestedFileName

-- | Returns suggested name for saving a file in a given directory
--   <tt>file_id Identifier of the file </tt>directory Directory in which
--   the file is supposed to be saved
data GetSuggestedFileName
GetSuggestedFileName :: Maybe String -> Maybe Int -> GetSuggestedFileName

[directory] :: GetSuggestedFileName -> Maybe String

[file_id] :: GetSuggestedFileName -> Maybe Int
instance GHC.Classes.Eq TD.Query.GetSuggestedFileName.GetSuggestedFileName
instance GHC.Show.Show TD.Query.GetSuggestedFileName.GetSuggestedFileName
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetSuggestedFileName.GetSuggestedFileName


module TD.Query.GetStorageStatisticsFast

-- | Quickly returns approximate storage usage statistics. Can be called
--   before authorization
data GetStorageStatisticsFast
GetStorageStatisticsFast :: GetStorageStatisticsFast
instance GHC.Classes.Eq TD.Query.GetStorageStatisticsFast.GetStorageStatisticsFast
instance GHC.Show.Show TD.Query.GetStorageStatisticsFast.GetStorageStatisticsFast
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetStorageStatisticsFast.GetStorageStatisticsFast


module TD.Query.GetStorageStatistics

-- | Returns storage usage statistics. Can be called before authorization
--   @chat_limit The maximum number of chats with the largest storage usage
--   for which separate statistics need to be returned. All other chats
--   will be grouped in entries with chat_id == 0. If the chat info
--   database is not used, the chat_limit is ignored and is always set to 0
data GetStorageStatistics
GetStorageStatistics :: Maybe Int -> GetStorageStatistics

[chat_limit] :: GetStorageStatistics -> Maybe Int
instance GHC.Classes.Eq TD.Query.GetStorageStatistics.GetStorageStatistics
instance GHC.Show.Show TD.Query.GetStorageStatistics.GetStorageStatistics
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetStorageStatistics.GetStorageStatistics


module TD.Query.GetStickers

-- | Returns stickers from the installed sticker sets that correspond to a
--   given emoji. If the emoji is non-empty, favorite and recently used
--   stickers may also be returned <tt>emoji String representation of
--   emoji. If empty, returns all known installed stickers </tt>limit The
--   maximum number of stickers to be returned
data GetStickers
GetStickers :: Maybe Int -> Maybe String -> GetStickers

[limit] :: GetStickers -> Maybe Int

[emoji] :: GetStickers -> Maybe String
instance GHC.Classes.Eq TD.Query.GetStickers.GetStickers
instance GHC.Show.Show TD.Query.GetStickers.GetStickers
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetStickers.GetStickers


module TD.Query.GetStickerSet

-- | Returns information about a sticker set by its identifier @set_id
--   Identifier of the sticker set
data GetStickerSet
GetStickerSet :: Maybe Int -> GetStickerSet

[set_id] :: GetStickerSet -> Maybe Int
instance GHC.Classes.Eq TD.Query.GetStickerSet.GetStickerSet
instance GHC.Show.Show TD.Query.GetStickerSet.GetStickerSet
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetStickerSet.GetStickerSet


module TD.Query.GetStatisticalGraph

-- | Loads an asynchronous or a zoomed in statistical graph <tt>chat_id
--   Chat identifier </tt>token The token for graph loading @x X-value for
--   zoomed in graph or 0 otherwise
data GetStatisticalGraph
GetStatisticalGraph :: Maybe Int -> Maybe String -> Maybe Int -> GetStatisticalGraph

[x] :: GetStatisticalGraph -> Maybe Int

[token] :: GetStatisticalGraph -> Maybe String

[chat_id] :: GetStatisticalGraph -> Maybe Int
instance GHC.Classes.Eq TD.Query.GetStatisticalGraph.GetStatisticalGraph
instance GHC.Show.Show TD.Query.GetStatisticalGraph.GetStatisticalGraph
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetStatisticalGraph.GetStatisticalGraph


module TD.Query.GetSecretChat

-- | Returns information about a secret chat by its identifier. This is an
--   offline request @secret_chat_id Secret chat identifier
data GetSecretChat
GetSecretChat :: Maybe Int -> GetSecretChat

[secret_chat_id] :: GetSecretChat -> Maybe Int
instance GHC.Classes.Eq TD.Query.GetSecretChat.GetSecretChat
instance GHC.Show.Show TD.Query.GetSecretChat.GetSecretChat
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetSecretChat.GetSecretChat


module TD.Query.GetSavedOrderInfo

-- | Returns saved order information. Returns a 404 error if there is no
--   saved order information
data GetSavedOrderInfo
GetSavedOrderInfo :: GetSavedOrderInfo
instance GHC.Classes.Eq TD.Query.GetSavedOrderInfo.GetSavedOrderInfo
instance GHC.Show.Show TD.Query.GetSavedOrderInfo.GetSavedOrderInfo
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetSavedOrderInfo.GetSavedOrderInfo


module TD.Query.GetSavedNotificationSounds

-- | Returns list of saved notification sounds. If a sound isn't in the
--   list, then default sound needs to be used
data GetSavedNotificationSounds
GetSavedNotificationSounds :: GetSavedNotificationSounds
instance GHC.Classes.Eq TD.Query.GetSavedNotificationSounds.GetSavedNotificationSounds
instance GHC.Show.Show TD.Query.GetSavedNotificationSounds.GetSavedNotificationSounds
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetSavedNotificationSounds.GetSavedNotificationSounds


module TD.Query.GetSavedNotificationSound

-- | Returns saved notification sound by its identifier. Returns a 404
--   error if there is no saved notification sound with the specified
--   identifier @notification_sound_id Identifier of the notification sound
data GetSavedNotificationSound
GetSavedNotificationSound :: Maybe Int -> GetSavedNotificationSound

[notification_sound_id] :: GetSavedNotificationSound -> Maybe Int
instance GHC.Classes.Eq TD.Query.GetSavedNotificationSound.GetSavedNotificationSound
instance GHC.Show.Show TD.Query.GetSavedNotificationSound.GetSavedNotificationSound
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetSavedNotificationSound.GetSavedNotificationSound


module TD.Query.GetSavedAnimations

-- | Returns saved animations
data GetSavedAnimations
GetSavedAnimations :: GetSavedAnimations
instance GHC.Classes.Eq TD.Query.GetSavedAnimations.GetSavedAnimations
instance GHC.Show.Show TD.Query.GetSavedAnimations.GetSavedAnimations
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetSavedAnimations.GetSavedAnimations


module TD.Query.GetRepliedMessage

-- | Returns information about a message that is replied by a given
--   message. Also returns the pinned message, the game message, and the
--   invoice message for messages of the types messagePinMessage,
--   messageGameScore, and messagePaymentSuccessful respectively
data GetRepliedMessage
GetRepliedMessage :: Maybe Int -> Maybe Int -> GetRepliedMessage

[message_id] :: GetRepliedMessage -> Maybe Int

-- | Identifier of the chat the message belongs to @message_id Identifier
--   of the reply message
[chat_id] :: GetRepliedMessage -> Maybe Int
instance GHC.Classes.Eq TD.Query.GetRepliedMessage.GetRepliedMessage
instance GHC.Show.Show TD.Query.GetRepliedMessage.GetRepliedMessage
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetRepliedMessage.GetRepliedMessage


module TD.Query.GetRecoveryEmailAddress

-- | Returns a 2-step verification recovery email address that was
--   previously set up. This method can be used to verify a password
--   provided by the user @password The password for the current user
data GetRecoveryEmailAddress
GetRecoveryEmailAddress :: Maybe String -> GetRecoveryEmailAddress

[password] :: GetRecoveryEmailAddress -> Maybe String
instance GHC.Classes.Eq TD.Query.GetRecoveryEmailAddress.GetRecoveryEmailAddress
instance GHC.Show.Show TD.Query.GetRecoveryEmailAddress.GetRecoveryEmailAddress
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetRecoveryEmailAddress.GetRecoveryEmailAddress


module TD.Query.GetRecommendedChatFilters

-- | Returns recommended chat filters for the current user
data GetRecommendedChatFilters
GetRecommendedChatFilters :: GetRecommendedChatFilters
instance GHC.Classes.Eq TD.Query.GetRecommendedChatFilters.GetRecommendedChatFilters
instance GHC.Show.Show TD.Query.GetRecommendedChatFilters.GetRecommendedChatFilters
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetRecommendedChatFilters.GetRecommendedChatFilters


module TD.Query.GetRecentlyVisitedTMeUrls

-- | Returns t.me URLs recently visited by a newly registered user
--   @referrer Google Play referrer to identify the user
data GetRecentlyVisitedTMeUrls
GetRecentlyVisitedTMeUrls :: Maybe String -> GetRecentlyVisitedTMeUrls

[referrer] :: GetRecentlyVisitedTMeUrls -> Maybe String
instance GHC.Classes.Eq TD.Query.GetRecentlyVisitedTMeUrls.GetRecentlyVisitedTMeUrls
instance GHC.Show.Show TD.Query.GetRecentlyVisitedTMeUrls.GetRecentlyVisitedTMeUrls
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetRecentlyVisitedTMeUrls.GetRecentlyVisitedTMeUrls


module TD.Query.GetRecentlyOpenedChats

-- | Returns recently opened chats, this is an offline request. Returns
--   chats in the order of last opening @limit The maximum number of chats
--   to be returned
data GetRecentlyOpenedChats
GetRecentlyOpenedChats :: Maybe Int -> GetRecentlyOpenedChats

[limit] :: GetRecentlyOpenedChats -> Maybe Int
instance GHC.Classes.Eq TD.Query.GetRecentlyOpenedChats.GetRecentlyOpenedChats
instance GHC.Show.Show TD.Query.GetRecentlyOpenedChats.GetRecentlyOpenedChats
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetRecentlyOpenedChats.GetRecentlyOpenedChats


module TD.Query.GetRecentStickers

-- | Returns a list of recently used stickers @is_attached Pass true to
--   return stickers and masks that were recently attached to photos or
--   video files; pass false to return recently sent stickers
data GetRecentStickers
GetRecentStickers :: Maybe Bool -> GetRecentStickers

[is_attached] :: GetRecentStickers -> Maybe Bool
instance GHC.Classes.Eq TD.Query.GetRecentStickers.GetRecentStickers
instance GHC.Show.Show TD.Query.GetRecentStickers.GetRecentStickers
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetRecentStickers.GetRecentStickers


module TD.Query.GetRecentInlineBots

-- | Returns up to 20 recently used inline bots in the order of their last
--   usage
data GetRecentInlineBots
GetRecentInlineBots :: GetRecentInlineBots
instance GHC.Classes.Eq TD.Query.GetRecentInlineBots.GetRecentInlineBots
instance GHC.Show.Show TD.Query.GetRecentInlineBots.GetRecentInlineBots
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetRecentInlineBots.GetRecentInlineBots


module TD.Query.GetPushReceiverId

-- | Returns a globally unique push notification subscription identifier
--   for identification of an account, which has received a push
--   notification. Can be called synchronously @payload JSON-encoded push
--   notification payload
data GetPushReceiverId
GetPushReceiverId :: Maybe String -> GetPushReceiverId

[payload] :: GetPushReceiverId -> Maybe String
instance GHC.Classes.Eq TD.Query.GetPushReceiverId.GetPushReceiverId
instance GHC.Show.Show TD.Query.GetPushReceiverId.GetPushReceiverId
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetPushReceiverId.GetPushReceiverId


module TD.Query.GetProxyLink

-- | Returns an HTTPS link, which can be used to add a proxy. Available
--   only for SOCKS5 and MTProto proxies. Can be called before
--   authorization @proxy_id Proxy identifier
data GetProxyLink
GetProxyLink :: Maybe Int -> GetProxyLink

[proxy_id] :: GetProxyLink -> Maybe Int
instance GHC.Classes.Eq TD.Query.GetProxyLink.GetProxyLink
instance GHC.Show.Show TD.Query.GetProxyLink.GetProxyLink
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetProxyLink.GetProxyLink


module TD.Query.GetProxies

-- | Returns list of proxies that are currently set up. Can be called
--   before authorization
data GetProxies
GetProxies :: GetProxies
instance GHC.Classes.Eq TD.Query.GetProxies.GetProxies
instance GHC.Show.Show TD.Query.GetProxies.GetProxies
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetProxies.GetProxies


module TD.Query.GetPremiumStickers

-- | Returns examples of premium stickers for demonstration purposes
data GetPremiumStickers
GetPremiumStickers :: GetPremiumStickers
instance GHC.Classes.Eq TD.Query.GetPremiumStickers.GetPremiumStickers
instance GHC.Show.Show TD.Query.GetPremiumStickers.GetPremiumStickers
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetPremiumStickers.GetPremiumStickers


module TD.Query.GetPremiumState

-- | Returns state of Telegram Premium subscription and promotion videos
--   for Premium features
data GetPremiumState
GetPremiumState :: GetPremiumState
instance GHC.Classes.Eq TD.Query.GetPremiumState.GetPremiumState
instance GHC.Show.Show TD.Query.GetPremiumState.GetPremiumState
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetPremiumState.GetPremiumState


module TD.Query.GetPreferredCountryLanguage

-- | Returns an IETF language tag of the language preferred in the country,
--   which must be used to fill native fields in Telegram Passport personal
--   details. Returns a 404 error if unknown @country_code A two-letter ISO
--   3166-1 alpha-2 country code
data GetPreferredCountryLanguage
GetPreferredCountryLanguage :: Maybe String -> GetPreferredCountryLanguage

[country_code] :: GetPreferredCountryLanguage -> Maybe String
instance GHC.Classes.Eq TD.Query.GetPreferredCountryLanguage.GetPreferredCountryLanguage
instance GHC.Show.Show TD.Query.GetPreferredCountryLanguage.GetPreferredCountryLanguage
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetPreferredCountryLanguage.GetPreferredCountryLanguage


module TD.Query.GetPollVoters

-- | Returns users voted for the specified option in a non-anonymous polls.
--   For optimal performance, the number of returned users is chosen by
--   TDLib
data GetPollVoters
GetPollVoters :: Maybe Int -> Maybe Int -> Maybe Int -> Maybe Int -> Maybe Int -> GetPollVoters

-- | The maximum number of users to be returned; must be positive and can't
--   be greater than 50. For optimal performance, the number of returned
--   users is chosen by TDLib and can be smaller than the specified limit,
--   even if the end of the voter list has not been reached
[limit] :: GetPollVoters -> Maybe Int

-- | Number of users to skip in the result; must be non-negative
[offset] :: GetPollVoters -> Maybe Int

-- | 0-based identifier of the answer option
[option_id] :: GetPollVoters -> Maybe Int

-- | Identifier of the message containing the poll
[message_id] :: GetPollVoters -> Maybe Int

-- | Identifier of the chat to which the poll belongs
[chat_id] :: GetPollVoters -> Maybe Int
instance GHC.Classes.Eq TD.Query.GetPollVoters.GetPollVoters
instance GHC.Show.Show TD.Query.GetPollVoters.GetPollVoters
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetPollVoters.GetPollVoters


module TD.Query.GetPhoneNumberInfoSync

-- | Returns information about a phone number by its prefix synchronously.
--   getCountries must be called at least once after changing localization
--   to the specified language if properly localized country information is
--   expected. Can be called synchronously
data GetPhoneNumberInfoSync
GetPhoneNumberInfoSync :: Maybe String -> Maybe String -> GetPhoneNumberInfoSync

[phone_number_prefix] :: GetPhoneNumberInfoSync -> Maybe String

-- | A two-letter ISO 639-1 language code for country information
--   localization @phone_number_prefix The phone number prefix
[language_code] :: GetPhoneNumberInfoSync -> Maybe String
instance GHC.Classes.Eq TD.Query.GetPhoneNumberInfoSync.GetPhoneNumberInfoSync
instance GHC.Show.Show TD.Query.GetPhoneNumberInfoSync.GetPhoneNumberInfoSync
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetPhoneNumberInfoSync.GetPhoneNumberInfoSync


module TD.Query.GetPhoneNumberInfo

-- | Returns information about a phone number by its prefix. Can be called
--   before authorization @phone_number_prefix The phone number prefix
data GetPhoneNumberInfo
GetPhoneNumberInfo :: Maybe String -> GetPhoneNumberInfo

[phone_number_prefix] :: GetPhoneNumberInfo -> Maybe String
instance GHC.Classes.Eq TD.Query.GetPhoneNumberInfo.GetPhoneNumberInfo
instance GHC.Show.Show TD.Query.GetPhoneNumberInfo.GetPhoneNumberInfo
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetPhoneNumberInfo.GetPhoneNumberInfo


module TD.Query.GetPaymentReceipt

-- | Returns information about a successful payment <tt>chat_id Chat
--   identifier of the PaymentSuccessful message </tt>message_id Message
--   identifier
data GetPaymentReceipt
GetPaymentReceipt :: Maybe Int -> Maybe Int -> GetPaymentReceipt

[message_id] :: GetPaymentReceipt -> Maybe Int

[chat_id] :: GetPaymentReceipt -> Maybe Int
instance GHC.Classes.Eq TD.Query.GetPaymentReceipt.GetPaymentReceipt
instance GHC.Show.Show TD.Query.GetPaymentReceipt.GetPaymentReceipt
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetPaymentReceipt.GetPaymentReceipt


module TD.Query.GetPasswordState

-- | Returns the current state of 2-step verification
data GetPasswordState
GetPasswordState :: GetPasswordState
instance GHC.Classes.Eq TD.Query.GetPasswordState.GetPasswordState
instance GHC.Show.Show TD.Query.GetPasswordState.GetPasswordState
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetPasswordState.GetPasswordState


module TD.Query.GetPassportAuthorizationFormAvailableElements

-- | Returns already available Telegram Passport elements suitable for
--   completing a Telegram Passport authorization form. Result can be
--   received only once for each authorization form
--   <tt>autorization_form_id Authorization form identifier </tt>password
--   Password of the current user
data GetPassportAuthorizationFormAvailableElements
GetPassportAuthorizationFormAvailableElements :: Maybe String -> Maybe Int -> GetPassportAuthorizationFormAvailableElements

[password] :: GetPassportAuthorizationFormAvailableElements -> Maybe String

[autorization_form_id] :: GetPassportAuthorizationFormAvailableElements -> Maybe Int
instance GHC.Classes.Eq TD.Query.GetPassportAuthorizationFormAvailableElements.GetPassportAuthorizationFormAvailableElements
instance GHC.Show.Show TD.Query.GetPassportAuthorizationFormAvailableElements.GetPassportAuthorizationFormAvailableElements
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetPassportAuthorizationFormAvailableElements.GetPassportAuthorizationFormAvailableElements


module TD.Query.GetPassportAuthorizationForm

-- | Returns a Telegram Passport authorization form for sharing data with a
--   service <tt>bot_user_id User identifier of the service's bot
--   </tt>scope Telegram Passport element types requested by the service
--   <tt>public_key Service's public key </tt>nonce Unique request
--   identifier provided by the service
data GetPassportAuthorizationForm
GetPassportAuthorizationForm :: Maybe String -> Maybe String -> Maybe String -> Maybe Int -> GetPassportAuthorizationForm

[nonce] :: GetPassportAuthorizationForm -> Maybe String

[public_key] :: GetPassportAuthorizationForm -> Maybe String

[scope] :: GetPassportAuthorizationForm -> Maybe String

[bot_user_id] :: GetPassportAuthorizationForm -> Maybe Int
instance GHC.Classes.Eq TD.Query.GetPassportAuthorizationForm.GetPassportAuthorizationForm
instance GHC.Show.Show TD.Query.GetPassportAuthorizationForm.GetPassportAuthorizationForm
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetPassportAuthorizationForm.GetPassportAuthorizationForm


module TD.Query.GetOption

-- | Returns the value of an option by its name. (Check the list of
--   available options on <a>https://core.telegram.org/tdlib/options.)</a>
--   Can be called before authorization. Can be called synchronously for
--   options "version" and "commit_hash"
data GetOption
GetOption :: Maybe String -> GetOption

-- | The name of the option
[name] :: GetOption -> Maybe String
instance GHC.Classes.Eq TD.Query.GetOption.GetOption
instance GHC.Show.Show TD.Query.GetOption.GetOption
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetOption.GetOption


module TD.Query.GetNetworkStatistics

-- | Returns network data usage statistics. Can be called before
--   authorization @only_current Pass true to get statistics only for the
--   current library launch
data GetNetworkStatistics
GetNetworkStatistics :: Maybe Bool -> GetNetworkStatistics

[only_current] :: GetNetworkStatistics -> Maybe Bool
instance GHC.Classes.Eq TD.Query.GetNetworkStatistics.GetNetworkStatistics
instance GHC.Show.Show TD.Query.GetNetworkStatistics.GetNetworkStatistics
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetNetworkStatistics.GetNetworkStatistics


module TD.Query.GetMessages

-- | Returns information about messages. If a message is not found, returns
--   null on the corresponding position of the result <tt>chat_id
--   Identifier of the chat the messages belong to </tt>message_ids
--   Identifiers of the messages to get
data GetMessages
GetMessages :: Maybe [Int] -> Maybe Int -> GetMessages

[message_ids] :: GetMessages -> Maybe [Int]

[chat_id] :: GetMessages -> Maybe Int
instance GHC.Classes.Eq TD.Query.GetMessages.GetMessages
instance GHC.Show.Show TD.Query.GetMessages.GetMessages
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetMessages.GetMessages


module TD.Query.GetMessageViewers

-- | Returns viewers of a recent outgoing message in a basic group or a
--   supergroup chat. For video notes and voice notes only users, opened
--   content of the message, are returned. The method can be called if
--   message.can_get_viewers == true <tt>chat_id Chat identifier
--   </tt>message_id Identifier of the message
data GetMessageViewers
GetMessageViewers :: Maybe Int -> Maybe Int -> GetMessageViewers

[message_id] :: GetMessageViewers -> Maybe Int

[chat_id] :: GetMessageViewers -> Maybe Int
instance GHC.Classes.Eq TD.Query.GetMessageViewers.GetMessageViewers
instance GHC.Show.Show TD.Query.GetMessageViewers.GetMessageViewers
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetMessageViewers.GetMessageViewers


module TD.Query.GetMessageThreadHistory

-- | Returns messages in a message thread of a message. Can be used only if
--   message.can_get_message_thread == true. Message thread of a channel
--   message is in the channel's linked supergroup. The messages are
--   returned in a reverse chronological order (i.e., in order of
--   decreasing message_id). For optimal performance, the number of
--   returned messages is chosen by TDLib
data GetMessageThreadHistory
GetMessageThreadHistory :: Maybe Int -> Maybe Int -> Maybe Int -> Maybe Int -> Maybe Int -> GetMessageThreadHistory

-- | The maximum number of messages to be returned; must be positive and
--   can't be greater than 100. If the offset is negative, the limit must
--   be greater than or equal to -offset. For optimal performance, the
--   number of returned messages is chosen by TDLib and can be smaller than
--   the specified limit
[limit] :: GetMessageThreadHistory -> Maybe Int

-- | Specify 0 to get results from exactly the from_message_id or a
--   negative offset up to 99 to get additionally some newer messages
[offset] :: GetMessageThreadHistory -> Maybe Int

-- | Identifier of the message starting from which history must be fetched;
--   use 0 to get results from the last message
[from_message_id] :: GetMessageThreadHistory -> Maybe Int

-- | Message identifier, which thread history needs to be returned
[message_id] :: GetMessageThreadHistory -> Maybe Int

-- | Chat identifier
[chat_id] :: GetMessageThreadHistory -> Maybe Int
instance GHC.Classes.Eq TD.Query.GetMessageThreadHistory.GetMessageThreadHistory
instance GHC.Show.Show TD.Query.GetMessageThreadHistory.GetMessageThreadHistory
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetMessageThreadHistory.GetMessageThreadHistory


module TD.Query.GetMessageThread

-- | Returns information about a message thread. Can be used only if
--   message.can_get_message_thread == true <tt>chat_id Chat identifier
--   </tt>message_id Identifier of the message
data GetMessageThread
GetMessageThread :: Maybe Int -> Maybe Int -> GetMessageThread

[message_id] :: GetMessageThread -> Maybe Int

[chat_id] :: GetMessageThread -> Maybe Int
instance GHC.Classes.Eq TD.Query.GetMessageThread.GetMessageThread
instance GHC.Show.Show TD.Query.GetMessageThread.GetMessageThread
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetMessageThread.GetMessageThread


module TD.Query.GetMessageStatistics

-- | Returns detailed statistics about a message. Can be used only if
--   message.can_get_statistics == true <tt>chat_id Chat identifier
--   </tt>message_id Message identifier @is_dark Pass true if a dark theme
--   is used by the application
data GetMessageStatistics
GetMessageStatistics :: Maybe Bool -> Maybe Int -> Maybe Int -> GetMessageStatistics

[is_dark] :: GetMessageStatistics -> Maybe Bool

[message_id] :: GetMessageStatistics -> Maybe Int

[chat_id] :: GetMessageStatistics -> Maybe Int
instance GHC.Classes.Eq TD.Query.GetMessageStatistics.GetMessageStatistics
instance GHC.Show.Show TD.Query.GetMessageStatistics.GetMessageStatistics
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetMessageStatistics.GetMessageStatistics


module TD.Query.GetMessagePublicForwards

-- | Returns forwarded copies of a channel message to different public
--   channels. For optimal performance, the number of returned messages is
--   chosen by TDLib
data GetMessagePublicForwards
GetMessagePublicForwards :: Maybe Int -> Maybe String -> Maybe Int -> Maybe Int -> GetMessagePublicForwards

-- | The maximum number of messages to be returned; must be positive and
--   can't be greater than 100. For optimal performance, the number of
--   returned messages is chosen by TDLib and can be smaller than the
--   specified limit
[limit] :: GetMessagePublicForwards -> Maybe Int

-- | Offset of the first entry to return as received from the previous
--   request; use empty string to get the first chunk of results
[offset] :: GetMessagePublicForwards -> Maybe String

-- | Message identifier
[message_id] :: GetMessagePublicForwards -> Maybe Int

-- | Chat identifier of the message
[chat_id] :: GetMessagePublicForwards -> Maybe Int
instance GHC.Classes.Eq TD.Query.GetMessagePublicForwards.GetMessagePublicForwards
instance GHC.Show.Show TD.Query.GetMessagePublicForwards.GetMessagePublicForwards
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetMessagePublicForwards.GetMessagePublicForwards


module TD.Query.GetMessageLocally

-- | Returns information about a message, if it is available without
--   sending network request. This is an offline request <tt>chat_id
--   Identifier of the chat the message belongs to </tt>message_id
--   Identifier of the message to get
data GetMessageLocally
GetMessageLocally :: Maybe Int -> Maybe Int -> GetMessageLocally

[message_id] :: GetMessageLocally -> Maybe Int

[chat_id] :: GetMessageLocally -> Maybe Int
instance GHC.Classes.Eq TD.Query.GetMessageLocally.GetMessageLocally
instance GHC.Show.Show TD.Query.GetMessageLocally.GetMessageLocally
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetMessageLocally.GetMessageLocally


module TD.Query.GetMessageLinkInfo

-- | Returns information about a public or private message link. Can be
--   called for any internal link of the type internalLinkTypeMessage @url
--   The message link
data GetMessageLinkInfo
GetMessageLinkInfo :: Maybe String -> GetMessageLinkInfo

[url] :: GetMessageLinkInfo -> Maybe String
instance GHC.Classes.Eq TD.Query.GetMessageLinkInfo.GetMessageLinkInfo
instance GHC.Show.Show TD.Query.GetMessageLinkInfo.GetMessageLinkInfo
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetMessageLinkInfo.GetMessageLinkInfo


module TD.Query.GetMessageLink

-- | Returns an HTTPS link to a message in a chat. Available only for
--   already sent messages in supergroups and channels, or if
--   message.can_get_media_timestamp_links and a media timestamp link is
--   generated. This is an offline request
data GetMessageLink
GetMessageLink :: Maybe Bool -> Maybe Bool -> Maybe Int -> Maybe Int -> Maybe Int -> GetMessageLink

-- | Pass true to create a link to the message as a channel post comment,
--   or from a message thread
[for_comment] :: GetMessageLink -> Maybe Bool

-- | Pass true to create a link for the whole media album
[for_album] :: GetMessageLink -> Maybe Bool

-- | If not 0, timestamp from which the video<i>audio</i>video note/voice
--   note playing must start, in seconds. The media can be in the message
--   content or in its web page preview
[media_timestamp] :: GetMessageLink -> Maybe Int

-- | Identifier of the message
[message_id] :: GetMessageLink -> Maybe Int

-- | Identifier of the chat to which the message belongs
[chat_id] :: GetMessageLink -> Maybe Int
instance GHC.Classes.Eq TD.Query.GetMessageLink.GetMessageLink
instance GHC.Show.Show TD.Query.GetMessageLink.GetMessageLink
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetMessageLink.GetMessageLink


module TD.Query.GetMessageImportConfirmationText

-- | Returns a confirmation text to be shown to the user before starting
--   message import
data GetMessageImportConfirmationText
GetMessageImportConfirmationText :: Maybe Int -> GetMessageImportConfirmationText

-- | Identifier of a chat to which the messages will be imported. It must
--   be an identifier of a private chat with a mutual contact or an
--   identifier of a supergroup chat with can_change_info administrator
--   right
[chat_id] :: GetMessageImportConfirmationText -> Maybe Int
instance GHC.Classes.Eq TD.Query.GetMessageImportConfirmationText.GetMessageImportConfirmationText
instance GHC.Show.Show TD.Query.GetMessageImportConfirmationText.GetMessageImportConfirmationText
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetMessageImportConfirmationText.GetMessageImportConfirmationText


module TD.Query.GetMessageFileType

-- | Returns information about a file with messages exported from another
--   application @message_file_head Beginning of the message file; up to
--   100 first lines
data GetMessageFileType
GetMessageFileType :: Maybe String -> GetMessageFileType

[message_file_head] :: GetMessageFileType -> Maybe String
instance GHC.Classes.Eq TD.Query.GetMessageFileType.GetMessageFileType
instance GHC.Show.Show TD.Query.GetMessageFileType.GetMessageFileType
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetMessageFileType.GetMessageFileType


module TD.Query.GetMessageEmbeddingCode

-- | Returns an HTML code for embedding the message. Available only for
--   messages in supergroups and channels with a username
data GetMessageEmbeddingCode
GetMessageEmbeddingCode :: Maybe Bool -> Maybe Int -> Maybe Int -> GetMessageEmbeddingCode

-- | Pass true to return an HTML code for embedding of the whole media
--   album
[for_album] :: GetMessageEmbeddingCode -> Maybe Bool

-- | Identifier of the message
[message_id] :: GetMessageEmbeddingCode -> Maybe Int

-- | Identifier of the chat to which the message belongs
[chat_id] :: GetMessageEmbeddingCode -> Maybe Int
instance GHC.Classes.Eq TD.Query.GetMessageEmbeddingCode.GetMessageEmbeddingCode
instance GHC.Show.Show TD.Query.GetMessageEmbeddingCode.GetMessageEmbeddingCode
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetMessageEmbeddingCode.GetMessageEmbeddingCode


module TD.Query.GetMessageAvailableReactions

-- | Returns reactions, which can be added to a message. The list can
--   change after updateReactions, updateChatAvailableReactions for the
--   chat, or updateMessageInteractionInfo for the message. The method will
--   return Premium reactions, even the current user has no Premium
--   subscription
data GetMessageAvailableReactions
GetMessageAvailableReactions :: Maybe Int -> Maybe Int -> GetMessageAvailableReactions

-- | Identifier of the message
[message_id] :: GetMessageAvailableReactions -> Maybe Int

-- | Identifier of the chat to which the message belongs
[chat_id] :: GetMessageAvailableReactions -> Maybe Int
instance GHC.Classes.Eq TD.Query.GetMessageAvailableReactions.GetMessageAvailableReactions
instance GHC.Show.Show TD.Query.GetMessageAvailableReactions.GetMessageAvailableReactions
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetMessageAvailableReactions.GetMessageAvailableReactions


module TD.Query.GetMessageAddedReactions

-- | Returns reactions added for a message, along with their sender
data GetMessageAddedReactions
GetMessageAddedReactions :: Maybe Int -> Maybe String -> Maybe String -> Maybe Int -> Maybe Int -> GetMessageAddedReactions

-- | The maximum number of reactions to be returned; must be positive and
--   can't be greater than 100
[limit] :: GetMessageAddedReactions -> Maybe Int

-- | Offset of the first entry to return as received from the previous
--   request; use empty string to get the first chunk of results
[offset] :: GetMessageAddedReactions -> Maybe String

-- | If non-empty, only added reactions with the specified text
--   representation will be returned
[reaction] :: GetMessageAddedReactions -> Maybe String

-- | Identifier of the message
[message_id] :: GetMessageAddedReactions -> Maybe Int

-- | Identifier of the chat to which the message belongs
[chat_id] :: GetMessageAddedReactions -> Maybe Int
instance GHC.Classes.Eq TD.Query.GetMessageAddedReactions.GetMessageAddedReactions
instance GHC.Show.Show TD.Query.GetMessageAddedReactions.GetMessageAddedReactions
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetMessageAddedReactions.GetMessageAddedReactions


module TD.Query.GetMessage

-- | Returns information about a message <tt>chat_id Identifier of the chat
--   the message belongs to </tt>message_id Identifier of the message to
--   get
data GetMessage
GetMessage :: Maybe Int -> Maybe Int -> GetMessage

[message_id] :: GetMessage -> Maybe Int

[chat_id] :: GetMessage -> Maybe Int
instance GHC.Classes.Eq TD.Query.GetMessage.GetMessage
instance GHC.Show.Show TD.Query.GetMessage.GetMessage
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetMessage.GetMessage


module TD.Query.GetMenuButton

-- | Returns menu button set by the bot for the given user; for bots only
--   @user_id Identifier of the user or 0 to get the default menu button
data GetMenuButton
GetMenuButton :: Maybe Int -> GetMenuButton

[user_id] :: GetMenuButton -> Maybe Int
instance GHC.Classes.Eq TD.Query.GetMenuButton.GetMenuButton
instance GHC.Show.Show TD.Query.GetMenuButton.GetMenuButton
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetMenuButton.GetMenuButton


module TD.Query.GetMe

-- | Returns the current user
data GetMe
GetMe :: GetMe
instance GHC.Classes.Eq TD.Query.GetMe.GetMe
instance GHC.Show.Show TD.Query.GetMe.GetMe
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetMe.GetMe


module TD.Query.GetLoginUrlInfo

-- | Returns information about a button of type
--   inlineKeyboardButtonTypeLoginUrl. The method needs to be called when
--   the user presses the button
data GetLoginUrlInfo
GetLoginUrlInfo :: Maybe Int -> Maybe Int -> Maybe Int -> GetLoginUrlInfo

[button_id] :: GetLoginUrlInfo -> Maybe Int

[message_id] :: GetLoginUrlInfo -> Maybe Int

-- | Chat identifier of the message with the button <tt>message_id Message
--   identifier of the message with the button </tt>button_id Button
--   identifier
[chat_id] :: GetLoginUrlInfo -> Maybe Int
instance GHC.Classes.Eq TD.Query.GetLoginUrlInfo.GetLoginUrlInfo
instance GHC.Show.Show TD.Query.GetLoginUrlInfo.GetLoginUrlInfo
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetLoginUrlInfo.GetLoginUrlInfo


module TD.Query.GetLoginUrl

-- | Returns an HTTP URL which can be used to automatically authorize the
--   user on a website after clicking an inline button of type
--   inlineKeyboardButtonTypeLoginUrl. Use the method getLoginUrlInfo to
--   find whether a prior user confirmation is needed. If an error is
--   returned, then the button must be handled as an ordinary URL button
data GetLoginUrl
GetLoginUrl :: Maybe Bool -> Maybe Int -> Maybe Int -> Maybe Int -> GetLoginUrl

-- | Pass true to allow the bot to send messages to the current user
[allow_write_access] :: GetLoginUrl -> Maybe Bool

[button_id] :: GetLoginUrl -> Maybe Int

[message_id] :: GetLoginUrl -> Maybe Int

-- | Chat identifier of the message with the button <tt>message_id Message
--   identifier of the message with the button </tt>button_id Button
--   identifier
[chat_id] :: GetLoginUrl -> Maybe Int
instance GHC.Classes.Eq TD.Query.GetLoginUrl.GetLoginUrl
instance GHC.Show.Show TD.Query.GetLoginUrl.GetLoginUrl
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetLoginUrl.GetLoginUrl


module TD.Query.GetLogVerbosityLevel

-- | Returns current verbosity level of the internal logging of TDLib. Can
--   be called synchronously
data GetLogVerbosityLevel
GetLogVerbosityLevel :: GetLogVerbosityLevel
instance GHC.Classes.Eq TD.Query.GetLogVerbosityLevel.GetLogVerbosityLevel
instance GHC.Show.Show TD.Query.GetLogVerbosityLevel.GetLogVerbosityLevel
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetLogVerbosityLevel.GetLogVerbosityLevel


module TD.Query.GetLogTags

-- | Returns list of available TDLib internal log tags, for example,
--   ["actor", "binlog", "connections", "notifications", "proxy"]. Can be
--   called synchronously
data GetLogTags
GetLogTags :: GetLogTags
instance GHC.Classes.Eq TD.Query.GetLogTags.GetLogTags
instance GHC.Show.Show TD.Query.GetLogTags.GetLogTags
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetLogTags.GetLogTags


module TD.Query.GetLogTagVerbosityLevel

-- | Returns current verbosity level for a specified TDLib internal log
--   tag. Can be called synchronously @tag Logging tag to change verbosity
--   level
data GetLogTagVerbosityLevel
GetLogTagVerbosityLevel :: Maybe String -> GetLogTagVerbosityLevel

[tag] :: GetLogTagVerbosityLevel -> Maybe String
instance GHC.Classes.Eq TD.Query.GetLogTagVerbosityLevel.GetLogTagVerbosityLevel
instance GHC.Show.Show TD.Query.GetLogTagVerbosityLevel.GetLogTagVerbosityLevel
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetLogTagVerbosityLevel.GetLogTagVerbosityLevel


module TD.Query.GetLogStream

-- | Returns information about currently used log stream for internal
--   logging of TDLib. Can be called synchronously
data GetLogStream
GetLogStream :: GetLogStream
instance GHC.Classes.Eq TD.Query.GetLogStream.GetLogStream
instance GHC.Show.Show TD.Query.GetLogStream.GetLogStream
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetLogStream.GetLogStream


module TD.Query.GetLocalizationTargetInfo

-- | Returns information about the current localization target. This is an
--   offline request if only_local is true. Can be called before
--   authorization @only_local Pass true to get only locally available
--   information without sending network requests
data GetLocalizationTargetInfo
GetLocalizationTargetInfo :: Maybe Bool -> GetLocalizationTargetInfo

[only_local] :: GetLocalizationTargetInfo -> Maybe Bool
instance GHC.Classes.Eq TD.Query.GetLocalizationTargetInfo.GetLocalizationTargetInfo
instance GHC.Show.Show TD.Query.GetLocalizationTargetInfo.GetLocalizationTargetInfo
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetLocalizationTargetInfo.GetLocalizationTargetInfo


module TD.Query.GetLanguagePackStrings

-- | Returns strings from a language pack in the current localization
--   target by their keys. Can be called before authorization
--   <tt>language_pack_id Language pack identifier of the strings to be
--   returned </tt>keys Language pack keys of the strings to be returned;
--   leave empty to request all available strings
data GetLanguagePackStrings
GetLanguagePackStrings :: Maybe [String] -> Maybe String -> GetLanguagePackStrings

[keys] :: GetLanguagePackStrings -> Maybe [String]

[language_pack_id] :: GetLanguagePackStrings -> Maybe String
instance GHC.Classes.Eq TD.Query.GetLanguagePackStrings.GetLanguagePackStrings
instance GHC.Show.Show TD.Query.GetLanguagePackStrings.GetLanguagePackStrings
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetLanguagePackStrings.GetLanguagePackStrings


module TD.Query.GetLanguagePackString

-- | Returns a string stored in the local database from the specified
--   localization target and language pack by its key. Returns a 404 error
--   if the string is not found. Can be called synchronously
data GetLanguagePackString
GetLanguagePackString :: Maybe String -> Maybe String -> Maybe String -> Maybe String -> GetLanguagePackString

[key] :: GetLanguagePackString -> Maybe String

[language_pack_id] :: GetLanguagePackString -> Maybe String

[localization_target] :: GetLanguagePackString -> Maybe String

-- | Path to the language pack database in which strings are stored
--   <tt>localization_target Localization target to which the language pack
--   belongs </tt>language_pack_id Language pack identifier @key Language
--   pack key of the string to be returned
[language_pack_database_path] :: GetLanguagePackString -> Maybe String
instance GHC.Classes.Eq TD.Query.GetLanguagePackString.GetLanguagePackString
instance GHC.Show.Show TD.Query.GetLanguagePackString.GetLanguagePackString
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetLanguagePackString.GetLanguagePackString


module TD.Query.GetLanguagePackInfo

-- | Returns information about a language pack. Returned language pack
--   identifier may be different from a provided one. Can be called before
--   authorization @language_pack_id Language pack identifier
data GetLanguagePackInfo
GetLanguagePackInfo :: Maybe String -> GetLanguagePackInfo

[language_pack_id] :: GetLanguagePackInfo -> Maybe String
instance GHC.Classes.Eq TD.Query.GetLanguagePackInfo.GetLanguagePackInfo
instance GHC.Show.Show TD.Query.GetLanguagePackInfo.GetLanguagePackInfo
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetLanguagePackInfo.GetLanguagePackInfo


module TD.Query.GetJsonValue

-- | Converts a JSON-serialized string to corresponding JsonValue object.
--   Can be called synchronously @json The JSON-serialized string
data GetJsonValue
GetJsonValue :: Maybe String -> GetJsonValue

[json] :: GetJsonValue -> Maybe String
instance GHC.Classes.Eq TD.Query.GetJsonValue.GetJsonValue
instance GHC.Show.Show TD.Query.GetJsonValue.GetJsonValue
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetJsonValue.GetJsonValue


module TD.Query.GetInternalLinkType

-- | Returns information about the type of an internal link. Returns a 404
--   error if the link is not internal. Can be called before authorization
--   @link The link
data GetInternalLinkType
GetInternalLinkType :: Maybe String -> GetInternalLinkType

[link] :: GetInternalLinkType -> Maybe String
instance GHC.Classes.Eq TD.Query.GetInternalLinkType.GetInternalLinkType
instance GHC.Show.Show TD.Query.GetInternalLinkType.GetInternalLinkType
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetInternalLinkType.GetInternalLinkType


module TD.Query.GetInstalledStickerSets

-- | Returns a list of installed sticker sets @is_masks Pass true to return
--   mask sticker sets; pass false to return ordinary sticker sets
data GetInstalledStickerSets
GetInstalledStickerSets :: Maybe Bool -> GetInstalledStickerSets

[is_masks] :: GetInstalledStickerSets -> Maybe Bool
instance GHC.Classes.Eq TD.Query.GetInstalledStickerSets.GetInstalledStickerSets
instance GHC.Show.Show TD.Query.GetInstalledStickerSets.GetInstalledStickerSets
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetInstalledStickerSets.GetInstalledStickerSets


module TD.Query.GetInlineGameHighScores

-- | Returns game high scores and some part of the high score table in the
--   range of the specified user; for bots only <tt>inline_message_id
--   Inline message identifier </tt>user_id User identifier
data GetInlineGameHighScores
GetInlineGameHighScores :: Maybe Int -> Maybe String -> GetInlineGameHighScores

[user_id] :: GetInlineGameHighScores -> Maybe Int

[inline_message_id] :: GetInlineGameHighScores -> Maybe String
instance GHC.Classes.Eq TD.Query.GetInlineGameHighScores.GetInlineGameHighScores
instance GHC.Show.Show TD.Query.GetInlineGameHighScores.GetInlineGameHighScores
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetInlineGameHighScores.GetInlineGameHighScores


module TD.Query.GetInactiveSupergroupChats

-- | Returns a list of recently inactive supergroups and channels. Can be
--   used when user reaches limit on the number of joined supergroups and
--   channels and receives CHANNELS_TOO_MUCH error. Also, the limit can be
--   increased with Telegram Premium
data GetInactiveSupergroupChats
GetInactiveSupergroupChats :: GetInactiveSupergroupChats
instance GHC.Classes.Eq TD.Query.GetInactiveSupergroupChats.GetInactiveSupergroupChats
instance GHC.Show.Show TD.Query.GetInactiveSupergroupChats.GetInactiveSupergroupChats
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetInactiveSupergroupChats.GetInactiveSupergroupChats


module TD.Query.GetImportedContactCount

-- | Returns the total number of imported contacts
data GetImportedContactCount
GetImportedContactCount :: GetImportedContactCount
instance GHC.Classes.Eq TD.Query.GetImportedContactCount.GetImportedContactCount
instance GHC.Show.Show TD.Query.GetImportedContactCount.GetImportedContactCount
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetImportedContactCount.GetImportedContactCount


module TD.Query.GetGroupsInCommon

-- | Returns a list of common group chats with a given user. Chats are
--   sorted by their type and creation date <tt>user_id User identifier
--   </tt>offset_chat_id Chat identifier starting from which to return
--   chats; use 0 for the first request @limit The maximum number of chats
--   to be returned; up to 100
data GetGroupsInCommon
GetGroupsInCommon :: Maybe Int -> Maybe Int -> Maybe Int -> GetGroupsInCommon

[limit] :: GetGroupsInCommon -> Maybe Int

[offset_chat_id] :: GetGroupsInCommon -> Maybe Int

[user_id] :: GetGroupsInCommon -> Maybe Int
instance GHC.Classes.Eq TD.Query.GetGroupsInCommon.GetGroupsInCommon
instance GHC.Show.Show TD.Query.GetGroupsInCommon.GetGroupsInCommon
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetGroupsInCommon.GetGroupsInCommon


module TD.Query.GetGroupCallStreams

-- | Returns information about available group call streams @group_call_id
--   Group call identifier
data GetGroupCallStreams
GetGroupCallStreams :: Maybe Int -> GetGroupCallStreams

[group_call_id] :: GetGroupCallStreams -> Maybe Int
instance GHC.Classes.Eq TD.Query.GetGroupCallStreams.GetGroupCallStreams
instance GHC.Show.Show TD.Query.GetGroupCallStreams.GetGroupCallStreams
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetGroupCallStreams.GetGroupCallStreams


module TD.Query.GetGroupCallInviteLink

-- | Returns invite link to a video chat in a public chat
data GetGroupCallInviteLink
GetGroupCallInviteLink :: Maybe Bool -> Maybe Int -> GetGroupCallInviteLink

-- | Pass true if the invite link needs to contain an invite hash, passing
--   which to joinGroupCall would allow the invited user to unmute
--   themselves. Requires groupCall.can_be_managed group call flag
[can_self_unmute] :: GetGroupCallInviteLink -> Maybe Bool

-- | Group call identifier
[group_call_id] :: GetGroupCallInviteLink -> Maybe Int
instance GHC.Classes.Eq TD.Query.GetGroupCallInviteLink.GetGroupCallInviteLink
instance GHC.Show.Show TD.Query.GetGroupCallInviteLink.GetGroupCallInviteLink
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetGroupCallInviteLink.GetGroupCallInviteLink


module TD.Query.GetGroupCall

-- | Returns information about a group call @group_call_id Group call
--   identifier
data GetGroupCall
GetGroupCall :: Maybe Int -> GetGroupCall

[group_call_id] :: GetGroupCall -> Maybe Int
instance GHC.Classes.Eq TD.Query.GetGroupCall.GetGroupCall
instance GHC.Show.Show TD.Query.GetGroupCall.GetGroupCall
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetGroupCall.GetGroupCall


module TD.Query.GetGameHighScores

-- | Returns the high scores for a game and some part of the high score
--   table in the range of the specified user; for bots only <tt>chat_id
--   The chat that contains the message with the game </tt>message_id
--   Identifier of the message @user_id User identifier
data GetGameHighScores
GetGameHighScores :: Maybe Int -> Maybe Int -> Maybe Int -> GetGameHighScores

[user_id] :: GetGameHighScores -> Maybe Int

[message_id] :: GetGameHighScores -> Maybe Int

[chat_id] :: GetGameHighScores -> Maybe Int
instance GHC.Classes.Eq TD.Query.GetGameHighScores.GetGameHighScores
instance GHC.Show.Show TD.Query.GetGameHighScores.GetGameHighScores
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetGameHighScores.GetGameHighScores


module TD.Query.GetFileMimeType

-- | Returns the MIME type of a file, guessed by its extension. Returns an
--   empty string on failure. Can be called synchronously @file_name The
--   name of the file or path to the file
data GetFileMimeType
GetFileMimeType :: Maybe String -> GetFileMimeType

[file_name] :: GetFileMimeType -> Maybe String
instance GHC.Classes.Eq TD.Query.GetFileMimeType.GetFileMimeType
instance GHC.Show.Show TD.Query.GetFileMimeType.GetFileMimeType
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetFileMimeType.GetFileMimeType


module TD.Query.GetFileExtension

-- | Returns the extension of a file, guessed by its MIME type. Returns an
--   empty string on failure. Can be called synchronously @mime_type The
--   MIME type of the file
data GetFileExtension
GetFileExtension :: Maybe String -> GetFileExtension

[mime_type] :: GetFileExtension -> Maybe String
instance GHC.Classes.Eq TD.Query.GetFileExtension.GetFileExtension
instance GHC.Show.Show TD.Query.GetFileExtension.GetFileExtension
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetFileExtension.GetFileExtension


module TD.Query.GetFileDownloadedPrefixSize

-- | Returns file downloaded prefix size from a given offset, in bytes
--   <tt>file_id Identifier of the file </tt>offset Offset from which
--   downloaded prefix size needs to be calculated
data GetFileDownloadedPrefixSize
GetFileDownloadedPrefixSize :: Maybe Int -> Maybe Int -> GetFileDownloadedPrefixSize

[offset] :: GetFileDownloadedPrefixSize -> Maybe Int

[file_id] :: GetFileDownloadedPrefixSize -> Maybe Int
instance GHC.Classes.Eq TD.Query.GetFileDownloadedPrefixSize.GetFileDownloadedPrefixSize
instance GHC.Show.Show TD.Query.GetFileDownloadedPrefixSize.GetFileDownloadedPrefixSize
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetFileDownloadedPrefixSize.GetFileDownloadedPrefixSize


module TD.Query.GetFile

-- | Returns information about a file; this is an offline request @file_id
--   Identifier of the file to get
data GetFile
GetFile :: Maybe Int -> GetFile

[file_id] :: GetFile -> Maybe Int
instance GHC.Classes.Eq TD.Query.GetFile.GetFile
instance GHC.Show.Show TD.Query.GetFile.GetFile
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetFile.GetFile


module TD.Query.GetFavoriteStickers

-- | Returns favorite stickers
data GetFavoriteStickers
GetFavoriteStickers :: GetFavoriteStickers
instance GHC.Classes.Eq TD.Query.GetFavoriteStickers.GetFavoriteStickers
instance GHC.Show.Show TD.Query.GetFavoriteStickers.GetFavoriteStickers
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetFavoriteStickers.GetFavoriteStickers


module TD.Query.GetExternalLinkInfo

-- | Returns information about an action to be done when the current user
--   clicks an external link. Don't use this method for links from secret
--   chats if web page preview is disabled in secret chats @link The link
data GetExternalLinkInfo
GetExternalLinkInfo :: Maybe String -> GetExternalLinkInfo

[link] :: GetExternalLinkInfo -> Maybe String
instance GHC.Classes.Eq TD.Query.GetExternalLinkInfo.GetExternalLinkInfo
instance GHC.Show.Show TD.Query.GetExternalLinkInfo.GetExternalLinkInfo
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetExternalLinkInfo.GetExternalLinkInfo


module TD.Query.GetExternalLink

-- | Returns an HTTP URL which can be used to automatically authorize the
--   current user on a website after clicking an HTTP link. Use the method
--   getExternalLinkInfo to find whether a prior user confirmation is
--   needed
data GetExternalLink
GetExternalLink :: Maybe Bool -> Maybe String -> GetExternalLink

[allow_write_access] :: GetExternalLink -> Maybe Bool

-- | The HTTP link @allow_write_access Pass true if the current user
--   allowed the bot, returned in getExternalLinkInfo, to send them
--   messages
[link] :: GetExternalLink -> Maybe String
instance GHC.Classes.Eq TD.Query.GetExternalLink.GetExternalLink
instance GHC.Show.Show TD.Query.GetExternalLink.GetExternalLink
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetExternalLink.GetExternalLink


module TD.Query.GetEmojiSuggestionsUrl

-- | Returns an HTTP URL which can be used to automatically log in to the
--   translation platform and suggest new emoji replacements. The URL will
--   be valid for 30 seconds after generation @language_code Language code
--   for which the emoji replacements will be suggested
data GetEmojiSuggestionsUrl
GetEmojiSuggestionsUrl :: Maybe String -> GetEmojiSuggestionsUrl

[language_code] :: GetEmojiSuggestionsUrl -> Maybe String
instance GHC.Classes.Eq TD.Query.GetEmojiSuggestionsUrl.GetEmojiSuggestionsUrl
instance GHC.Show.Show TD.Query.GetEmojiSuggestionsUrl.GetEmojiSuggestionsUrl
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetEmojiSuggestionsUrl.GetEmojiSuggestionsUrl


module TD.Query.GetDeepLinkInfo

-- | Returns information about a tg:/<i> deep link. Use
--   "tg:</i>/need_update_for_some_feature" or
--   "tg:some_unsupported_feature" for testing. Returns a 404 error for
--   unknown links. Can be called before authorization @link The link
data GetDeepLinkInfo
GetDeepLinkInfo :: Maybe String -> GetDeepLinkInfo

[link] :: GetDeepLinkInfo -> Maybe String
instance GHC.Classes.Eq TD.Query.GetDeepLinkInfo.GetDeepLinkInfo
instance GHC.Show.Show TD.Query.GetDeepLinkInfo.GetDeepLinkInfo
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetDeepLinkInfo.GetDeepLinkInfo


module TD.Query.GetDatabaseStatistics

-- | Returns database statistics
data GetDatabaseStatistics
GetDatabaseStatistics :: GetDatabaseStatistics
instance GHC.Classes.Eq TD.Query.GetDatabaseStatistics.GetDatabaseStatistics
instance GHC.Show.Show TD.Query.GetDatabaseStatistics.GetDatabaseStatistics
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetDatabaseStatistics.GetDatabaseStatistics


module TD.Query.GetCurrentState

-- | Returns all updates needed to restore current TDLib state, i.e. all
--   actual UpdateAuthorizationState<i>UpdateUser</i>UpdateNewChat and
--   others. This is especially useful if TDLib is run in a separate
--   process. Can be called before initialization
data GetCurrentState
GetCurrentState :: GetCurrentState
instance GHC.Classes.Eq TD.Query.GetCurrentState.GetCurrentState
instance GHC.Show.Show TD.Query.GetCurrentState.GetCurrentState
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetCurrentState.GetCurrentState


module TD.Query.GetCountryCode

-- | Uses the current IP address to find the current country. Returns
--   two-letter ISO 3166-1 alpha-2 country code. Can be called before
--   authorization
data GetCountryCode
GetCountryCode :: GetCountryCode
instance GHC.Classes.Eq TD.Query.GetCountryCode.GetCountryCode
instance GHC.Show.Show TD.Query.GetCountryCode.GetCountryCode
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetCountryCode.GetCountryCode


module TD.Query.GetCountries

-- | Returns information about existing countries. Can be called before
--   authorization
data GetCountries
GetCountries :: GetCountries
instance GHC.Classes.Eq TD.Query.GetCountries.GetCountries
instance GHC.Show.Show TD.Query.GetCountries.GetCountries
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetCountries.GetCountries


module TD.Query.GetContacts

-- | Returns all user contacts
data GetContacts
GetContacts :: GetContacts
instance GHC.Classes.Eq TD.Query.GetContacts.GetContacts
instance GHC.Show.Show TD.Query.GetContacts.GetContacts
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetContacts.GetContacts


module TD.Query.GetConnectedWebsites

-- | Returns all website where the current user used Telegram to log in
data GetConnectedWebsites
GetConnectedWebsites :: GetConnectedWebsites
instance GHC.Classes.Eq TD.Query.GetConnectedWebsites.GetConnectedWebsites
instance GHC.Show.Show TD.Query.GetConnectedWebsites.GetConnectedWebsites
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetConnectedWebsites.GetConnectedWebsites


module TD.Query.GetChatStatistics

-- | Returns detailed statistics about a chat. Currently, this method can
--   be used only for supergroups and channels. Can be used only if
--   supergroupFullInfo.can_get_statistics == true <tt>chat_id Chat
--   identifier </tt>is_dark Pass true if a dark theme is used by the
--   application
data GetChatStatistics
GetChatStatistics :: Maybe Bool -> Maybe Int -> GetChatStatistics

[is_dark] :: GetChatStatistics -> Maybe Bool

[chat_id] :: GetChatStatistics -> Maybe Int
instance GHC.Classes.Eq TD.Query.GetChatStatistics.GetChatStatistics
instance GHC.Show.Show TD.Query.GetChatStatistics.GetChatStatistics
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetChatStatistics.GetChatStatistics


module TD.Query.GetChatSponsoredMessage

-- | Returns sponsored message to be shown in a chat; for channel chats
--   only. Returns a 404 error if there is no sponsored message in the chat
--   @chat_id Identifier of the chat
data GetChatSponsoredMessage
GetChatSponsoredMessage :: Maybe Int -> GetChatSponsoredMessage

[chat_id] :: GetChatSponsoredMessage -> Maybe Int
instance GHC.Classes.Eq TD.Query.GetChatSponsoredMessage.GetChatSponsoredMessage
instance GHC.Show.Show TD.Query.GetChatSponsoredMessage.GetChatSponsoredMessage
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetChatSponsoredMessage.GetChatSponsoredMessage


module TD.Query.GetChatScheduledMessages

-- | Returns all scheduled messages in a chat. The messages are returned in
--   a reverse chronological order (i.e., in order of decreasing
--   message_id) @chat_id Chat identifier
data GetChatScheduledMessages
GetChatScheduledMessages :: Maybe Int -> GetChatScheduledMessages

[chat_id] :: GetChatScheduledMessages -> Maybe Int
instance GHC.Classes.Eq TD.Query.GetChatScheduledMessages.GetChatScheduledMessages
instance GHC.Show.Show TD.Query.GetChatScheduledMessages.GetChatScheduledMessages
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetChatScheduledMessages.GetChatScheduledMessages


module TD.Query.GetChatPinnedMessage

-- | Returns information about a newest pinned message in the chat @chat_id
--   Identifier of the chat the message belongs to
data GetChatPinnedMessage
GetChatPinnedMessage :: Maybe Int -> GetChatPinnedMessage

[chat_id] :: GetChatPinnedMessage -> Maybe Int
instance GHC.Classes.Eq TD.Query.GetChatPinnedMessage.GetChatPinnedMessage
instance GHC.Show.Show TD.Query.GetChatPinnedMessage.GetChatPinnedMessage
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetChatPinnedMessage.GetChatPinnedMessage


module TD.Query.GetChatMessageByDate

-- | Returns the last message sent in a chat no later than the specified
--   date <tt>chat_id Chat identifier </tt>date Point in time (Unix
--   timestamp) relative to which to search for messages
data GetChatMessageByDate
GetChatMessageByDate :: Maybe Int -> Maybe Int -> GetChatMessageByDate

[date] :: GetChatMessageByDate -> Maybe Int

[chat_id] :: GetChatMessageByDate -> Maybe Int
instance GHC.Classes.Eq TD.Query.GetChatMessageByDate.GetChatMessageByDate
instance GHC.Show.Show TD.Query.GetChatMessageByDate.GetChatMessageByDate
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetChatMessageByDate.GetChatMessageByDate


module TD.Query.GetChatListsToAddChat

-- | Returns chat lists to which the chat can be added. This is an offline
--   request @chat_id Chat identifier
data GetChatListsToAddChat
GetChatListsToAddChat :: Maybe Int -> GetChatListsToAddChat

[chat_id] :: GetChatListsToAddChat -> Maybe Int
instance GHC.Classes.Eq TD.Query.GetChatListsToAddChat.GetChatListsToAddChat
instance GHC.Show.Show TD.Query.GetChatListsToAddChat.GetChatListsToAddChat
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetChatListsToAddChat.GetChatListsToAddChat


module TD.Query.GetChatInviteLinks

-- | Returns invite links for a chat created by specified administrator.
--   Requires administrator privileges and can_invite_users right in the
--   chat to get own links and owner privileges to get other links
data GetChatInviteLinks
GetChatInviteLinks :: Maybe Int -> Maybe String -> Maybe Int -> Maybe Bool -> Maybe Int -> Maybe Int -> GetChatInviteLinks

-- | The maximum number of invite links to return; up to 100
[limit] :: GetChatInviteLinks -> Maybe Int

-- | Invite link starting after which to return invite links; use empty
--   string to get results from the beginning
[offset_invite_link] :: GetChatInviteLinks -> Maybe String

-- | Creation date of an invite link starting after which to return invite
--   links; use 0 to get results from the beginning
[offset_date] :: GetChatInviteLinks -> Maybe Int

-- | Pass true if revoked links needs to be returned instead of active or
--   expired
[is_revoked] :: GetChatInviteLinks -> Maybe Bool

-- | User identifier of a chat administrator. Must be an identifier of the
--   current user for non-owner
[creator_user_id] :: GetChatInviteLinks -> Maybe Int

-- | Chat identifier
[chat_id] :: GetChatInviteLinks -> Maybe Int
instance GHC.Classes.Eq TD.Query.GetChatInviteLinks.GetChatInviteLinks
instance GHC.Show.Show TD.Query.GetChatInviteLinks.GetChatInviteLinks
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetChatInviteLinks.GetChatInviteLinks


module TD.Query.GetChatInviteLinkCounts

-- | Returns list of chat administrators with number of their invite links.
--   Requires owner privileges in the chat @chat_id Chat identifier
data GetChatInviteLinkCounts
GetChatInviteLinkCounts :: Maybe Int -> GetChatInviteLinkCounts

[chat_id] :: GetChatInviteLinkCounts -> Maybe Int
instance GHC.Classes.Eq TD.Query.GetChatInviteLinkCounts.GetChatInviteLinkCounts
instance GHC.Show.Show TD.Query.GetChatInviteLinkCounts.GetChatInviteLinkCounts
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetChatInviteLinkCounts.GetChatInviteLinkCounts


module TD.Query.GetChatInviteLink

-- | Returns information about an invite link. Requires administrator
--   privileges and can_invite_users right in the chat to get own links and
--   owner privileges to get other links
data GetChatInviteLink
GetChatInviteLink :: Maybe String -> Maybe Int -> GetChatInviteLink

-- | Invite link to get
[invite_link] :: GetChatInviteLink -> Maybe String

-- | Chat identifier
[chat_id] :: GetChatInviteLink -> Maybe Int
instance GHC.Classes.Eq TD.Query.GetChatInviteLink.GetChatInviteLink
instance GHC.Show.Show TD.Query.GetChatInviteLink.GetChatInviteLink
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetChatInviteLink.GetChatInviteLink


module TD.Query.GetChatHistory

-- | Returns messages in a chat. The messages are returned in a reverse
--   chronological order (i.e., in order of decreasing message_id). For
--   optimal performance, the number of returned messages is chosen by
--   TDLib. This is an offline request if only_local is true
data GetChatHistory
GetChatHistory :: Maybe Bool -> Maybe Int -> Maybe Int -> Maybe Int -> Maybe Int -> GetChatHistory

-- | Pass true to get only messages that are available without sending
--   network requests
[only_local] :: GetChatHistory -> Maybe Bool

-- | The maximum number of messages to be returned; must be positive and
--   can't be greater than 100. If the offset is negative, the limit must
--   be greater than or equal to -offset. For optimal performance, the
--   number of returned messages is chosen by TDLib and can be smaller than
--   the specified limit
[limit] :: GetChatHistory -> Maybe Int

-- | Specify 0 to get results from exactly the from_message_id or a
--   negative offset up to 99 to get additionally some newer messages
[offset] :: GetChatHistory -> Maybe Int

-- | Identifier of the message starting from which history must be fetched;
--   use 0 to get results from the last message
[from_message_id] :: GetChatHistory -> Maybe Int

-- | Chat identifier
[chat_id] :: GetChatHistory -> Maybe Int
instance GHC.Classes.Eq TD.Query.GetChatHistory.GetChatHistory
instance GHC.Show.Show TD.Query.GetChatHistory.GetChatHistory
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetChatHistory.GetChatHistory


module TD.Query.GetChatFilter

-- | Returns information about a chat filter by its identifier
--   @chat_filter_id Chat filter identifier
data GetChatFilter
GetChatFilter :: Maybe Int -> GetChatFilter

[chat_filter_id] :: GetChatFilter -> Maybe Int
instance GHC.Classes.Eq TD.Query.GetChatFilter.GetChatFilter
instance GHC.Show.Show TD.Query.GetChatFilter.GetChatFilter
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetChatFilter.GetChatFilter


module TD.Query.GetChatAvailableMessageSenders

-- | Returns list of message sender identifiers, which can be used to send
--   messages in a chat @chat_id Chat identifier
data GetChatAvailableMessageSenders
GetChatAvailableMessageSenders :: Maybe Int -> GetChatAvailableMessageSenders

[chat_id] :: GetChatAvailableMessageSenders -> Maybe Int
instance GHC.Classes.Eq TD.Query.GetChatAvailableMessageSenders.GetChatAvailableMessageSenders
instance GHC.Show.Show TD.Query.GetChatAvailableMessageSenders.GetChatAvailableMessageSenders
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetChatAvailableMessageSenders.GetChatAvailableMessageSenders


module TD.Query.GetChatAdministrators

-- | Returns a list of administrators of the chat with their custom titles
--   @chat_id Chat identifier
data GetChatAdministrators
GetChatAdministrators :: Maybe Int -> GetChatAdministrators

[chat_id] :: GetChatAdministrators -> Maybe Int
instance GHC.Classes.Eq TD.Query.GetChatAdministrators.GetChatAdministrators
instance GHC.Show.Show TD.Query.GetChatAdministrators.GetChatAdministrators
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetChatAdministrators.GetChatAdministrators


module TD.Query.GetChat

-- | Returns information about a chat by its identifier, this is an offline
--   request if the current user is not a bot @chat_id Chat identifier
data GetChat
GetChat :: Maybe Int -> GetChat

[chat_id] :: GetChat -> Maybe Int
instance GHC.Classes.Eq TD.Query.GetChat.GetChat
instance GHC.Show.Show TD.Query.GetChat.GetChat
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetChat.GetChat


module TD.Query.GetCallbackQueryMessage

-- | Returns information about a message with the callback button that
--   originated a callback query; for bots only <tt>chat_id Identifier of
--   the chat the message belongs to </tt>message_id Message identifier
--   @callback_query_id Identifier of the callback query
data GetCallbackQueryMessage
GetCallbackQueryMessage :: Maybe Int -> Maybe Int -> Maybe Int -> GetCallbackQueryMessage

[callback_query_id] :: GetCallbackQueryMessage -> Maybe Int

[message_id] :: GetCallbackQueryMessage -> Maybe Int

[chat_id] :: GetCallbackQueryMessage -> Maybe Int
instance GHC.Classes.Eq TD.Query.GetCallbackQueryMessage.GetCallbackQueryMessage
instance GHC.Show.Show TD.Query.GetCallbackQueryMessage.GetCallbackQueryMessage
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetCallbackQueryMessage.GetCallbackQueryMessage


module TD.Query.GetBlockedMessageSenders

-- | Returns users and chats that were blocked by the current user
--   <tt>offset Number of users and chats to skip in the result; must be
--   non-negative </tt>limit The maximum number of users and chats to
--   return; up to 100
data GetBlockedMessageSenders
GetBlockedMessageSenders :: Maybe Int -> Maybe Int -> GetBlockedMessageSenders

[limit] :: GetBlockedMessageSenders -> Maybe Int

[offset] :: GetBlockedMessageSenders -> Maybe Int
instance GHC.Classes.Eq TD.Query.GetBlockedMessageSenders.GetBlockedMessageSenders
instance GHC.Show.Show TD.Query.GetBlockedMessageSenders.GetBlockedMessageSenders
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetBlockedMessageSenders.GetBlockedMessageSenders


module TD.Query.GetBasicGroupFullInfo

-- | Returns full information about a basic group by its identifier
--   @basic_group_id Basic group identifier
data GetBasicGroupFullInfo
GetBasicGroupFullInfo :: Maybe Int -> GetBasicGroupFullInfo

[basic_group_id] :: GetBasicGroupFullInfo -> Maybe Int
instance GHC.Classes.Eq TD.Query.GetBasicGroupFullInfo.GetBasicGroupFullInfo
instance GHC.Show.Show TD.Query.GetBasicGroupFullInfo.GetBasicGroupFullInfo
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetBasicGroupFullInfo.GetBasicGroupFullInfo


module TD.Query.GetBasicGroup

-- | Returns information about a basic group by its identifier. This is an
--   offline request if the current user is not a bot @basic_group_id Basic
--   group identifier
data GetBasicGroup
GetBasicGroup :: Maybe Int -> GetBasicGroup

[basic_group_id] :: GetBasicGroup -> Maybe Int
instance GHC.Classes.Eq TD.Query.GetBasicGroup.GetBasicGroup
instance GHC.Show.Show TD.Query.GetBasicGroup.GetBasicGroup
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetBasicGroup.GetBasicGroup


module TD.Query.GetBankCardInfo

-- | Returns information about a bank card @bank_card_number The bank card
--   number
data GetBankCardInfo
GetBankCardInfo :: Maybe String -> GetBankCardInfo

[bank_card_number] :: GetBankCardInfo -> Maybe String
instance GHC.Classes.Eq TD.Query.GetBankCardInfo.GetBankCardInfo
instance GHC.Show.Show TD.Query.GetBankCardInfo.GetBankCardInfo
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetBankCardInfo.GetBankCardInfo


module TD.Query.GetBackgrounds

-- | Returns backgrounds installed by the user @for_dark_theme Pass true to
--   order returned backgrounds for a dark theme
data GetBackgrounds
GetBackgrounds :: Maybe Bool -> GetBackgrounds

[for_dark_theme] :: GetBackgrounds -> Maybe Bool
instance GHC.Classes.Eq TD.Query.GetBackgrounds.GetBackgrounds
instance GHC.Show.Show TD.Query.GetBackgrounds.GetBackgrounds
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetBackgrounds.GetBackgrounds


module TD.Query.GetAutoDownloadSettingsPresets

-- | Returns auto-download settings presets for the current user
data GetAutoDownloadSettingsPresets
GetAutoDownloadSettingsPresets :: GetAutoDownloadSettingsPresets
instance GHC.Classes.Eq TD.Query.GetAutoDownloadSettingsPresets.GetAutoDownloadSettingsPresets
instance GHC.Show.Show TD.Query.GetAutoDownloadSettingsPresets.GetAutoDownloadSettingsPresets
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetAutoDownloadSettingsPresets.GetAutoDownloadSettingsPresets


module TD.Query.GetAuthorizationState

-- | Returns the current authorization state; this is an offline request.
--   For informational purposes only. Use updateAuthorizationState instead
--   to maintain the current authorization state. Can be called before
--   initialization
data GetAuthorizationState
GetAuthorizationState :: GetAuthorizationState
instance GHC.Classes.Eq TD.Query.GetAuthorizationState.GetAuthorizationState
instance GHC.Show.Show TD.Query.GetAuthorizationState.GetAuthorizationState
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetAuthorizationState.GetAuthorizationState


module TD.Query.GetAttachmentMenuBot

-- | Returns information about a bot that can be added to attachment menu
--   @bot_user_id Bot's user identifier
data GetAttachmentMenuBot
GetAttachmentMenuBot :: Maybe Int -> GetAttachmentMenuBot

[bot_user_id] :: GetAttachmentMenuBot -> Maybe Int
instance GHC.Classes.Eq TD.Query.GetAttachmentMenuBot.GetAttachmentMenuBot
instance GHC.Show.Show TD.Query.GetAttachmentMenuBot.GetAttachmentMenuBot
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetAttachmentMenuBot.GetAttachmentMenuBot


module TD.Query.GetAttachedStickerSets

-- | Returns a list of sticker sets attached to a file. Currently, only
--   photos and videos can have attached sticker sets @file_id File
--   identifier
data GetAttachedStickerSets
GetAttachedStickerSets :: Maybe Int -> GetAttachedStickerSets

[file_id] :: GetAttachedStickerSets -> Maybe Int
instance GHC.Classes.Eq TD.Query.GetAttachedStickerSets.GetAttachedStickerSets
instance GHC.Show.Show TD.Query.GetAttachedStickerSets.GetAttachedStickerSets
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetAttachedStickerSets.GetAttachedStickerSets


module TD.Query.GetArchivedStickerSets

-- | Returns a list of archived sticker sets <tt>is_masks Pass true to
--   return mask stickers sets; pass false to return ordinary sticker sets
--   </tt>offset_sticker_set_id Identifier of the sticker set from which to
--   return the result @limit The maximum number of sticker sets to return;
--   up to 100
data GetArchivedStickerSets
GetArchivedStickerSets :: Maybe Int -> Maybe Int -> Maybe Bool -> GetArchivedStickerSets

[limit] :: GetArchivedStickerSets -> Maybe Int

[offset_sticker_set_id] :: GetArchivedStickerSets -> Maybe Int

[is_masks] :: GetArchivedStickerSets -> Maybe Bool
instance GHC.Classes.Eq TD.Query.GetArchivedStickerSets.GetArchivedStickerSets
instance GHC.Show.Show TD.Query.GetArchivedStickerSets.GetArchivedStickerSets
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetArchivedStickerSets.GetArchivedStickerSets


module TD.Query.GetApplicationDownloadLink

-- | Returns the link for downloading official Telegram application to be
--   used when the current user invites friends to Telegram
data GetApplicationDownloadLink
GetApplicationDownloadLink :: GetApplicationDownloadLink
instance GHC.Classes.Eq TD.Query.GetApplicationDownloadLink.GetApplicationDownloadLink
instance GHC.Show.Show TD.Query.GetApplicationDownloadLink.GetApplicationDownloadLink
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetApplicationDownloadLink.GetApplicationDownloadLink


module TD.Query.GetApplicationConfig

-- | Returns application config, provided by the server. Can be called
--   before authorization
data GetApplicationConfig
GetApplicationConfig :: GetApplicationConfig
instance GHC.Classes.Eq TD.Query.GetApplicationConfig.GetApplicationConfig
instance GHC.Show.Show TD.Query.GetApplicationConfig.GetApplicationConfig
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetApplicationConfig.GetApplicationConfig


module TD.Query.GetAnimatedEmoji

-- | Returns an animated emoji corresponding to a given emoji. Returns a
--   404 error if the emoji has no animated emoji @emoji The emoji
data GetAnimatedEmoji
GetAnimatedEmoji :: Maybe String -> GetAnimatedEmoji

[emoji] :: GetAnimatedEmoji -> Maybe String
instance GHC.Classes.Eq TD.Query.GetAnimatedEmoji.GetAnimatedEmoji
instance GHC.Show.Show TD.Query.GetAnimatedEmoji.GetAnimatedEmoji
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetAnimatedEmoji.GetAnimatedEmoji


module TD.Query.GetAllPassportElements

-- | Returns all available Telegram Passport elements @password Password of
--   the current user
data GetAllPassportElements
GetAllPassportElements :: Maybe String -> GetAllPassportElements

[password] :: GetAllPassportElements -> Maybe String
instance GHC.Classes.Eq TD.Query.GetAllPassportElements.GetAllPassportElements
instance GHC.Show.Show TD.Query.GetAllPassportElements.GetAllPassportElements
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetAllPassportElements.GetAllPassportElements


module TD.Query.GetAllAnimatedEmojis

-- | Returns all emojis, which has a corresponding animated emoji
data GetAllAnimatedEmojis
GetAllAnimatedEmojis :: GetAllAnimatedEmojis
instance GHC.Classes.Eq TD.Query.GetAllAnimatedEmojis.GetAllAnimatedEmojis
instance GHC.Show.Show TD.Query.GetAllAnimatedEmojis.GetAllAnimatedEmojis
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetAllAnimatedEmojis.GetAllAnimatedEmojis


module TD.Query.GetActiveSessions

-- | Returns all active sessions of the current user
data GetActiveSessions
GetActiveSessions :: GetActiveSessions
instance GHC.Classes.Eq TD.Query.GetActiveSessions.GetActiveSessions
instance GHC.Show.Show TD.Query.GetActiveSessions.GetActiveSessions
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetActiveSessions.GetActiveSessions


module TD.Query.GetActiveLiveLocationMessages

-- | Returns all active live locations that need to be updated by the
--   application. The list is persistent across application restarts only
--   if the message database is used
data GetActiveLiveLocationMessages
GetActiveLiveLocationMessages :: GetActiveLiveLocationMessages
instance GHC.Classes.Eq TD.Query.GetActiveLiveLocationMessages.GetActiveLiveLocationMessages
instance GHC.Show.Show TD.Query.GetActiveLiveLocationMessages.GetActiveLiveLocationMessages
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetActiveLiveLocationMessages.GetActiveLiveLocationMessages


module TD.Query.GetAccountTtl

-- | Returns the period of inactivity after which the account of the
--   current user will automatically be deleted
data GetAccountTtl
GetAccountTtl :: GetAccountTtl
instance GHC.Classes.Eq TD.Query.GetAccountTtl.GetAccountTtl
instance GHC.Show.Show TD.Query.GetAccountTtl.GetAccountTtl
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetAccountTtl.GetAccountTtl


module TD.Query.EndGroupCallScreenSharing

-- | Ends screen sharing in a joined group call @group_call_id Group call
--   identifier
data EndGroupCallScreenSharing
EndGroupCallScreenSharing :: Maybe Int -> EndGroupCallScreenSharing

[group_call_id] :: EndGroupCallScreenSharing -> Maybe Int
instance GHC.Classes.Eq TD.Query.EndGroupCallScreenSharing.EndGroupCallScreenSharing
instance GHC.Show.Show TD.Query.EndGroupCallScreenSharing.EndGroupCallScreenSharing
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.EndGroupCallScreenSharing.EndGroupCallScreenSharing


module TD.Query.EndGroupCallRecording

-- | Ends recording of an active group call. Requires
--   groupCall.can_be_managed group call flag @group_call_id Group call
--   identifier
data EndGroupCallRecording
EndGroupCallRecording :: Maybe Int -> EndGroupCallRecording

[group_call_id] :: EndGroupCallRecording -> Maybe Int
instance GHC.Classes.Eq TD.Query.EndGroupCallRecording.EndGroupCallRecording
instance GHC.Show.Show TD.Query.EndGroupCallRecording.EndGroupCallRecording
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.EndGroupCallRecording.EndGroupCallRecording


module TD.Query.EndGroupCall

-- | Ends a group call. Requires groupCall.can_be_managed @group_call_id
--   Group call identifier
data EndGroupCall
EndGroupCall :: Maybe Int -> EndGroupCall

[group_call_id] :: EndGroupCall -> Maybe Int
instance GHC.Classes.Eq TD.Query.EndGroupCall.EndGroupCall
instance GHC.Show.Show TD.Query.EndGroupCall.EndGroupCall
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.EndGroupCall.EndGroupCall


module TD.Query.EnableProxy

-- | Enables a proxy. Only one proxy can be enabled at a time. Can be
--   called before authorization @proxy_id Proxy identifier
data EnableProxy
EnableProxy :: Maybe Int -> EnableProxy

[proxy_id] :: EnableProxy -> Maybe Int
instance GHC.Classes.Eq TD.Query.EnableProxy.EnableProxy
instance GHC.Show.Show TD.Query.EnableProxy.EnableProxy
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.EnableProxy.EnableProxy


module TD.Query.EditChatInviteLink

-- | Edits a non-primary invite link for a chat. Available for basic
--   groups, supergroups, and channels. Requires administrator privileges
--   and can_invite_users right in the chat for own links and owner
--   privileges for other links
data EditChatInviteLink
EditChatInviteLink :: Maybe Bool -> Maybe Int -> Maybe Int -> Maybe String -> Maybe String -> Maybe Int -> EditChatInviteLink

-- | Pass true if users joining the chat via the link need to be approved
--   by chat administrators. In this case, member_limit must be 0
[creates_join_request] :: EditChatInviteLink -> Maybe Bool

-- | The maximum number of chat members that can join the chat via the link
--   simultaneously; 0-99999; pass 0 if not limited
[member_limit] :: EditChatInviteLink -> Maybe Int

-- | Point in time (Unix timestamp) when the link will expire; pass 0 if
--   never
[expiration_date] :: EditChatInviteLink -> Maybe Int

-- | Invite link name; 0-32 characters
[name] :: EditChatInviteLink -> Maybe String

-- | Invite link to be edited
[invite_link] :: EditChatInviteLink -> Maybe String

-- | Chat identifier
[chat_id] :: EditChatInviteLink -> Maybe Int
instance GHC.Classes.Eq TD.Query.EditChatInviteLink.EditChatInviteLink
instance GHC.Show.Show TD.Query.EditChatInviteLink.EditChatInviteLink
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.EditChatInviteLink.EditChatInviteLink


module TD.Query.DownloadFile

-- | Downloads a file from the cloud. Download progress and completion of
--   the download will be notified through updateFile updates
data DownloadFile
DownloadFile :: Maybe Bool -> Maybe Int -> Maybe Int -> Maybe Int -> Maybe Int -> DownloadFile

-- | Pass true to return response only after the file download has
--   succeeded, has failed, has been canceled, or a new downloadFile
--   request with different offset/limit parameters was sent; pass false to
--   return file state immediately, just after the download has been
--   started
[synchronous] :: DownloadFile -> Maybe Bool

-- | Number of bytes which need to be downloaded starting from the "offset"
--   position before the download will automatically be canceled; use 0 to
--   download without a limit
[limit] :: DownloadFile -> Maybe Int

-- | The starting position from which the file needs to be downloaded
[offset] :: DownloadFile -> Maybe Int

-- | Priority of the download (1-32). The higher the priority, the earlier
--   the file will be downloaded. If the priorities of two files are equal,
--   then the last one for which downloadFile/addFileToDownloads was called
--   will be downloaded first
[priority] :: DownloadFile -> Maybe Int

-- | Identifier of the file to download
[file_id] :: DownloadFile -> Maybe Int
instance GHC.Classes.Eq TD.Query.DownloadFile.DownloadFile
instance GHC.Show.Show TD.Query.DownloadFile.DownloadFile
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.DownloadFile.DownloadFile


module TD.Query.DisconnectWebsite

-- | Disconnects website from the current user's Telegram account
--   @website_id Website identifier
data DisconnectWebsite
DisconnectWebsite :: Maybe Int -> DisconnectWebsite

[website_id] :: DisconnectWebsite -> Maybe Int
instance GHC.Classes.Eq TD.Query.DisconnectWebsite.DisconnectWebsite
instance GHC.Show.Show TD.Query.DisconnectWebsite.DisconnectWebsite
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.DisconnectWebsite.DisconnectWebsite


module TD.Query.DisconnectAllWebsites

-- | Disconnects all websites from the current user's Telegram account
data DisconnectAllWebsites
DisconnectAllWebsites :: DisconnectAllWebsites
instance GHC.Classes.Eq TD.Query.DisconnectAllWebsites.DisconnectAllWebsites
instance GHC.Show.Show TD.Query.DisconnectAllWebsites.DisconnectAllWebsites
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.DisconnectAllWebsites.DisconnectAllWebsites


module TD.Query.DiscardCall

-- | Discards a call <tt>call_id Call identifier </tt>is_disconnected Pass
--   true if the user was disconnected <tt>duration The call duration, in
--   seconds </tt>is_video Pass true if the call was a video call
--   @connection_id Identifier of the connection used during the call
data DiscardCall
DiscardCall :: Maybe Int -> Maybe Bool -> Maybe Int -> Maybe Bool -> Maybe Int -> DiscardCall

[connection_id] :: DiscardCall -> Maybe Int

[is_video] :: DiscardCall -> Maybe Bool

[duration] :: DiscardCall -> Maybe Int

[is_disconnected] :: DiscardCall -> Maybe Bool

[call_id] :: DiscardCall -> Maybe Int
instance GHC.Classes.Eq TD.Query.DiscardCall.DiscardCall
instance GHC.Show.Show TD.Query.DiscardCall.DiscardCall
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.DiscardCall.DiscardCall


module TD.Query.DisableProxy

-- | Disables the currently enabled proxy. Can be called before
--   authorization
data DisableProxy
DisableProxy :: DisableProxy
instance GHC.Classes.Eq TD.Query.DisableProxy.DisableProxy
instance GHC.Show.Show TD.Query.DisableProxy.DisableProxy
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.DisableProxy.DisableProxy


module TD.Query.Destroy

-- | Closes the TDLib instance, destroying all local data without a proper
--   logout. The current user session will remain in the list of all active
--   sessions. All local data will be destroyed. After the destruction
--   completes updateAuthorizationState with authorizationStateClosed will
--   be sent. Can be called before authorization
data Destroy
Destroy :: Destroy
instance GHC.Classes.Eq TD.Query.Destroy.Destroy
instance GHC.Show.Show TD.Query.Destroy.Destroy
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.Destroy.Destroy


module TD.Query.DeleteSavedOrderInfo

-- | Deletes saved order information
data DeleteSavedOrderInfo
DeleteSavedOrderInfo :: DeleteSavedOrderInfo
instance GHC.Classes.Eq TD.Query.DeleteSavedOrderInfo.DeleteSavedOrderInfo
instance GHC.Show.Show TD.Query.DeleteSavedOrderInfo.DeleteSavedOrderInfo
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.DeleteSavedOrderInfo.DeleteSavedOrderInfo


module TD.Query.DeleteSavedCredentials

-- | Deletes saved credentials for all payment provider bots
data DeleteSavedCredentials
DeleteSavedCredentials :: DeleteSavedCredentials
instance GHC.Classes.Eq TD.Query.DeleteSavedCredentials.DeleteSavedCredentials
instance GHC.Show.Show TD.Query.DeleteSavedCredentials.DeleteSavedCredentials
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.DeleteSavedCredentials.DeleteSavedCredentials


module TD.Query.DeleteRevokedChatInviteLink

-- | Deletes revoked chat invite links. Requires administrator privileges
--   and can_invite_users right in the chat for own links and owner
--   privileges for other links <tt>chat_id Chat identifier
--   </tt>invite_link Invite link to revoke
data DeleteRevokedChatInviteLink
DeleteRevokedChatInviteLink :: Maybe String -> Maybe Int -> DeleteRevokedChatInviteLink

[invite_link] :: DeleteRevokedChatInviteLink -> Maybe String

[chat_id] :: DeleteRevokedChatInviteLink -> Maybe Int
instance GHC.Classes.Eq TD.Query.DeleteRevokedChatInviteLink.DeleteRevokedChatInviteLink
instance GHC.Show.Show TD.Query.DeleteRevokedChatInviteLink.DeleteRevokedChatInviteLink
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.DeleteRevokedChatInviteLink.DeleteRevokedChatInviteLink


module TD.Query.DeleteProfilePhoto

-- | Deletes a profile photo @profile_photo_id Identifier of the profile
--   photo to delete
data DeleteProfilePhoto
DeleteProfilePhoto :: Maybe Int -> DeleteProfilePhoto

[profile_photo_id] :: DeleteProfilePhoto -> Maybe Int
instance GHC.Classes.Eq TD.Query.DeleteProfilePhoto.DeleteProfilePhoto
instance GHC.Show.Show TD.Query.DeleteProfilePhoto.DeleteProfilePhoto
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.DeleteProfilePhoto.DeleteProfilePhoto


module TD.Query.DeleteMessages

-- | Deletes messages <tt>chat_id Chat identifier </tt>message_ids
--   Identifiers of the messages to be deleted @revoke Pass true to delete
--   messages for all chat members. Always true for supergroups, channels
--   and secret chats
data DeleteMessages
DeleteMessages :: Maybe Bool -> Maybe [Int] -> Maybe Int -> DeleteMessages

[revoke] :: DeleteMessages -> Maybe Bool

[message_ids] :: DeleteMessages -> Maybe [Int]

[chat_id] :: DeleteMessages -> Maybe Int
instance GHC.Classes.Eq TD.Query.DeleteMessages.DeleteMessages
instance GHC.Show.Show TD.Query.DeleteMessages.DeleteMessages
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.DeleteMessages.DeleteMessages


module TD.Query.DeleteLanguagePack

-- | Deletes all information about a language pack in the current
--   localization target. The language pack which is currently in use
--   (including base language pack) or is being synchronized can't be
--   deleted. Can be called before authorization @language_pack_id
--   Identifier of the language pack to delete
data DeleteLanguagePack
DeleteLanguagePack :: Maybe String -> DeleteLanguagePack

[language_pack_id] :: DeleteLanguagePack -> Maybe String
instance GHC.Classes.Eq TD.Query.DeleteLanguagePack.DeleteLanguagePack
instance GHC.Show.Show TD.Query.DeleteLanguagePack.DeleteLanguagePack
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.DeleteLanguagePack.DeleteLanguagePack


module TD.Query.DeleteFile

-- | Deletes a file from the TDLib file cache @file_id Identifier of the
--   file to delete
data DeleteFile
DeleteFile :: Maybe Int -> DeleteFile

[file_id] :: DeleteFile -> Maybe Int
instance GHC.Classes.Eq TD.Query.DeleteFile.DeleteFile
instance GHC.Show.Show TD.Query.DeleteFile.DeleteFile
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.DeleteFile.DeleteFile


module TD.Query.DeleteChatReplyMarkup

-- | Deletes the default reply markup from a chat. Must be called after a
--   one-time keyboard or a ForceReply reply markup has been used.
--   UpdateChatReplyMarkup will be sent if the reply markup is changed
data DeleteChatReplyMarkup
DeleteChatReplyMarkup :: Maybe Int -> Maybe Int -> DeleteChatReplyMarkup

-- | The message identifier of the used keyboard
[message_id] :: DeleteChatReplyMarkup -> Maybe Int

-- | Chat identifier
[chat_id] :: DeleteChatReplyMarkup -> Maybe Int
instance GHC.Classes.Eq TD.Query.DeleteChatReplyMarkup.DeleteChatReplyMarkup
instance GHC.Show.Show TD.Query.DeleteChatReplyMarkup.DeleteChatReplyMarkup
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.DeleteChatReplyMarkup.DeleteChatReplyMarkup


module TD.Query.DeleteChatMessagesByDate

-- | Deletes all messages between the specified dates in a chat. Supported
--   only for private chats and basic groups. Messages sent in the last 30
--   seconds will not be deleted
data DeleteChatMessagesByDate
DeleteChatMessagesByDate :: Maybe Bool -> Maybe Int -> Maybe Int -> Maybe Int -> DeleteChatMessagesByDate

[revoke] :: DeleteChatMessagesByDate -> Maybe Bool

[max_date] :: DeleteChatMessagesByDate -> Maybe Int

[min_date] :: DeleteChatMessagesByDate -> Maybe Int

-- | Chat identifier <tt>min_date The minimum date of the messages to
--   delete </tt>max_date The maximum date of the messages to delete
--   @revoke Pass true to delete chat messages for all users; private chats
--   only
[chat_id] :: DeleteChatMessagesByDate -> Maybe Int
instance GHC.Classes.Eq TD.Query.DeleteChatMessagesByDate.DeleteChatMessagesByDate
instance GHC.Show.Show TD.Query.DeleteChatMessagesByDate.DeleteChatMessagesByDate
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.DeleteChatMessagesByDate.DeleteChatMessagesByDate


module TD.Query.DeleteChatHistory

-- | Deletes all messages in the chat. Use
--   chat.can_be_deleted_only_for_self and
--   chat.can_be_deleted_for_all_users fields to find whether and how the
--   method can be applied to the chat
data DeleteChatHistory
DeleteChatHistory :: Maybe Bool -> Maybe Bool -> Maybe Int -> DeleteChatHistory

[revoke] :: DeleteChatHistory -> Maybe Bool

[remove_from_chat_list] :: DeleteChatHistory -> Maybe Bool

-- | Chat identifier <tt>remove_from_chat_list Pass true to remove the chat
--   from all chat lists </tt>revoke Pass true to delete chat history for
--   all users
[chat_id] :: DeleteChatHistory -> Maybe Int
instance GHC.Classes.Eq TD.Query.DeleteChatHistory.DeleteChatHistory
instance GHC.Show.Show TD.Query.DeleteChatHistory.DeleteChatHistory
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.DeleteChatHistory.DeleteChatHistory


module TD.Query.DeleteChatFilter

-- | Deletes existing chat filter @chat_filter_id Chat filter identifier
data DeleteChatFilter
DeleteChatFilter :: Maybe Int -> DeleteChatFilter

[chat_filter_id] :: DeleteChatFilter -> Maybe Int
instance GHC.Classes.Eq TD.Query.DeleteChatFilter.DeleteChatFilter
instance GHC.Show.Show TD.Query.DeleteChatFilter.DeleteChatFilter
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.DeleteChatFilter.DeleteChatFilter


module TD.Query.DeleteChat

-- | Deletes a chat along with all messages in the corresponding chat for
--   all chat members. For group chats this will release the username and
--   remove all members. Use the field chat.can_be_deleted_for_all_users to
--   find whether the method can be applied to the chat @chat_id Chat
--   identifier
data DeleteChat
DeleteChat :: Maybe Int -> DeleteChat

[chat_id] :: DeleteChat -> Maybe Int
instance GHC.Classes.Eq TD.Query.DeleteChat.DeleteChat
instance GHC.Show.Show TD.Query.DeleteChat.DeleteChat
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.DeleteChat.DeleteChat


module TD.Query.DeleteAllRevokedChatInviteLinks

-- | Deletes all revoked chat invite links created by a given chat
--   administrator. Requires administrator privileges and can_invite_users
--   right in the chat for own links and owner privileges for other links
data DeleteAllRevokedChatInviteLinks
DeleteAllRevokedChatInviteLinks :: Maybe Int -> Maybe Int -> DeleteAllRevokedChatInviteLinks

-- | User identifier of a chat administrator, which links will be deleted.
--   Must be an identifier of the current user for non-owner
[creator_user_id] :: DeleteAllRevokedChatInviteLinks -> Maybe Int

-- | Chat identifier
[chat_id] :: DeleteAllRevokedChatInviteLinks -> Maybe Int
instance GHC.Classes.Eq TD.Query.DeleteAllRevokedChatInviteLinks.DeleteAllRevokedChatInviteLinks
instance GHC.Show.Show TD.Query.DeleteAllRevokedChatInviteLinks.DeleteAllRevokedChatInviteLinks
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.DeleteAllRevokedChatInviteLinks.DeleteAllRevokedChatInviteLinks


module TD.Query.DeleteAllCallMessages

-- | Deletes all call messages @revoke Pass true to delete the messages for
--   all users
data DeleteAllCallMessages
DeleteAllCallMessages :: Maybe Bool -> DeleteAllCallMessages

[revoke] :: DeleteAllCallMessages -> Maybe Bool
instance GHC.Classes.Eq TD.Query.DeleteAllCallMessages.DeleteAllCallMessages
instance GHC.Show.Show TD.Query.DeleteAllCallMessages.DeleteAllCallMessages
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.DeleteAllCallMessages.DeleteAllCallMessages


module TD.Query.DeleteAccount

-- | Deletes the account of the current user, deleting all information
--   associated with the user from the server. The phone number of the
--   account can be used to create a new account. Can be called before
--   authorization when the current authorization state is
--   authorizationStateWaitPassword @reason The reason why the account was
--   deleted; optional
data DeleteAccount
DeleteAccount :: Maybe String -> DeleteAccount

[reason] :: DeleteAccount -> Maybe String
instance GHC.Classes.Eq TD.Query.DeleteAccount.DeleteAccount
instance GHC.Show.Show TD.Query.DeleteAccount.DeleteAccount
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.DeleteAccount.DeleteAccount


module TD.Query.CreateVideoChat

-- | Creates a video chat (a group call bound to a chat). Available only
--   for basic groups, supergroups and channels; requires
--   can_manage_video_chats rights
data CreateVideoChat
CreateVideoChat :: Maybe Bool -> Maybe Int -> Maybe String -> Maybe Int -> CreateVideoChat

-- | Pass true to create an RTMP stream instead of an ordinary video chat;
--   requires creator privileges
[is_rtmp_stream] :: CreateVideoChat -> Maybe Bool

-- | Point in time (Unix timestamp) when the group call is supposed to be
--   started by an administrator; 0 to start the video chat immediately.
--   The date must be at least 10 seconds and at most 8 days in the future
[start_date] :: CreateVideoChat -> Maybe Int

-- | Group call title; if empty, chat title will be used
[title] :: CreateVideoChat -> Maybe String

-- | Identifier of a chat in which the video chat will be created
[chat_id] :: CreateVideoChat -> Maybe Int
instance GHC.Classes.Eq TD.Query.CreateVideoChat.CreateVideoChat
instance GHC.Show.Show TD.Query.CreateVideoChat.CreateVideoChat
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.CreateVideoChat.CreateVideoChat


module TD.Query.CreateTemporaryPassword

-- | Creates a new temporary password for processing payments <tt>password
--   Persistent user password </tt>valid_for Time during which the
--   temporary password will be valid, in seconds; must be between 60 and
--   86400
data CreateTemporaryPassword
CreateTemporaryPassword :: Maybe Int -> Maybe String -> CreateTemporaryPassword

[valid_for] :: CreateTemporaryPassword -> Maybe Int

[password] :: CreateTemporaryPassword -> Maybe String
instance GHC.Classes.Eq TD.Query.CreateTemporaryPassword.CreateTemporaryPassword
instance GHC.Show.Show TD.Query.CreateTemporaryPassword.CreateTemporaryPassword
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.CreateTemporaryPassword.CreateTemporaryPassword


module TD.Query.CreateSupergroupChat

-- | Returns an existing chat corresponding to a known supergroup or
--   channel <tt>supergroup_id Supergroup or channel identifier </tt>force
--   Pass true to create the chat without a network request. In this case
--   all information about the chat except its type, title and photo can be
--   incorrect
data CreateSupergroupChat
CreateSupergroupChat :: Maybe Bool -> Maybe Int -> CreateSupergroupChat

[force] :: CreateSupergroupChat -> Maybe Bool

[supergroup_id] :: CreateSupergroupChat -> Maybe Int
instance GHC.Classes.Eq TD.Query.CreateSupergroupChat.CreateSupergroupChat
instance GHC.Show.Show TD.Query.CreateSupergroupChat.CreateSupergroupChat
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.CreateSupergroupChat.CreateSupergroupChat


module TD.Query.CreateSecretChat

-- | Returns an existing chat corresponding to a known secret chat
--   @secret_chat_id Secret chat identifier
data CreateSecretChat
CreateSecretChat :: Maybe Int -> CreateSecretChat

[secret_chat_id] :: CreateSecretChat -> Maybe Int
instance GHC.Classes.Eq TD.Query.CreateSecretChat.CreateSecretChat
instance GHC.Show.Show TD.Query.CreateSecretChat.CreateSecretChat
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.CreateSecretChat.CreateSecretChat


module TD.Query.CreatePrivateChat

-- | Returns an existing chat corresponding to a given user <tt>user_id
--   User identifier </tt>force Pass true to create the chat without a
--   network request. In this case all information about the chat except
--   its type, title and photo can be incorrect
data CreatePrivateChat
CreatePrivateChat :: Maybe Bool -> Maybe Int -> CreatePrivateChat

[force] :: CreatePrivateChat -> Maybe Bool

[user_id] :: CreatePrivateChat -> Maybe Int
instance GHC.Classes.Eq TD.Query.CreatePrivateChat.CreatePrivateChat
instance GHC.Show.Show TD.Query.CreatePrivateChat.CreatePrivateChat
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.CreatePrivateChat.CreatePrivateChat


module TD.Query.CreateNewSecretChat

-- | Creates a new secret chat. Returns the newly created chat @user_id
--   Identifier of the target user
data CreateNewSecretChat
CreateNewSecretChat :: Maybe Int -> CreateNewSecretChat

[user_id] :: CreateNewSecretChat -> Maybe Int
instance GHC.Classes.Eq TD.Query.CreateNewSecretChat.CreateNewSecretChat
instance GHC.Show.Show TD.Query.CreateNewSecretChat.CreateNewSecretChat
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.CreateNewSecretChat.CreateNewSecretChat


module TD.Query.CreateNewBasicGroupChat

-- | Creates a new basic group and sends a corresponding
--   messageBasicGroupChatCreate. Returns the newly created chat
--   <tt>user_ids Identifiers of users to be added to the basic group
--   </tt>title Title of the new basic group; 1-128 characters
data CreateNewBasicGroupChat
CreateNewBasicGroupChat :: Maybe String -> Maybe [Int] -> CreateNewBasicGroupChat

[title] :: CreateNewBasicGroupChat -> Maybe String

[user_ids] :: CreateNewBasicGroupChat -> Maybe [Int]
instance GHC.Classes.Eq TD.Query.CreateNewBasicGroupChat.CreateNewBasicGroupChat
instance GHC.Show.Show TD.Query.CreateNewBasicGroupChat.CreateNewBasicGroupChat
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.CreateNewBasicGroupChat.CreateNewBasicGroupChat


module TD.Query.CreateChatInviteLink

-- | Creates a new invite link for a chat. Available for basic groups,
--   supergroups, and channels. Requires administrator privileges and
--   can_invite_users right in the chat
data CreateChatInviteLink
CreateChatInviteLink :: Maybe Bool -> Maybe Int -> Maybe Int -> Maybe String -> Maybe Int -> CreateChatInviteLink

-- | Pass true if users joining the chat via the link need to be approved
--   by chat administrators. In this case, member_limit must be 0
[creates_join_request] :: CreateChatInviteLink -> Maybe Bool

-- | The maximum number of chat members that can join the chat via the link
--   simultaneously; 0-99999; pass 0 if not limited
[member_limit] :: CreateChatInviteLink -> Maybe Int

-- | Point in time (Unix timestamp) when the link will expire; pass 0 if
--   never
[expiration_date] :: CreateChatInviteLink -> Maybe Int

-- | Invite link name; 0-32 characters
[name] :: CreateChatInviteLink -> Maybe String

-- | Chat identifier
[chat_id] :: CreateChatInviteLink -> Maybe Int
instance GHC.Classes.Eq TD.Query.CreateChatInviteLink.CreateChatInviteLink
instance GHC.Show.Show TD.Query.CreateChatInviteLink.CreateChatInviteLink
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.CreateChatInviteLink.CreateChatInviteLink


module TD.Query.CreateBasicGroupChat

-- | Returns an existing chat corresponding to a known basic group
--   <tt>basic_group_id Basic group identifier </tt>force Pass true to
--   create the chat without a network request. In this case all
--   information about the chat except its type, title and photo can be
--   incorrect
data CreateBasicGroupChat
CreateBasicGroupChat :: Maybe Bool -> Maybe Int -> CreateBasicGroupChat

[force] :: CreateBasicGroupChat -> Maybe Bool

[basic_group_id] :: CreateBasicGroupChat -> Maybe Int
instance GHC.Classes.Eq TD.Query.CreateBasicGroupChat.CreateBasicGroupChat
instance GHC.Show.Show TD.Query.CreateBasicGroupChat.CreateBasicGroupChat
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.CreateBasicGroupChat.CreateBasicGroupChat


module TD.Query.ConfirmQrCodeAuthentication

-- | Confirms QR code authentication on another device. Returns created
--   session on success @link A link from a QR code. The link must be
--   scanned by the in-app camera
data ConfirmQrCodeAuthentication
ConfirmQrCodeAuthentication :: Maybe String -> ConfirmQrCodeAuthentication

[link] :: ConfirmQrCodeAuthentication -> Maybe String
instance GHC.Classes.Eq TD.Query.ConfirmQrCodeAuthentication.ConfirmQrCodeAuthentication
instance GHC.Show.Show TD.Query.ConfirmQrCodeAuthentication.ConfirmQrCodeAuthentication
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ConfirmQrCodeAuthentication.ConfirmQrCodeAuthentication


module TD.Query.CloseWebApp

-- | Informs TDLib that a previously opened Web App was closed
--   @web_app_launch_id Identifier of Web App launch, received from
--   openWebApp
data CloseWebApp
CloseWebApp :: Maybe Int -> CloseWebApp

[web_app_launch_id] :: CloseWebApp -> Maybe Int
instance GHC.Classes.Eq TD.Query.CloseWebApp.CloseWebApp
instance GHC.Show.Show TD.Query.CloseWebApp.CloseWebApp
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.CloseWebApp.CloseWebApp


module TD.Query.CloseSecretChat

-- | Closes a secret chat, effectively transferring its state to
--   secretChatStateClosed @secret_chat_id Secret chat identifier
data CloseSecretChat
CloseSecretChat :: Maybe Int -> CloseSecretChat

[secret_chat_id] :: CloseSecretChat -> Maybe Int
instance GHC.Classes.Eq TD.Query.CloseSecretChat.CloseSecretChat
instance GHC.Show.Show TD.Query.CloseSecretChat.CloseSecretChat
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.CloseSecretChat.CloseSecretChat


module TD.Query.CloseChat

-- | Informs TDLib that the chat is closed by the user. Many useful
--   activities depend on the chat being opened or closed @chat_id Chat
--   identifier
data CloseChat
CloseChat :: Maybe Int -> CloseChat

[chat_id] :: CloseChat -> Maybe Int
instance GHC.Classes.Eq TD.Query.CloseChat.CloseChat
instance GHC.Show.Show TD.Query.CloseChat.CloseChat
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.CloseChat.CloseChat


module TD.Query.Close

-- | Closes the TDLib instance. All databases will be flushed to disk and
--   properly closed. After the close completes, updateAuthorizationState
--   with authorizationStateClosed will be sent. Can be called before
--   initialization
data Close
Close :: Close
instance GHC.Classes.Eq TD.Query.Close.Close
instance GHC.Show.Show TD.Query.Close.Close
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.Close.Close


module TD.Query.ClickPremiumSubscriptionButton

-- | Informs TDLib that the user clicked Premium subscription button on the
--   Premium features screen
data ClickPremiumSubscriptionButton
ClickPremiumSubscriptionButton :: ClickPremiumSubscriptionButton
instance GHC.Classes.Eq TD.Query.ClickPremiumSubscriptionButton.ClickPremiumSubscriptionButton
instance GHC.Show.Show TD.Query.ClickPremiumSubscriptionButton.ClickPremiumSubscriptionButton
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ClickPremiumSubscriptionButton.ClickPremiumSubscriptionButton


module TD.Query.ClickAnimatedEmojiMessage

-- | Informs TDLib that a message with an animated emoji was clicked by the
--   user. Returns a big animated sticker to be played or a 404 error if
--   usual animation needs to be played <tt>chat_id Chat identifier of the
--   message </tt>message_id Identifier of the clicked message
data ClickAnimatedEmojiMessage
ClickAnimatedEmojiMessage :: Maybe Int -> Maybe Int -> ClickAnimatedEmojiMessage

[message_id] :: ClickAnimatedEmojiMessage -> Maybe Int

[chat_id] :: ClickAnimatedEmojiMessage -> Maybe Int
instance GHC.Classes.Eq TD.Query.ClickAnimatedEmojiMessage.ClickAnimatedEmojiMessage
instance GHC.Show.Show TD.Query.ClickAnimatedEmojiMessage.ClickAnimatedEmojiMessage
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ClickAnimatedEmojiMessage.ClickAnimatedEmojiMessage


module TD.Query.ClearRecentlyFoundChats

-- | Clears the list of recently found chats
data ClearRecentlyFoundChats
ClearRecentlyFoundChats :: ClearRecentlyFoundChats
instance GHC.Classes.Eq TD.Query.ClearRecentlyFoundChats.ClearRecentlyFoundChats
instance GHC.Show.Show TD.Query.ClearRecentlyFoundChats.ClearRecentlyFoundChats
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ClearRecentlyFoundChats.ClearRecentlyFoundChats


module TD.Query.ClearRecentStickers

-- | Clears the list of recently used stickers @is_attached Pass true to
--   clear the list of stickers recently attached to photo or video files;
--   pass false to clear the list of recently sent stickers
data ClearRecentStickers
ClearRecentStickers :: Maybe Bool -> ClearRecentStickers

[is_attached] :: ClearRecentStickers -> Maybe Bool
instance GHC.Classes.Eq TD.Query.ClearRecentStickers.ClearRecentStickers
instance GHC.Show.Show TD.Query.ClearRecentStickers.ClearRecentStickers
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ClearRecentStickers.ClearRecentStickers


module TD.Query.ClearImportedContacts

-- | Clears all imported contacts, contact list remains unchanged
data ClearImportedContacts
ClearImportedContacts :: ClearImportedContacts
instance GHC.Classes.Eq TD.Query.ClearImportedContacts.ClearImportedContacts
instance GHC.Show.Show TD.Query.ClearImportedContacts.ClearImportedContacts
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ClearImportedContacts.ClearImportedContacts


module TD.Query.ClearAllDraftMessages

-- | Clears message drafts in all chats @exclude_secret_chats Pass true to
--   keep local message drafts in secret chats
data ClearAllDraftMessages
ClearAllDraftMessages :: Maybe Bool -> ClearAllDraftMessages

[exclude_secret_chats] :: ClearAllDraftMessages -> Maybe Bool
instance GHC.Classes.Eq TD.Query.ClearAllDraftMessages.ClearAllDraftMessages
instance GHC.Show.Show TD.Query.ClearAllDraftMessages.ClearAllDraftMessages
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ClearAllDraftMessages.ClearAllDraftMessages


module TD.Query.CleanFileName

-- | Removes potentially dangerous characters from the name of a file. The
--   encoding of the file name is supposed to be UTF-8. Returns an empty
--   string on failure. Can be called synchronously @file_name File name or
--   path to the file
data CleanFileName
CleanFileName :: Maybe String -> CleanFileName

[file_name] :: CleanFileName -> Maybe String
instance GHC.Classes.Eq TD.Query.CleanFileName.CleanFileName
instance GHC.Show.Show TD.Query.CleanFileName.CleanFileName
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.CleanFileName.CleanFileName


module TD.Query.CheckStickerSetName

-- | Checks whether a name can be used for a new sticker set @name Name to
--   be checked
data CheckStickerSetName
CheckStickerSetName :: Maybe String -> CheckStickerSetName

[name] :: CheckStickerSetName -> Maybe String
instance GHC.Classes.Eq TD.Query.CheckStickerSetName.CheckStickerSetName
instance GHC.Show.Show TD.Query.CheckStickerSetName.CheckStickerSetName
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.CheckStickerSetName.CheckStickerSetName


module TD.Query.CheckRecoveryEmailAddressCode

-- | Checks the 2-step verification recovery email address verification
--   code @code Verification code to check
data CheckRecoveryEmailAddressCode
CheckRecoveryEmailAddressCode :: Maybe String -> CheckRecoveryEmailAddressCode

[code] :: CheckRecoveryEmailAddressCode -> Maybe String
instance GHC.Classes.Eq TD.Query.CheckRecoveryEmailAddressCode.CheckRecoveryEmailAddressCode
instance GHC.Show.Show TD.Query.CheckRecoveryEmailAddressCode.CheckRecoveryEmailAddressCode
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.CheckRecoveryEmailAddressCode.CheckRecoveryEmailAddressCode


module TD.Query.CheckPhoneNumberVerificationCode

-- | Checks the phone number verification code for Telegram Passport @code
--   Verification code to check
data CheckPhoneNumberVerificationCode
CheckPhoneNumberVerificationCode :: Maybe String -> CheckPhoneNumberVerificationCode

[code] :: CheckPhoneNumberVerificationCode -> Maybe String
instance GHC.Classes.Eq TD.Query.CheckPhoneNumberVerificationCode.CheckPhoneNumberVerificationCode
instance GHC.Show.Show TD.Query.CheckPhoneNumberVerificationCode.CheckPhoneNumberVerificationCode
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.CheckPhoneNumberVerificationCode.CheckPhoneNumberVerificationCode


module TD.Query.CheckPhoneNumberConfirmationCode

-- | Checks phone number confirmation code @code Confirmation code to check
data CheckPhoneNumberConfirmationCode
CheckPhoneNumberConfirmationCode :: Maybe String -> CheckPhoneNumberConfirmationCode

[code] :: CheckPhoneNumberConfirmationCode -> Maybe String
instance GHC.Classes.Eq TD.Query.CheckPhoneNumberConfirmationCode.CheckPhoneNumberConfirmationCode
instance GHC.Show.Show TD.Query.CheckPhoneNumberConfirmationCode.CheckPhoneNumberConfirmationCode
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.CheckPhoneNumberConfirmationCode.CheckPhoneNumberConfirmationCode


module TD.Query.CheckPasswordRecoveryCode

-- | Checks whether a 2-step verification password recovery code sent to an
--   email address is valid @recovery_code Recovery code to check
data CheckPasswordRecoveryCode
CheckPasswordRecoveryCode :: Maybe String -> CheckPasswordRecoveryCode

[recovery_code] :: CheckPasswordRecoveryCode -> Maybe String
instance GHC.Classes.Eq TD.Query.CheckPasswordRecoveryCode.CheckPasswordRecoveryCode
instance GHC.Show.Show TD.Query.CheckPasswordRecoveryCode.CheckPasswordRecoveryCode
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.CheckPasswordRecoveryCode.CheckPasswordRecoveryCode


module TD.Query.CheckEmailAddressVerificationCode

-- | Checks the email address verification code for Telegram Passport @code
--   Verification code to check
data CheckEmailAddressVerificationCode
CheckEmailAddressVerificationCode :: Maybe String -> CheckEmailAddressVerificationCode

[code] :: CheckEmailAddressVerificationCode -> Maybe String
instance GHC.Classes.Eq TD.Query.CheckEmailAddressVerificationCode.CheckEmailAddressVerificationCode
instance GHC.Show.Show TD.Query.CheckEmailAddressVerificationCode.CheckEmailAddressVerificationCode
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.CheckEmailAddressVerificationCode.CheckEmailAddressVerificationCode


module TD.Query.CheckDatabaseEncryptionKey

-- | Checks the database encryption key for correctness. Works only when
--   the current authorization state is authorizationStateWaitEncryptionKey
--   @encryption_key Encryption key to check or set up
data CheckDatabaseEncryptionKey
CheckDatabaseEncryptionKey :: Maybe String -> CheckDatabaseEncryptionKey

[encryption_key] :: CheckDatabaseEncryptionKey -> Maybe String
instance GHC.Classes.Eq TD.Query.CheckDatabaseEncryptionKey.CheckDatabaseEncryptionKey
instance GHC.Show.Show TD.Query.CheckDatabaseEncryptionKey.CheckDatabaseEncryptionKey
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.CheckDatabaseEncryptionKey.CheckDatabaseEncryptionKey


module TD.Query.CheckChatUsername

-- | Checks whether a username can be set for a chat <tt>chat_id Chat
--   identifier; must be identifier of a supergroup chat, or a channel
--   chat, or a private chat with self, or zero if the chat is being
--   created </tt>username Username to be checked
data CheckChatUsername
CheckChatUsername :: Maybe String -> Maybe Int -> CheckChatUsername

[username] :: CheckChatUsername -> Maybe String

[chat_id] :: CheckChatUsername -> Maybe Int
instance GHC.Classes.Eq TD.Query.CheckChatUsername.CheckChatUsername
instance GHC.Show.Show TD.Query.CheckChatUsername.CheckChatUsername
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.CheckChatUsername.CheckChatUsername


module TD.Query.CheckChatInviteLink

-- | Checks the validity of an invite link for a chat and returns
--   information about the corresponding chat @invite_link Invite link to
--   be checked
data CheckChatInviteLink
CheckChatInviteLink :: Maybe String -> CheckChatInviteLink

[invite_link] :: CheckChatInviteLink -> Maybe String
instance GHC.Classes.Eq TD.Query.CheckChatInviteLink.CheckChatInviteLink
instance GHC.Show.Show TD.Query.CheckChatInviteLink.CheckChatInviteLink
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.CheckChatInviteLink.CheckChatInviteLink


module TD.Query.CheckChangePhoneNumberCode

-- | Checks the authentication code sent to confirm a new phone number of
--   the user @code Authentication code to check
data CheckChangePhoneNumberCode
CheckChangePhoneNumberCode :: Maybe String -> CheckChangePhoneNumberCode

[code] :: CheckChangePhoneNumberCode -> Maybe String
instance GHC.Classes.Eq TD.Query.CheckChangePhoneNumberCode.CheckChangePhoneNumberCode
instance GHC.Show.Show TD.Query.CheckChangePhoneNumberCode.CheckChangePhoneNumberCode
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.CheckChangePhoneNumberCode.CheckChangePhoneNumberCode


module TD.Query.CheckAuthenticationPasswordRecoveryCode

-- | Checks whether a password recovery code sent to an email address is
--   valid. Works only when the current authorization state is
--   authorizationStateWaitPassword @recovery_code Recovery code to check
data CheckAuthenticationPasswordRecoveryCode
CheckAuthenticationPasswordRecoveryCode :: Maybe String -> CheckAuthenticationPasswordRecoveryCode

[recovery_code] :: CheckAuthenticationPasswordRecoveryCode -> Maybe String
instance GHC.Classes.Eq TD.Query.CheckAuthenticationPasswordRecoveryCode.CheckAuthenticationPasswordRecoveryCode
instance GHC.Show.Show TD.Query.CheckAuthenticationPasswordRecoveryCode.CheckAuthenticationPasswordRecoveryCode
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.CheckAuthenticationPasswordRecoveryCode.CheckAuthenticationPasswordRecoveryCode


module TD.Query.CheckAuthenticationPassword

-- | Checks the authentication password for correctness. Works only when
--   the current authorization state is authorizationStateWaitPassword
--   @password The password to check
data CheckAuthenticationPassword
CheckAuthenticationPassword :: Maybe String -> CheckAuthenticationPassword

[password] :: CheckAuthenticationPassword -> Maybe String
instance GHC.Classes.Eq TD.Query.CheckAuthenticationPassword.CheckAuthenticationPassword
instance GHC.Show.Show TD.Query.CheckAuthenticationPassword.CheckAuthenticationPassword
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.CheckAuthenticationPassword.CheckAuthenticationPassword


module TD.Query.CheckAuthenticationCode

-- | Checks the authentication code. Works only when the current
--   authorization state is authorizationStateWaitCode @code Authentication
--   code to check
data CheckAuthenticationCode
CheckAuthenticationCode :: Maybe String -> CheckAuthenticationCode

[code] :: CheckAuthenticationCode -> Maybe String
instance GHC.Classes.Eq TD.Query.CheckAuthenticationCode.CheckAuthenticationCode
instance GHC.Show.Show TD.Query.CheckAuthenticationCode.CheckAuthenticationCode
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.CheckAuthenticationCode.CheckAuthenticationCode


module TD.Query.CheckAuthenticationBotToken

-- | Checks the authentication token of a bot; to log in as a bot. Works
--   only when the current authorization state is
--   authorizationStateWaitPhoneNumber. Can be used instead of
--   setAuthenticationPhoneNumber and checkAuthenticationCode to log in
--   @token The bot token
data CheckAuthenticationBotToken
CheckAuthenticationBotToken :: Maybe String -> CheckAuthenticationBotToken

[token] :: CheckAuthenticationBotToken -> Maybe String
instance GHC.Classes.Eq TD.Query.CheckAuthenticationBotToken.CheckAuthenticationBotToken
instance GHC.Show.Show TD.Query.CheckAuthenticationBotToken.CheckAuthenticationBotToken
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.CheckAuthenticationBotToken.CheckAuthenticationBotToken


module TD.Query.ChangeStickerSet

-- | Installs<i>uninstalls or activates</i>archives a sticker set
--   <tt>set_id Identifier of the sticker set </tt>is_installed The new
--   value of is_installed @is_archived The new value of is_archived. A
--   sticker set can't be installed and archived simultaneously
data ChangeStickerSet
ChangeStickerSet :: Maybe Bool -> Maybe Bool -> Maybe Int -> ChangeStickerSet

[is_archived] :: ChangeStickerSet -> Maybe Bool

[is_installed] :: ChangeStickerSet -> Maybe Bool

[set_id] :: ChangeStickerSet -> Maybe Int
instance GHC.Classes.Eq TD.Query.ChangeStickerSet.ChangeStickerSet
instance GHC.Show.Show TD.Query.ChangeStickerSet.ChangeStickerSet
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ChangeStickerSet.ChangeStickerSet


module TD.Query.CancelUploadFile

-- | Stops the uploading of a file. Supported only for files uploaded by
--   using uploadFile. For other files the behavior is undefined @file_id
--   Identifier of the file to stop uploading
data CancelUploadFile
CancelUploadFile :: Maybe Int -> CancelUploadFile

[file_id] :: CancelUploadFile -> Maybe Int
instance GHC.Classes.Eq TD.Query.CancelUploadFile.CancelUploadFile
instance GHC.Show.Show TD.Query.CancelUploadFile.CancelUploadFile
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.CancelUploadFile.CancelUploadFile


module TD.Query.CancelPasswordReset

-- | Cancels reset of 2-step verification password. The method can be
--   called if passwordState.pending_reset_date &gt; 0
data CancelPasswordReset
CancelPasswordReset :: CancelPasswordReset
instance GHC.Classes.Eq TD.Query.CancelPasswordReset.CancelPasswordReset
instance GHC.Show.Show TD.Query.CancelPasswordReset.CancelPasswordReset
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.CancelPasswordReset.CancelPasswordReset


module TD.Query.CancelDownloadFile

-- | Stops the downloading of a file. If a file has already been
--   downloaded, does nothing <tt>file_id Identifier of a file to stop
--   downloading </tt>only_if_pending Pass true to stop downloading only if
--   it hasn't been started, i.e. request hasn't been sent to server
data CancelDownloadFile
CancelDownloadFile :: Maybe Bool -> Maybe Int -> CancelDownloadFile

[only_if_pending] :: CancelDownloadFile -> Maybe Bool

[file_id] :: CancelDownloadFile -> Maybe Int
instance GHC.Classes.Eq TD.Query.CancelDownloadFile.CancelDownloadFile
instance GHC.Show.Show TD.Query.CancelDownloadFile.CancelDownloadFile
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.CancelDownloadFile.CancelDownloadFile


module TD.Query.CanTransferOwnership

-- | Checks whether the current session can be used to transfer a chat
--   ownership to another user
data CanTransferOwnership
CanTransferOwnership :: CanTransferOwnership
instance GHC.Classes.Eq TD.Query.CanTransferOwnership.CanTransferOwnership
instance GHC.Show.Show TD.Query.CanTransferOwnership.CanTransferOwnership
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.CanTransferOwnership.CanTransferOwnership


module TD.Query.CanPurchasePremium

-- | Checks whether Telegram Premium purchase is possible. Must be called
--   before in-store Premium purchase
data CanPurchasePremium
CanPurchasePremium :: CanPurchasePremium
instance GHC.Classes.Eq TD.Query.CanPurchasePremium.CanPurchasePremium
instance GHC.Show.Show TD.Query.CanPurchasePremium.CanPurchasePremium
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.CanPurchasePremium.CanPurchasePremium


module TD.Query.BlockMessageSenderFromReplies

-- | Blocks an original sender of a message in the Replies chat
data BlockMessageSenderFromReplies
BlockMessageSenderFromReplies :: Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Int -> BlockMessageSenderFromReplies

-- | Pass true to report the sender to the Telegram moderators
[report_spam] :: BlockMessageSenderFromReplies -> Maybe Bool

-- | Pass true to delete all messages from the same sender
[delete_all_messages] :: BlockMessageSenderFromReplies -> Maybe Bool

-- | Pass true to delete the message
[delete_message] :: BlockMessageSenderFromReplies -> Maybe Bool

-- | The identifier of an incoming message in the Replies chat
[message_id] :: BlockMessageSenderFromReplies -> Maybe Int
instance GHC.Classes.Eq TD.Query.BlockMessageSenderFromReplies.BlockMessageSenderFromReplies
instance GHC.Show.Show TD.Query.BlockMessageSenderFromReplies.BlockMessageSenderFromReplies
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.BlockMessageSenderFromReplies.BlockMessageSenderFromReplies


module TD.Query.AssignGooglePlayTransaction

-- | Informs server about a Telegram Premium purchase through Google Play.
--   For official applications only @purchase_token Google Play purchase
--   token
data AssignGooglePlayTransaction
AssignGooglePlayTransaction :: Maybe String -> AssignGooglePlayTransaction

[purchase_token] :: AssignGooglePlayTransaction -> Maybe String
instance GHC.Classes.Eq TD.Query.AssignGooglePlayTransaction.AssignGooglePlayTransaction
instance GHC.Show.Show TD.Query.AssignGooglePlayTransaction.AssignGooglePlayTransaction
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.AssignGooglePlayTransaction.AssignGooglePlayTransaction


module TD.Query.AssignAppStoreTransaction

-- | Informs server about a Telegram Premium purchase through App Store.
--   For official applications only <tt>receipt App Store receipt
--   </tt>is_restore Pass true if this is a restore of a Telegram Premium
--   purchase
data AssignAppStoreTransaction
AssignAppStoreTransaction :: Maybe Bool -> Maybe String -> AssignAppStoreTransaction

[is_restore] :: AssignAppStoreTransaction -> Maybe Bool

[receipt] :: AssignAppStoreTransaction -> Maybe String
instance GHC.Classes.Eq TD.Query.AssignAppStoreTransaction.AssignAppStoreTransaction
instance GHC.Show.Show TD.Query.AssignAppStoreTransaction.AssignAppStoreTransaction
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.AssignAppStoreTransaction.AssignAppStoreTransaction


module TD.Query.AnswerPreCheckoutQuery

-- | Sets the result of a pre-checkout query; for bots only
--   <tt>pre_checkout_query_id Identifier of the pre-checkout query
--   </tt>error_message An error message, empty on success
data AnswerPreCheckoutQuery
AnswerPreCheckoutQuery :: Maybe String -> Maybe Int -> AnswerPreCheckoutQuery

[error_message] :: AnswerPreCheckoutQuery -> Maybe String

[pre_checkout_query_id] :: AnswerPreCheckoutQuery -> Maybe Int
instance GHC.Classes.Eq TD.Query.AnswerPreCheckoutQuery.AnswerPreCheckoutQuery
instance GHC.Show.Show TD.Query.AnswerPreCheckoutQuery.AnswerPreCheckoutQuery
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.AnswerPreCheckoutQuery.AnswerPreCheckoutQuery


module TD.Query.AnswerCustomQuery

-- | Answers a custom query; for bots only <tt>custom_query_id Identifier
--   of a custom query </tt>data JSON-serialized answer to the query
data AnswerCustomQuery
AnswerCustomQuery :: Maybe String -> Maybe Int -> AnswerCustomQuery

[_data] :: AnswerCustomQuery -> Maybe String

[custom_query_id] :: AnswerCustomQuery -> Maybe Int
instance GHC.Classes.Eq TD.Query.AnswerCustomQuery.AnswerCustomQuery
instance GHC.Show.Show TD.Query.AnswerCustomQuery.AnswerCustomQuery
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.AnswerCustomQuery.AnswerCustomQuery


module TD.Query.AnswerCallbackQuery

-- | Sets the result of a callback query; for bots only
--   <tt>callback_query_id Identifier of the callback query </tt>text Text
--   of the answer <tt>show_alert Pass true to show an alert to the user
--   instead of a toast notification </tt>url URL to be opened @cache_time
--   Time during which the result of the query can be cached, in seconds
data AnswerCallbackQuery
AnswerCallbackQuery :: Maybe Int -> Maybe String -> Maybe Bool -> Maybe String -> Maybe Int -> AnswerCallbackQuery

[cache_time] :: AnswerCallbackQuery -> Maybe Int

[url] :: AnswerCallbackQuery -> Maybe String

[show_alert] :: AnswerCallbackQuery -> Maybe Bool

[text] :: AnswerCallbackQuery -> Maybe String

[callback_query_id] :: AnswerCallbackQuery -> Maybe Int
instance GHC.Classes.Eq TD.Query.AnswerCallbackQuery.AnswerCallbackQuery
instance GHC.Show.Show TD.Query.AnswerCallbackQuery.AnswerCallbackQuery
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.AnswerCallbackQuery.AnswerCallbackQuery


module TD.Query.AddRecentlyFoundChat

-- | Adds a chat to the list of recently found chats. The chat is added to
--   the beginning of the list. If the chat is already in the list, it will
--   be removed from the list first @chat_id Identifier of the chat to add
data AddRecentlyFoundChat
AddRecentlyFoundChat :: Maybe Int -> AddRecentlyFoundChat

[chat_id] :: AddRecentlyFoundChat -> Maybe Int
instance GHC.Classes.Eq TD.Query.AddRecentlyFoundChat.AddRecentlyFoundChat
instance GHC.Show.Show TD.Query.AddRecentlyFoundChat.AddRecentlyFoundChat
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.AddRecentlyFoundChat.AddRecentlyFoundChat


module TD.Query.AddLogMessage

-- | Adds a message to TDLib internal log. Can be called synchronously
data AddLogMessage
AddLogMessage :: Maybe String -> Maybe Int -> AddLogMessage

[text] :: AddLogMessage -> Maybe String

-- | The minimum verbosity level needed for the message to be logged;
--   0-1023 @text Text of a message to log
[verbosity_level] :: AddLogMessage -> Maybe Int
instance GHC.Classes.Eq TD.Query.AddLogMessage.AddLogMessage
instance GHC.Show.Show TD.Query.AddLogMessage.AddLogMessage
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.AddLogMessage.AddLogMessage


module TD.Query.AddFileToDownloads

-- | Adds a file from a message to the list of file downloads. Download
--   progress and completion of the download will be notified through
--   updateFile updates. If message database is used, the list of file
--   downloads is persistent across application restarts. The downloading
--   is independent from download using downloadFile, i.e. it continues if
--   downloadFile is canceled or is used to download a part of the file
data AddFileToDownloads
AddFileToDownloads :: Maybe Int -> Maybe Int -> Maybe Int -> Maybe Int -> AddFileToDownloads

-- | Priority of the download (1-32). The higher the priority, the earlier
--   the file will be downloaded. If the priorities of two files are equal,
--   then the last one for which downloadFile/addFileToDownloads was called
--   will be downloaded first
[priority] :: AddFileToDownloads -> Maybe Int

-- | Message identifier
[message_id] :: AddFileToDownloads -> Maybe Int

-- | Chat identifier of the message with the file
[chat_id] :: AddFileToDownloads -> Maybe Int

-- | Identifier of the file to download
[file_id] :: AddFileToDownloads -> Maybe Int
instance GHC.Classes.Eq TD.Query.AddFileToDownloads.AddFileToDownloads
instance GHC.Show.Show TD.Query.AddFileToDownloads.AddFileToDownloads
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.AddFileToDownloads.AddFileToDownloads


module TD.Query.AddCustomServerLanguagePack

-- | Adds a custom server language pack to the list of installed language
--   packs in current localization target. Can be called before
--   authorization @language_pack_id Identifier of a language pack to be
--   added; may be different from a name that is used in an
--   "<a>https://t.me/setlanguage/"</a> link
data AddCustomServerLanguagePack
AddCustomServerLanguagePack :: Maybe String -> AddCustomServerLanguagePack

[language_pack_id] :: AddCustomServerLanguagePack -> Maybe String
instance GHC.Classes.Eq TD.Query.AddCustomServerLanguagePack.AddCustomServerLanguagePack
instance GHC.Show.Show TD.Query.AddCustomServerLanguagePack.AddCustomServerLanguagePack
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.AddCustomServerLanguagePack.AddCustomServerLanguagePack


module TD.Query.AddChatMembers

-- | Adds multiple new members to a chat. Currently, this method is only
--   available for supergroups and channels. This method can't be used to
--   join a chat. Members can't be added to a channel if it has more than
--   200 members
data AddChatMembers
AddChatMembers :: Maybe [Int] -> Maybe Int -> AddChatMembers

[user_ids] :: AddChatMembers -> Maybe [Int]

-- | Chat identifier @user_ids Identifiers of the users to be added to the
--   chat. The maximum number of added users is 20 for supergroups and 100
--   for channels
[chat_id] :: AddChatMembers -> Maybe Int
instance GHC.Classes.Eq TD.Query.AddChatMembers.AddChatMembers
instance GHC.Show.Show TD.Query.AddChatMembers.AddChatMembers
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.AddChatMembers.AddChatMembers


module TD.Query.AddChatMember

-- | Adds a new member to a chat. Members can't be added to private or
--   secret chats
data AddChatMember
AddChatMember :: Maybe Int -> Maybe Int -> Maybe Int -> AddChatMember

[forward_limit] :: AddChatMember -> Maybe Int

[user_id] :: AddChatMember -> Maybe Int

-- | Chat identifier <tt>user_id Identifier of the user </tt>forward_limit
--   The number of earlier messages from the chat to be forwarded to the
--   new member; up to 100. Ignored for supergroups and channels, or if the
--   added user is a bot
[chat_id] :: AddChatMember -> Maybe Int
instance GHC.Classes.Eq TD.Query.AddChatMember.AddChatMember
instance GHC.Show.Show TD.Query.AddChatMember.AddChatMember
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.AddChatMember.AddChatMember


module TD.Query.AcceptTermsOfService

-- | Accepts Telegram terms of services @terms_of_service_id Terms of
--   service identifier
data AcceptTermsOfService
AcceptTermsOfService :: Maybe String -> AcceptTermsOfService

[terms_of_service_id] :: AcceptTermsOfService -> Maybe String
instance GHC.Classes.Eq TD.Query.AcceptTermsOfService.AcceptTermsOfService
instance GHC.Show.Show TD.Query.AcceptTermsOfService.AcceptTermsOfService
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.AcceptTermsOfService.AcceptTermsOfService


module TD.Data.WebAppInfo

data WebAppInfo

-- | Contains information about a Web App <tt>launch_id Unique identifier
--   for the Web App launch </tt>url A Web App URL to open in a web view
WebAppInfo :: Maybe String -> Maybe Int -> WebAppInfo

[url] :: WebAppInfo -> Maybe String

[launch_id] :: WebAppInfo -> Maybe Int
instance GHC.Classes.Eq TD.Data.WebAppInfo.WebAppInfo
instance GHC.Show.Show TD.Data.WebAppInfo.WebAppInfo
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.WebAppInfo.WebAppInfo
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.WebAppInfo.WebAppInfo


module TD.Data.Users

data Users

-- | Represents a list of users <tt>total_count Approximate total number of
--   users found </tt>user_ids A list of user identifiers
Users :: Maybe [Int] -> Maybe Int -> Users

[user_ids] :: Users -> Maybe [Int]

[total_count] :: Users -> Maybe Int
instance GHC.Classes.Eq TD.Data.Users.Users
instance GHC.Show.Show TD.Data.Users.Users
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.Users.Users
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.Users.Users


module TD.Data.UserType

-- | Represents the type of a user. The following types are possible:
--   regular users, deleted users and bots
data UserType

-- | A regular user
UserTypeRegular :: UserType

-- | A deleted user or deleted bot. No information on the user besides the
--   user identifier is available. It is not possible to perform any active
--   actions on this type of user
UserTypeDeleted :: UserType

-- | A bot (see <a>https://core.telegram.org/bots)</a>
UserTypeBot :: Maybe Bool -> Maybe Bool -> Maybe String -> Maybe Bool -> Maybe Bool -> Maybe Bool -> UserType

-- | True, if the bot can be added to attachment menu
[can_be_added_to_attachment_menu] :: UserType -> Maybe Bool

-- | True, if the location of the user is expected to be sent with every
--   inline query to this bot
[need_location] :: UserType -> Maybe Bool

-- | Placeholder for inline queries (displayed on the application input
--   field)
[inline_query_placeholder] :: UserType -> Maybe String

-- | True, if the bot supports inline queries
[is_inline] :: UserType -> Maybe Bool

-- | True, if the bot can read all messages in basic group or supergroup
--   chats and not just those addressed to the bot. In private and channel
--   chats a bot can always read all messages
[can_read_all_group_messages] :: UserType -> Maybe Bool

-- | True, if the bot can be invited to basic group and supergroup chats
[can_join_groups] :: UserType -> Maybe Bool

-- | No information on the user besides the user identifier is available,
--   yet this user has not been deleted. This object is extremely rare and
--   must be handled like a deleted user. It is not possible to perform any
--   actions on users of this type
UserTypeUnknown :: UserType
instance GHC.Classes.Eq TD.Data.UserType.UserType
instance GHC.Show.Show TD.Data.UserType.UserType
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.UserType.UserType
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.UserType.UserType


module TD.Data.UserStatus

-- | Describes the last time the user was online
data UserStatus

-- | The user status was never changed
UserStatusEmpty :: UserStatus

-- | The user is online @expires Point in time (Unix timestamp) when the
--   user's online status will expire
UserStatusOnline :: Maybe Int -> UserStatus

[expires] :: UserStatus -> Maybe Int

-- | The user is offline @was_online Point in time (Unix timestamp) when
--   the user was last online
UserStatusOffline :: Maybe Int -> UserStatus

[was_online] :: UserStatus -> Maybe Int

-- | The user was online recently
UserStatusRecently :: UserStatus

-- | The user is offline, but was online last week
UserStatusLastWeek :: UserStatus

-- | The user is offline, but was online last month
UserStatusLastMonth :: UserStatus
instance GHC.Classes.Eq TD.Data.UserStatus.UserStatus
instance GHC.Show.Show TD.Data.UserStatus.UserStatus
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.UserStatus.UserStatus
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.UserStatus.UserStatus


module TD.Data.UserPrivacySettingRule

-- | Represents a single rule for managing privacy settings
data UserPrivacySettingRule

-- | A rule to allow all users to do something
UserPrivacySettingRuleAllowAll :: UserPrivacySettingRule

-- | A rule to allow all of a user's contacts to do something
UserPrivacySettingRuleAllowContacts :: UserPrivacySettingRule

-- | A rule to allow certain specified users to do something @user_ids The
--   user identifiers, total number of users in all rules must not exceed
--   1000
UserPrivacySettingRuleAllowUsers :: Maybe [Int] -> UserPrivacySettingRule

[user_ids] :: UserPrivacySettingRule -> Maybe [Int]

-- | A rule to allow all members of certain specified basic groups and
--   supergroups to doing something @chat_ids The chat identifiers, total
--   number of chats in all rules must not exceed 20
UserPrivacySettingRuleAllowChatMembers :: Maybe [Int] -> UserPrivacySettingRule

[chat_ids] :: UserPrivacySettingRule -> Maybe [Int]

-- | A rule to restrict all users from doing something
UserPrivacySettingRuleRestrictAll :: UserPrivacySettingRule

-- | A rule to restrict all contacts of a user from doing something
UserPrivacySettingRuleRestrictContacts :: UserPrivacySettingRule

-- | A rule to restrict all specified users from doing something @user_ids
--   The user identifiers, total number of users in all rules must not
--   exceed 1000
UserPrivacySettingRuleRestrictUsers :: Maybe [Int] -> UserPrivacySettingRule

[user_ids] :: UserPrivacySettingRule -> Maybe [Int]

-- | A rule to restrict all members of specified basic groups and
--   supergroups from doing something @chat_ids The chat identifiers, total
--   number of chats in all rules must not exceed 20
UserPrivacySettingRuleRestrictChatMembers :: Maybe [Int] -> UserPrivacySettingRule

[chat_ids] :: UserPrivacySettingRule -> Maybe [Int]
instance GHC.Classes.Eq TD.Data.UserPrivacySettingRule.UserPrivacySettingRule
instance GHC.Show.Show TD.Data.UserPrivacySettingRule.UserPrivacySettingRule
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.UserPrivacySettingRule.UserPrivacySettingRule
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.UserPrivacySettingRule.UserPrivacySettingRule


module TD.Data.UserPrivacySettingRules

data UserPrivacySettingRules

-- | A list of privacy rules. Rules are matched in the specified order. The
--   first matched rule defines the privacy setting for a given user. If no
--   rule matches, the action is not allowed @rules A list of rules
UserPrivacySettingRules :: Maybe [UserPrivacySettingRule] -> UserPrivacySettingRules

[rules] :: UserPrivacySettingRules -> Maybe [UserPrivacySettingRule]
instance GHC.Classes.Eq TD.Data.UserPrivacySettingRules.UserPrivacySettingRules
instance GHC.Show.Show TD.Data.UserPrivacySettingRules.UserPrivacySettingRules
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.UserPrivacySettingRules.UserPrivacySettingRules
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.UserPrivacySettingRules.UserPrivacySettingRules


module TD.Data.UserPrivacySetting

-- | Describes available user privacy settings
data UserPrivacySetting

-- | A privacy setting for managing whether the user's online status is
--   visible
UserPrivacySettingShowStatus :: UserPrivacySetting

-- | A privacy setting for managing whether the user's profile photo is
--   visible
UserPrivacySettingShowProfilePhoto :: UserPrivacySetting

-- | A privacy setting for managing whether a link to the user's account is
--   included in forwarded messages
UserPrivacySettingShowLinkInForwardedMessages :: UserPrivacySetting

-- | A privacy setting for managing whether the user's phone number is
--   visible
UserPrivacySettingShowPhoneNumber :: UserPrivacySetting

-- | A privacy setting for managing whether the user can be invited to
--   chats
UserPrivacySettingAllowChatInvites :: UserPrivacySetting

-- | A privacy setting for managing whether the user can be called
UserPrivacySettingAllowCalls :: UserPrivacySetting

-- | A privacy setting for managing whether peer-to-peer connections can be
--   used for calls
UserPrivacySettingAllowPeerToPeerCalls :: UserPrivacySetting

-- | A privacy setting for managing whether the user can be found by their
--   phone number. Checked only if the phone number is not known to the
--   other user. Can be set only to "Allow contacts" or "Allow all"
UserPrivacySettingAllowFindingByPhoneNumber :: UserPrivacySetting
instance GHC.Classes.Eq TD.Data.UserPrivacySetting.UserPrivacySetting
instance GHC.Show.Show TD.Data.UserPrivacySetting.UserPrivacySetting
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.UserPrivacySetting.UserPrivacySetting
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.UserPrivacySetting.UserPrivacySetting


module TD.Query.SetUserPrivacySettingRules

-- | Changes user privacy settings <tt>setting The privacy setting
--   </tt>rules The new privacy rules
data SetUserPrivacySettingRules
SetUserPrivacySettingRules :: Maybe UserPrivacySettingRules -> Maybe UserPrivacySetting -> SetUserPrivacySettingRules

[rules] :: SetUserPrivacySettingRules -> Maybe UserPrivacySettingRules

[setting] :: SetUserPrivacySettingRules -> Maybe UserPrivacySetting
instance GHC.Classes.Eq TD.Query.SetUserPrivacySettingRules.SetUserPrivacySettingRules
instance GHC.Show.Show TD.Query.SetUserPrivacySettingRules.SetUserPrivacySettingRules
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SetUserPrivacySettingRules.SetUserPrivacySettingRules


module TD.Query.GetUserPrivacySettingRules

-- | Returns the current privacy settings @setting The privacy setting
data GetUserPrivacySettingRules
GetUserPrivacySettingRules :: Maybe UserPrivacySetting -> GetUserPrivacySettingRules

[setting] :: GetUserPrivacySettingRules -> Maybe UserPrivacySetting
instance GHC.Classes.Eq TD.Query.GetUserPrivacySettingRules.GetUserPrivacySettingRules
instance GHC.Show.Show TD.Query.GetUserPrivacySettingRules.GetUserPrivacySettingRules
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetUserPrivacySettingRules.GetUserPrivacySettingRules


module TD.Data.TopChatCategory

-- | Represents the categories of chats for which a list of frequently used
--   chats can be retrieved
data TopChatCategory

-- | A category containing frequently used private chats with non-bot users
TopChatCategoryUsers :: TopChatCategory

-- | A category containing frequently used private chats with bot users
TopChatCategoryBots :: TopChatCategory

-- | A category containing frequently used basic groups and supergroups
TopChatCategoryGroups :: TopChatCategory

-- | A category containing frequently used channels
TopChatCategoryChannels :: TopChatCategory

-- | A category containing frequently used chats with inline bots sorted by
--   their usage in inline mode
TopChatCategoryInlineBots :: TopChatCategory

-- | A category containing frequently used chats used for calls
TopChatCategoryCalls :: TopChatCategory

-- | A category containing frequently used chats used to forward messages
TopChatCategoryForwardChats :: TopChatCategory
instance GHC.Classes.Eq TD.Data.TopChatCategory.TopChatCategory
instance GHC.Show.Show TD.Data.TopChatCategory.TopChatCategory
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.TopChatCategory.TopChatCategory
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.TopChatCategory.TopChatCategory


module TD.Query.RemoveTopChat

-- | Removes a chat from the list of frequently used chats. Supported only
--   if the chat info database is enabled <tt>category Category of
--   frequently used chats </tt>chat_id Chat identifier
data RemoveTopChat
RemoveTopChat :: Maybe Int -> Maybe TopChatCategory -> RemoveTopChat

[chat_id] :: RemoveTopChat -> Maybe Int

[category] :: RemoveTopChat -> Maybe TopChatCategory
instance GHC.Classes.Eq TD.Query.RemoveTopChat.RemoveTopChat
instance GHC.Show.Show TD.Query.RemoveTopChat.RemoveTopChat
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.RemoveTopChat.RemoveTopChat


module TD.Query.GetTopChats

-- | Returns a list of frequently used chats. Supported only if the chat
--   info database is enabled <tt>category Category of chats to be returned
--   </tt>limit The maximum number of chats to be returned; up to 30
data GetTopChats
GetTopChats :: Maybe Int -> Maybe TopChatCategory -> GetTopChats

[limit] :: GetTopChats -> Maybe Int

[category] :: GetTopChats -> Maybe TopChatCategory
instance GHC.Classes.Eq TD.Query.GetTopChats.GetTopChats
instance GHC.Show.Show TD.Query.GetTopChats.GetTopChats
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetTopChats.GetTopChats


module TD.Data.ThumbnailFormat

-- | Describes format of a thumbnail
data ThumbnailFormat

-- | The thumbnail is in JPEG format
ThumbnailFormatJpeg :: ThumbnailFormat

-- | The thumbnail is in static GIF format. It will be used only for some
--   bot inline results
ThumbnailFormatGif :: ThumbnailFormat

-- | The thumbnail is in MPEG4 format. It will be used only for some
--   animations and videos
ThumbnailFormatMpeg4 :: ThumbnailFormat

-- | The thumbnail is in PNG format. It will be used only for background
--   patterns
ThumbnailFormatPng :: ThumbnailFormat

-- | The thumbnail is in TGS format. It will be used only for TGS sticker
--   sets
ThumbnailFormatTgs :: ThumbnailFormat

-- | The thumbnail is in WEBM format. It will be used only for WEBM sticker
--   sets
ThumbnailFormatWebm :: ThumbnailFormat

-- | The thumbnail is in WEBP format. It will be used only for some
--   stickers
ThumbnailFormatWebp :: ThumbnailFormat
instance GHC.Classes.Eq TD.Data.ThumbnailFormat.ThumbnailFormat
instance GHC.Show.Show TD.Data.ThumbnailFormat.ThumbnailFormat
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.ThumbnailFormat.ThumbnailFormat
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.ThumbnailFormat.ThumbnailFormat


module TD.Data.ThemeParameters

data ThemeParameters

-- | Contains parameters of the application theme <tt>background_color A
--   color of the background in the RGB24 format
--   </tt>secondary_background_color A secondary color for the background
--   in the RGB24 format
ThemeParameters :: Maybe Int -> Maybe Int -> Maybe Int -> Maybe Int -> Maybe Int -> Maybe Int -> Maybe Int -> ThemeParameters

-- | A color of text on the buttons in the RGB24 format
[button_text_color] :: ThemeParameters -> Maybe Int

[button_color] :: ThemeParameters -> Maybe Int

[link_color] :: ThemeParameters -> Maybe Int

[hint_color] :: ThemeParameters -> Maybe Int

-- | A color of text in the RGB24 format <tt>hint_color A color of hints in
--   the RGB24 format </tt>link_color A color of links in the RGB24 format
--   @button_color A color of the buttons in the RGB24 format
[text_color] :: ThemeParameters -> Maybe Int

[secondary_background_color] :: ThemeParameters -> Maybe Int

[background_color] :: ThemeParameters -> Maybe Int
instance GHC.Classes.Eq TD.Data.ThemeParameters.ThemeParameters
instance GHC.Show.Show TD.Data.ThemeParameters.ThemeParameters
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.ThemeParameters.ThemeParameters
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.ThemeParameters.ThemeParameters


module TD.Query.OpenWebApp

-- | Informs TDLib that a Web App is being opened from attachment menu, a
--   botMenuButton button, an internalLinkTypeAttachmentMenuBot link, or an
--   inlineKeyboardButtonTypeWebApp button. For each bot, a confirmation
--   alert about data sent to the bot must be shown once
data OpenWebApp
OpenWebApp :: Maybe Int -> Maybe ThemeParameters -> Maybe String -> Maybe Int -> Maybe Int -> OpenWebApp

-- | Identifier of the replied message for the message sent by the Web App;
--   0 if none
[reply_to_message_id] :: OpenWebApp -> Maybe Int

-- | Preferred Web App theme; pass null to use the default theme
[theme] :: OpenWebApp -> Maybe ThemeParameters

-- | The URL from an inlineKeyboardButtonTypeWebApp button, a botMenuButton
--   button, or an internalLinkTypeAttachmentMenuBot link, or an empty
--   string otherwise
[url] :: OpenWebApp -> Maybe String

-- | Identifier of the bot, providing the Web App
[bot_user_id] :: OpenWebApp -> Maybe Int

-- | Identifier of the chat in which the Web App is opened
[chat_id] :: OpenWebApp -> Maybe Int
instance GHC.Classes.Eq TD.Query.OpenWebApp.OpenWebApp
instance GHC.Show.Show TD.Query.OpenWebApp.OpenWebApp
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.OpenWebApp.OpenWebApp


module TD.Query.GetWebAppUrl

-- | Returns an HTTPS URL of a Web App to open after
--   keyboardButtonTypeWebApp button is pressed
data GetWebAppUrl
GetWebAppUrl :: Maybe ThemeParameters -> Maybe String -> Maybe Int -> GetWebAppUrl

-- | Preferred Web App theme; pass null to use the default theme
[theme] :: GetWebAppUrl -> Maybe ThemeParameters

-- | The URL from the keyboardButtonTypeWebApp button
[url] :: GetWebAppUrl -> Maybe String

-- | Identifier of the target bot
[bot_user_id] :: GetWebAppUrl -> Maybe Int
instance GHC.Classes.Eq TD.Query.GetWebAppUrl.GetWebAppUrl
instance GHC.Show.Show TD.Query.GetWebAppUrl.GetWebAppUrl
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetWebAppUrl.GetWebAppUrl


module TD.Query.GetThemeParametersJsonString

-- | Converts a themeParameters object to corresponding JSON-serialized
--   string. Can be called synchronously @theme Theme parameters to convert
--   to JSON
data GetThemeParametersJsonString
GetThemeParametersJsonString :: Maybe ThemeParameters -> GetThemeParametersJsonString

[theme] :: GetThemeParametersJsonString -> Maybe ThemeParameters
instance GHC.Classes.Eq TD.Query.GetThemeParametersJsonString.GetThemeParametersJsonString
instance GHC.Show.Show TD.Query.GetThemeParametersJsonString.GetThemeParametersJsonString
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetThemeParametersJsonString.GetThemeParametersJsonString


module TD.Data.TextParseMode

-- | Describes the way the text needs to be parsed for TextEntities
data TextParseMode

-- | The text uses Markdown-style formatting
TextParseModeMarkdown :: Maybe Int -> TextParseMode

-- | Version of the parser: 0 or 1 - Telegram Bot API <a>Markdown</a> parse
--   mode, 2 - Telegram Bot API <a>MarkdownV2</a> parse mode
[version] :: TextParseMode -> Maybe Int

-- | The text uses HTML-style formatting. The same as Telegram Bot API
--   <a>HTML</a> parse mode
TextParseModeHTML :: TextParseMode
instance GHC.Classes.Eq TD.Data.TextParseMode.TextParseMode
instance GHC.Show.Show TD.Data.TextParseMode.TextParseMode
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.TextParseMode.TextParseMode
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.TextParseMode.TextParseMode


module TD.Query.ParseTextEntities

-- | Parses Bold, Italic, Underline, Strikethrough, Spoiler, Code, Pre,
--   PreCode, TextUrl and MentionName entities contained in the text. Can
--   be called synchronously <tt>text The text to parse </tt>parse_mode
--   Text parse mode
data ParseTextEntities
ParseTextEntities :: Maybe TextParseMode -> Maybe String -> ParseTextEntities

[parse_mode] :: ParseTextEntities -> Maybe TextParseMode

[text] :: ParseTextEntities -> Maybe String
instance GHC.Classes.Eq TD.Query.ParseTextEntities.ParseTextEntities
instance GHC.Show.Show TD.Query.ParseTextEntities.ParseTextEntities
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ParseTextEntities.ParseTextEntities


module TD.Data.TextEntityType

-- | Represents a part of the text which must be formatted differently
data TextEntityType

-- | A mention of a user by their username
TextEntityTypeMention :: TextEntityType

-- | A hashtag text, beginning with "#"
TextEntityTypeHashtag :: TextEntityType

-- | A cashtag text, beginning with "$" and consisting of capital English
--   letters (e.g., "$USD")
TextEntityTypeCashtag :: TextEntityType

-- | A bot command, beginning with "/"
TextEntityTypeBotCommand :: TextEntityType

-- | An HTTP URL
TextEntityTypeUrl :: TextEntityType

-- | An email address
TextEntityTypeEmailAddress :: TextEntityType

-- | A phone number
TextEntityTypePhoneNumber :: TextEntityType

-- | A bank card number. The getBankCardInfo method can be used to get
--   information about the bank card
TextEntityTypeBankCardNumber :: TextEntityType

-- | A bold text
TextEntityTypeBold :: TextEntityType

-- | An italic text
TextEntityTypeItalic :: TextEntityType

-- | An underlined text
TextEntityTypeUnderline :: TextEntityType

-- | A strikethrough text
TextEntityTypeStrikethrough :: TextEntityType

-- | A spoiler text. Not supported in secret chats
TextEntityTypeSpoiler :: TextEntityType

-- | Text that must be formatted as if inside a code HTML tag
TextEntityTypeCode :: TextEntityType

-- | Text that must be formatted as if inside a pre HTML tag
TextEntityTypePre :: TextEntityType

-- | Text that must be formatted as if inside pre, and code HTML tags
--   @language Programming language of the code; as defined by the sender
TextEntityTypePreCode :: Maybe String -> TextEntityType

[language] :: TextEntityType -> Maybe String

-- | A text description shown instead of a raw URL @url HTTP or tg:// URL
--   to be opened when the link is clicked
TextEntityTypeTextUrl :: Maybe String -> TextEntityType

[url] :: TextEntityType -> Maybe String

-- | A text shows instead of a raw mention of the user (e.g., when the user
--   has no username) @user_id Identifier of the mentioned user
TextEntityTypeMentionName :: Maybe Int -> TextEntityType

[user_id] :: TextEntityType -> Maybe Int

-- | A media timestamp @media_timestamp Timestamp from which a
--   video<i>audio</i>video note/voice note playing must start, in seconds.
--   The media can be in the content or the web page preview of the current
--   message, or in the same places in the replied message
TextEntityTypeMediaTimestamp :: Maybe Int -> TextEntityType

[media_timestamp] :: TextEntityType -> Maybe Int
instance GHC.Classes.Eq TD.Data.TextEntityType.TextEntityType
instance GHC.Show.Show TD.Data.TextEntityType.TextEntityType
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.TextEntityType.TextEntityType
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.TextEntityType.TextEntityType


module TD.Data.TextEntity

data TextEntity

-- | Represents a part of the text that needs to be formatted in some
--   unusual way <tt>offset Offset of the entity, in UTF-16 code units
--   </tt>length Length of the entity, in UTF-16 code units @type Type of
--   the entity
TextEntity :: Maybe TextEntityType -> Maybe Int -> Maybe Int -> TextEntity

[_type] :: TextEntity -> Maybe TextEntityType

[_length] :: TextEntity -> Maybe Int

[offset] :: TextEntity -> Maybe Int
instance GHC.Classes.Eq TD.Data.TextEntity.TextEntity
instance GHC.Show.Show TD.Data.TextEntity.TextEntity
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.TextEntity.TextEntity
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.TextEntity.TextEntity


module TD.Data.TextEntities

data TextEntities

-- | Contains a list of text entities @entities List of text entities
TextEntities :: Maybe [TextEntity] -> TextEntities

[entities] :: TextEntities -> Maybe [TextEntity]
instance GHC.Classes.Eq TD.Data.TextEntities.TextEntities
instance GHC.Show.Show TD.Data.TextEntities.TextEntities
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.TextEntities.TextEntities
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.TextEntities.TextEntities


module TD.Data.Text

data Text

-- | Contains some text @text Text
Text :: Maybe String -> Text

[text] :: Text -> Maybe String
instance GHC.Classes.Eq TD.Data.Text.Text
instance GHC.Show.Show TD.Data.Text.Text
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.Text.Text
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.Text.Text


module TD.Data.TestVectorString

data TestVectorString

-- | A simple object containing a vector of strings; for testing only
--   @value Vector of strings
TestVectorString :: Maybe [String] -> TestVectorString

[value] :: TestVectorString -> Maybe [String]
instance GHC.Classes.Eq TD.Data.TestVectorString.TestVectorString
instance GHC.Show.Show TD.Data.TestVectorString.TestVectorString
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.TestVectorString.TestVectorString
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.TestVectorString.TestVectorString


module TD.Data.TestVectorInt

data TestVectorInt

-- | A simple object containing a vector of numbers; for testing only
--   @value Vector of numbers
TestVectorInt :: Maybe [Int] -> TestVectorInt

[value] :: TestVectorInt -> Maybe [Int]
instance GHC.Classes.Eq TD.Data.TestVectorInt.TestVectorInt
instance GHC.Show.Show TD.Data.TestVectorInt.TestVectorInt
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.TestVectorInt.TestVectorInt
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.TestVectorInt.TestVectorInt


module TD.Data.TestString

data TestString

-- | A simple object containing a string; for testing only @value String
TestString :: Maybe String -> TestString

[value] :: TestString -> Maybe String
instance GHC.Classes.Eq TD.Data.TestString.TestString
instance GHC.Show.Show TD.Data.TestString.TestString
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.TestString.TestString
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.TestString.TestString


module TD.Query.TestCallVectorStringObject

-- | Returns the received vector of objects containing a string; for
--   testing only. This is an offline method. Can be called before
--   authorization @x Vector of objects to return
data TestCallVectorStringObject
TestCallVectorStringObject :: Maybe [TestString] -> TestCallVectorStringObject

[x] :: TestCallVectorStringObject -> Maybe [TestString]
instance GHC.Classes.Eq TD.Query.TestCallVectorStringObject.TestCallVectorStringObject
instance GHC.Show.Show TD.Query.TestCallVectorStringObject.TestCallVectorStringObject
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.TestCallVectorStringObject.TestCallVectorStringObject


module TD.Data.TestVectorStringObject

data TestVectorStringObject

-- | A simple object containing a vector of objects that hold a string; for
--   testing only @value Vector of objects
TestVectorStringObject :: Maybe [TestString] -> TestVectorStringObject

[value] :: TestVectorStringObject -> Maybe [TestString]
instance GHC.Classes.Eq TD.Data.TestVectorStringObject.TestVectorStringObject
instance GHC.Show.Show TD.Data.TestVectorStringObject.TestVectorStringObject
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.TestVectorStringObject.TestVectorStringObject
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.TestVectorStringObject.TestVectorStringObject


module TD.Data.TestInt

data TestInt

-- | A simple object containing a number; for testing only @value Number
TestInt :: Maybe Int -> TestInt

[value] :: TestInt -> Maybe Int
instance GHC.Classes.Eq TD.Data.TestInt.TestInt
instance GHC.Show.Show TD.Data.TestInt.TestInt
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.TestInt.TestInt
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.TestInt.TestInt


module TD.Query.TestCallVectorIntObject

-- | Returns the received vector of objects containing a number; for
--   testing only. This is an offline method. Can be called before
--   authorization @x Vector of objects to return
data TestCallVectorIntObject
TestCallVectorIntObject :: Maybe [TestInt] -> TestCallVectorIntObject

[x] :: TestCallVectorIntObject -> Maybe [TestInt]
instance GHC.Classes.Eq TD.Query.TestCallVectorIntObject.TestCallVectorIntObject
instance GHC.Show.Show TD.Query.TestCallVectorIntObject.TestCallVectorIntObject
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.TestCallVectorIntObject.TestCallVectorIntObject


module TD.Data.TestVectorIntObject

data TestVectorIntObject

-- | A simple object containing a vector of objects that hold a number; for
--   testing only @value Vector of objects
TestVectorIntObject :: Maybe [TestInt] -> TestVectorIntObject

[value] :: TestVectorIntObject -> Maybe [TestInt]
instance GHC.Classes.Eq TD.Data.TestVectorIntObject.TestVectorIntObject
instance GHC.Show.Show TD.Data.TestVectorIntObject.TestVectorIntObject
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.TestVectorIntObject.TestVectorIntObject
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.TestVectorIntObject.TestVectorIntObject


module TD.Data.TestBytes

data TestBytes

-- | A simple object containing a sequence of bytes; for testing only
--   @value Bytes
TestBytes :: Maybe String -> TestBytes

[value] :: TestBytes -> Maybe String
instance GHC.Classes.Eq TD.Data.TestBytes.TestBytes
instance GHC.Show.Show TD.Data.TestBytes.TestBytes
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.TestBytes.TestBytes
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.TestBytes.TestBytes


module TD.Data.TemporaryPasswordState

data TemporaryPasswordState

-- | Returns information about the availability of a temporary password,
--   which can be used for payments <tt>has_password True, if a temporary
--   password is available </tt>valid_for Time left before the temporary
--   password expires, in seconds
TemporaryPasswordState :: Maybe Int -> Maybe Bool -> TemporaryPasswordState

[valid_for] :: TemporaryPasswordState -> Maybe Int

[has_password] :: TemporaryPasswordState -> Maybe Bool
instance GHC.Classes.Eq TD.Data.TemporaryPasswordState.TemporaryPasswordState
instance GHC.Show.Show TD.Data.TemporaryPasswordState.TemporaryPasswordState
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.TemporaryPasswordState.TemporaryPasswordState
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.TemporaryPasswordState.TemporaryPasswordState


module TD.Data.TdlibParameters

data TdlibParameters

-- | Contains parameters for TDLib initialization
TdlibParameters :: Maybe Bool -> Maybe Bool -> Maybe String -> Maybe String -> Maybe String -> Maybe String -> Maybe String -> Maybe Int -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe String -> Maybe String -> Maybe Bool -> TdlibParameters

-- | If set to true, original file names will be ignored. Otherwise,
--   downloaded files will be saved under names as close as possible to the
--   original name
[ignore_file_names] :: TdlibParameters -> Maybe Bool

-- | If set to true, old files will automatically be deleted
[enable_storage_optimizer] :: TdlibParameters -> Maybe Bool

-- | Application version; must be non-empty
[application_version] :: TdlibParameters -> Maybe String

-- | Version of the operating system the application is being run on. If
--   empty, the version is automatically detected by TDLib
[system_version] :: TdlibParameters -> Maybe String

-- | Model of the device the application is being run on; must be non-empty
[device_model] :: TdlibParameters -> Maybe String

-- | IETF language tag of the user's operating system language; must be
--   non-empty
[system_language_code] :: TdlibParameters -> Maybe String

-- | Application identifier hash for Telegram API access, which can be
--   obtained at <a>https://my.telegram.org</a>
[api_hash] :: TdlibParameters -> Maybe String

-- | Application identifier for Telegram API access, which can be obtained
--   at <a>https://my.telegram.org</a>
[api_id] :: TdlibParameters -> Maybe Int

-- | If set to true, support for secret chats will be enabled
[use_secret_chats] :: TdlibParameters -> Maybe Bool

-- | If set to true, the library will maintain a cache of chats and
--   messages. Implies use_chat_info_database
[use_message_database] :: TdlibParameters -> Maybe Bool

-- | If set to true, the library will maintain a cache of users, basic
--   groups, supergroups, channels and secret chats. Implies
--   use_file_database
[use_chat_info_database] :: TdlibParameters -> Maybe Bool

-- | If set to true, information about downloaded and uploaded files will
--   be saved between application restarts
[use_file_database] :: TdlibParameters -> Maybe Bool

-- | The path to the directory for storing files; if empty,
--   database_directory will be used
[files_directory] :: TdlibParameters -> Maybe String

-- | The path to the directory for the persistent database; if empty, the
--   current working directory will be used
[database_directory] :: TdlibParameters -> Maybe String

-- | If set to true, the Telegram test environment will be used instead of
--   the production environment
[use_test_dc] :: TdlibParameters -> Maybe Bool
instance GHC.Classes.Eq TD.Data.TdlibParameters.TdlibParameters
instance GHC.Show.Show TD.Data.TdlibParameters.TdlibParameters
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.TdlibParameters.TdlibParameters
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.TdlibParameters.TdlibParameters


module TD.Query.SetTdlibParameters

-- | Sets the parameters for TDLib initialization. Works only when the
--   current authorization state is authorizationStateWaitTdlibParameters
--   @parameters Parameters for TDLib initialization
data SetTdlibParameters
SetTdlibParameters :: Maybe TdlibParameters -> SetTdlibParameters

[parameters] :: SetTdlibParameters -> Maybe TdlibParameters
instance GHC.Classes.Eq TD.Query.SetTdlibParameters.SetTdlibParameters
instance GHC.Show.Show TD.Query.SetTdlibParameters.SetTdlibParameters
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SetTdlibParameters.SetTdlibParameters

module TD.Defaults
defaultTdlibParameters :: TdlibParameters


module TD.Data.TargetChat

-- | Describes the target chat to be opened
data TargetChat

-- | The currently opened chat needs to be kept
TargetChatCurrent :: TargetChat

-- | The chat needs to be chosen by the user among chats of the specified
--   types
TargetChatChosen :: Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> TargetChat

-- | True, if channel chats are allowed
[allow_channel_chats] :: TargetChat -> Maybe Bool

-- | True, if basic group and supergroup chats are allowed
[allow_group_chats] :: TargetChat -> Maybe Bool

-- | True, if private chats with other bots are allowed
[allow_bot_chats] :: TargetChat -> Maybe Bool

-- | True, if private chats with ordinary users are allowed
[allow_user_chats] :: TargetChat -> Maybe Bool

-- | The chat needs to be open with the provided internal link @link An
--   internal link pointing to the chat
TargetChatInternalLink :: Maybe InternalLinkType -> TargetChat

[link] :: TargetChat -> Maybe InternalLinkType
instance GHC.Classes.Eq TD.Data.TargetChat.TargetChat
instance GHC.Show.Show TD.Data.TargetChat.TargetChat
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.TargetChat.TargetChat
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.TargetChat.TargetChat


module TD.Data.SupergroupMembersFilter

-- | Specifies the kind of chat members to return in getSupergroupMembers
data SupergroupMembersFilter

-- | Returns recently active users in reverse chronological order
SupergroupMembersFilterRecent :: SupergroupMembersFilter

-- | Returns contacts of the user, which are members of the supergroup or
--   channel @query Query to search for
SupergroupMembersFilterContacts :: Maybe String -> SupergroupMembersFilter

[query] :: SupergroupMembersFilter -> Maybe String

-- | Returns the owner and administrators
SupergroupMembersFilterAdministrators :: SupergroupMembersFilter

-- | Used to search for supergroup or channel members via a (string) query
--   @query Query to search for
SupergroupMembersFilterSearch :: Maybe String -> SupergroupMembersFilter

[query] :: SupergroupMembersFilter -> Maybe String

-- | Returns restricted supergroup members; can be used only by
--   administrators @query Query to search for
SupergroupMembersFilterRestricted :: Maybe String -> SupergroupMembersFilter

[query] :: SupergroupMembersFilter -> Maybe String

-- | Returns users banned from the supergroup or channel; can be used only
--   by administrators @query Query to search for
SupergroupMembersFilterBanned :: Maybe String -> SupergroupMembersFilter

[query] :: SupergroupMembersFilter -> Maybe String

-- | Returns users which can be mentioned in the supergroup <tt>query Query
--   to search for </tt>message_thread_id If non-zero, the identifier of
--   the current message thread
SupergroupMembersFilterMention :: Maybe Int -> Maybe String -> SupergroupMembersFilter

[message_thread_id] :: SupergroupMembersFilter -> Maybe Int

[query] :: SupergroupMembersFilter -> Maybe String

-- | Returns bot members of the supergroup or channel
SupergroupMembersFilterBots :: SupergroupMembersFilter
instance GHC.Classes.Eq TD.Data.SupergroupMembersFilter.SupergroupMembersFilter
instance GHC.Show.Show TD.Data.SupergroupMembersFilter.SupergroupMembersFilter
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.SupergroupMembersFilter.SupergroupMembersFilter
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.SupergroupMembersFilter.SupergroupMembersFilter


module TD.Query.GetSupergroupMembers

-- | Returns information about members or banned users in a supergroup or
--   channel. Can be used only if supergroupFullInfo.can_get_members ==
--   true; additionally, administrator privileges may be required for some
--   filters @supergroup_id Identifier of the supergroup or channel
data GetSupergroupMembers
GetSupergroupMembers :: Maybe Int -> Maybe Int -> Maybe SupergroupMembersFilter -> Maybe Int -> GetSupergroupMembers

[limit] :: GetSupergroupMembers -> Maybe Int

[offset] :: GetSupergroupMembers -> Maybe Int

-- | The type of users to return; pass null to use
--   supergroupMembersFilterRecent <tt>offset Number of users to skip
--   </tt>limit The maximum number of users be returned; up to 200
[_filter] :: GetSupergroupMembers -> Maybe SupergroupMembersFilter

[supergroup_id] :: GetSupergroupMembers -> Maybe Int
instance GHC.Classes.Eq TD.Query.GetSupergroupMembers.GetSupergroupMembers
instance GHC.Show.Show TD.Query.GetSupergroupMembers.GetSupergroupMembers
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetSupergroupMembers.GetSupergroupMembers


module TD.Data.SuggestedAction

-- | Describes an action suggested to the current user
data SuggestedAction

-- | Suggests the user to enable
--   "archive_and_mute_new_chats_from_unknown_users" option
SuggestedActionEnableArchiveAndMuteNewChats :: SuggestedAction

-- | Suggests the user to check whether they still remember their 2-step
--   verification password
SuggestedActionCheckPassword :: SuggestedAction

-- | Suggests the user to check whether authorization phone number is
--   correct and change the phone number if it is inaccessible
SuggestedActionCheckPhoneNumber :: SuggestedAction

-- | Suggests the user to view a hint about the meaning of one and two
--   check marks on sent messages
SuggestedActionViewChecksHint :: SuggestedAction

-- | Suggests the user to convert specified supergroup to a broadcast group
--   @supergroup_id Supergroup identifier
SuggestedActionConvertToBroadcastGroup :: Maybe Int -> SuggestedAction

[supergroup_id] :: SuggestedAction -> Maybe Int

-- | Suggests the user to set a 2-step verification password to be able to
--   log in again @authorization_delay The number of days to pass between
--   consecutive authorizations if the user declines to set password
SuggestedActionSetPassword :: Maybe Int -> SuggestedAction

[authorization_delay] :: SuggestedAction -> Maybe Int
instance GHC.Classes.Eq TD.Data.SuggestedAction.SuggestedAction
instance GHC.Show.Show TD.Data.SuggestedAction.SuggestedAction
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.SuggestedAction.SuggestedAction
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.SuggestedAction.SuggestedAction


module TD.Query.HideSuggestedAction

-- | Hides a suggested action @action Suggested action to hide
data HideSuggestedAction
HideSuggestedAction :: Maybe SuggestedAction -> HideSuggestedAction

[action] :: HideSuggestedAction -> Maybe SuggestedAction
instance GHC.Classes.Eq TD.Query.HideSuggestedAction.HideSuggestedAction
instance GHC.Show.Show TD.Query.HideSuggestedAction.HideSuggestedAction
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.HideSuggestedAction.HideSuggestedAction


module TD.Data.StorageStatisticsFast

data StorageStatisticsFast

-- | Contains approximate storage usage statistics, excluding files of
--   unknown file type <tt>files_size Approximate total size of files, in
--   bytes </tt>file_count Approximate number of files
StorageStatisticsFast :: Maybe Int -> Maybe Int -> Maybe Int -> Maybe Int -> Maybe Int -> StorageStatisticsFast

[log_size] :: StorageStatisticsFast -> Maybe Int

[language_pack_database_size] :: StorageStatisticsFast -> Maybe Int

-- | Size of the database <tt>language_pack_database_size Size of the
--   language pack database </tt>log_size Size of the TDLib internal log
[database_size] :: StorageStatisticsFast -> Maybe Int

[file_count] :: StorageStatisticsFast -> Maybe Int

[files_size] :: StorageStatisticsFast -> Maybe Int
instance GHC.Classes.Eq TD.Data.StorageStatisticsFast.StorageStatisticsFast
instance GHC.Show.Show TD.Data.StorageStatisticsFast.StorageStatisticsFast
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.StorageStatisticsFast.StorageStatisticsFast
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.StorageStatisticsFast.StorageStatisticsFast


module TD.Data.StatisticalValue

data StatisticalValue

-- | A value with information about its recent changes <tt>value The
--   current value </tt>previous_value The value for the previous day
--   @growth_rate_percentage The growth rate of the value, as a percentage
StatisticalValue :: Maybe Float -> Maybe Float -> Maybe Float -> StatisticalValue

[growth_rate_percentage] :: StatisticalValue -> Maybe Float

[previous_value] :: StatisticalValue -> Maybe Float

[value] :: StatisticalValue -> Maybe Float
instance GHC.Classes.Eq TD.Data.StatisticalValue.StatisticalValue
instance GHC.Show.Show TD.Data.StatisticalValue.StatisticalValue
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.StatisticalValue.StatisticalValue
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.StatisticalValue.StatisticalValue


module TD.Data.StatisticalGraph

-- | Describes a statistical graph
data StatisticalGraph

-- | A graph data <tt>json_data Graph data in JSON format </tt>zoom_token
--   If non-empty, a token which can be used to receive a zoomed in graph
StatisticalGraphData :: Maybe String -> Maybe String -> StatisticalGraph

[zoom_token] :: StatisticalGraph -> Maybe String

[json_data] :: StatisticalGraph -> Maybe String

-- | The graph data to be asynchronously loaded through getStatisticalGraph
--   @token The token to use for data loading
StatisticalGraphAsync :: Maybe String -> StatisticalGraph

[token] :: StatisticalGraph -> Maybe String

-- | An error message to be shown to the user instead of the graph
--   @error_message The error message
StatisticalGraphError :: Maybe String -> StatisticalGraph

[error_message] :: StatisticalGraph -> Maybe String
instance GHC.Classes.Eq TD.Data.StatisticalGraph.StatisticalGraph
instance GHC.Show.Show TD.Data.StatisticalGraph.StatisticalGraph
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.StatisticalGraph.StatisticalGraph
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.StatisticalGraph.StatisticalGraph


module TD.Data.SessionType

-- | Represents the type of a session
data SessionType

-- | The session is running on an Android device
SessionTypeAndroid :: SessionType

-- | The session is running on a generic Apple device
SessionTypeApple :: SessionType

-- | The session is running on the Brave browser
SessionTypeBrave :: SessionType

-- | The session is running on the Chrome browser
SessionTypeChrome :: SessionType

-- | The session is running on the Edge browser
SessionTypeEdge :: SessionType

-- | The session is running on the Firefox browser
SessionTypeFirefox :: SessionType

-- | The session is running on an iPad device
SessionTypeIpad :: SessionType

-- | The session is running on an iPhone device
SessionTypeIphone :: SessionType

-- | The session is running on a Linux device
SessionTypeLinux :: SessionType

-- | The session is running on a Mac device
SessionTypeMac :: SessionType

-- | The session is running on the Opera browser
SessionTypeOpera :: SessionType

-- | The session is running on the Safari browser
SessionTypeSafari :: SessionType

-- | The session is running on an Ubuntu device
SessionTypeUbuntu :: SessionType

-- | The session is running on an unknown type of device
SessionTypeUnknown :: SessionType

-- | The session is running on the Vivaldi browser
SessionTypeVivaldi :: SessionType

-- | The session is running on a Windows device
SessionTypeWindows :: SessionType

-- | The session is running on an Xbox console
SessionTypeXbox :: SessionType
instance GHC.Classes.Eq TD.Data.SessionType.SessionType
instance GHC.Show.Show TD.Data.SessionType.SessionType
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.SessionType.SessionType
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.SessionType.SessionType


module TD.Data.Session

data Session

-- | Contains information about one session in a Telegram application used
--   by the current user. Sessions must be shown to the user in the
--   returned order
Session :: Maybe String -> Maybe String -> Maybe String -> Maybe Int -> Maybe Int -> Maybe String -> Maybe String -> Maybe String -> Maybe Bool -> Maybe String -> Maybe String -> Maybe Int -> Maybe SessionType -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Int -> Session

[region] :: Session -> Maybe String

-- | A two-letter country code for the country from which the session was
--   created, based on the IP address @region Region code from which the
--   session was created, based on the IP address
[country] :: Session -> Maybe String

[ip] :: Session -> Maybe String

-- | Point in time (Unix timestamp) when the session was last used @ip IP
--   address from which the session was created, in human-readable format
[last_active_date] :: Session -> Maybe Int

[log_in_date] :: Session -> Maybe Int

-- | Version of the operating system the application has been run or is
--   running on, as provided by the application @log_in_date Point in time
--   (Unix timestamp) when the user has logged in
[system_version] :: Session -> Maybe String

[platform] :: Session -> Maybe String

-- | Model of the device the application has been run or is running on, as
--   provided by the application @platform Operating system the application
--   has been run or is running on, as provided by the application
[device_model] :: Session -> Maybe String

[is_official_application] :: Session -> Maybe Bool

-- | The version of the application, as provided by the application
--   @is_official_application True, if the application is an official
--   application or uses the api_id of an official application
[application_version] :: Session -> Maybe String

[application_name] :: Session -> Maybe String

-- | Telegram API identifier, as provided by the application
--   @application_name Name of the application, as provided by the
--   application
[api_id] :: Session -> Maybe Int

-- | Session type based on the system and application version, which can be
--   used to display a corresponding icon
[_type] :: Session -> Maybe SessionType

-- | True, if incoming calls can be accepted by the session
[can_accept_calls] :: Session -> Maybe Bool

-- | True, if incoming secret chats can be accepted by the session
[can_accept_secret_chats] :: Session -> Maybe Bool

-- | True, if a password is needed to complete authorization of the session
[is_password_pending] :: Session -> Maybe Bool

[is_current] :: Session -> Maybe Bool

-- | Session identifier @is_current True, if this session is the current
--   session
[_id] :: Session -> Maybe Int
instance GHC.Classes.Eq TD.Data.Session.Session
instance GHC.Show.Show TD.Data.Session.Session
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.Session.Session
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.Session.Session


module TD.Data.Sessions

data Sessions

-- | Contains a list of sessions <tt>sessions List of sessions
--   </tt>inactive_session_ttl_days Number of days of inactivity before
--   sessions will automatically be terminated; 1-366 days
Sessions :: Maybe Int -> Maybe [Session] -> Sessions

[inactive_session_ttl_days] :: Sessions -> Maybe Int

[sessions] :: Sessions -> Maybe [Session]
instance GHC.Classes.Eq TD.Data.Sessions.Sessions
instance GHC.Show.Show TD.Data.Sessions.Sessions
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.Sessions.Sessions
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.Sessions.Sessions


module TD.Data.SentWebAppMessage

data SentWebAppMessage

-- | Information about the message sent by answerWebAppQuery
--   @inline_message_id Identifier of the sent inline message, if known
SentWebAppMessage :: Maybe String -> SentWebAppMessage

[inline_message_id] :: SentWebAppMessage -> Maybe String
instance GHC.Classes.Eq TD.Data.SentWebAppMessage.SentWebAppMessage
instance GHC.Show.Show TD.Data.SentWebAppMessage.SentWebAppMessage
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.SentWebAppMessage.SentWebAppMessage
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.SentWebAppMessage.SentWebAppMessage


module TD.Data.SecretChatState

-- | Describes the current secret chat state
data SecretChatState

-- | The secret chat is not yet created; waiting for the other user to get
--   online
SecretChatStatePending :: SecretChatState

-- | The secret chat is ready to use
SecretChatStateReady :: SecretChatState

-- | The secret chat is closed
SecretChatStateClosed :: SecretChatState
instance GHC.Classes.Eq TD.Data.SecretChatState.SecretChatState
instance GHC.Show.Show TD.Data.SecretChatState.SecretChatState
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.SecretChatState.SecretChatState
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.SecretChatState.SecretChatState


module TD.Data.SecretChat

data SecretChat

-- | Represents a secret chat
SecretChat :: Maybe Int -> Maybe String -> Maybe Bool -> Maybe SecretChatState -> Maybe Int -> Maybe Int -> SecretChat

-- | Secret chat layer; determines features supported by the chat partner's
--   application. Nested text entities and underline and strikethrough
--   entities are supported if the layer &gt;= 101, files bigger than
--   2000MB are supported if the layer &gt;= 143
[layer] :: SecretChat -> Maybe Int

-- | Hash of the currently used key for comparison with the hash of the
--   chat partner's key. This is a string of 36 little-endian bytes, which
--   must be split into groups of 2 bits, each denoting a pixel of one of 4
--   colors FFFFFF, D5E6F3, 2D5775, and 2F99C9. The pixels must be used to
--   make a 12x12 square image filled from left to right, top to bottom.
--   Alternatively, the first 32 bytes of the hash can be converted to the
--   hexadecimal format and printed as 32 2-digit hex numbers
[key_hash] :: SecretChat -> Maybe String

-- | True, if the chat was created by the current user; otherwise false
[is_outbound] :: SecretChat -> Maybe Bool

-- | State of the secret chat
[state] :: SecretChat -> Maybe SecretChatState

-- | Identifier of the chat partner
[user_id] :: SecretChat -> Maybe Int

-- | Secret chat identifier
[_id] :: SecretChat -> Maybe Int
instance GHC.Classes.Eq TD.Data.SecretChat.SecretChat
instance GHC.Show.Show TD.Data.SecretChat.SecretChat
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.SecretChat.SecretChat
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.SecretChat.SecretChat


module TD.Data.Seconds

data Seconds

-- | Contains a value representing a number of seconds @seconds Number of
--   seconds
Seconds :: Maybe Float -> Seconds

[seconds] :: Seconds -> Maybe Float
instance GHC.Classes.Eq TD.Data.Seconds.Seconds
instance GHC.Show.Show TD.Data.Seconds.Seconds
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.Seconds.Seconds
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.Seconds.Seconds


module TD.Data.SearchMessagesFilter

-- | Represents a filter for message search results
data SearchMessagesFilter

-- | Returns all found messages, no filter is applied
SearchMessagesFilterEmpty :: SearchMessagesFilter

-- | Returns only animation messages
SearchMessagesFilterAnimation :: SearchMessagesFilter

-- | Returns only audio messages
SearchMessagesFilterAudio :: SearchMessagesFilter

-- | Returns only document messages
SearchMessagesFilterDocument :: SearchMessagesFilter

-- | Returns only photo messages
SearchMessagesFilterPhoto :: SearchMessagesFilter

-- | Returns only video messages
SearchMessagesFilterVideo :: SearchMessagesFilter

-- | Returns only voice note messages
SearchMessagesFilterVoiceNote :: SearchMessagesFilter

-- | Returns only photo and video messages
SearchMessagesFilterPhotoAndVideo :: SearchMessagesFilter

-- | Returns only messages containing URLs
SearchMessagesFilterUrl :: SearchMessagesFilter

-- | Returns only messages containing chat photos
SearchMessagesFilterChatPhoto :: SearchMessagesFilter

-- | Returns only video note messages
SearchMessagesFilterVideoNote :: SearchMessagesFilter

-- | Returns only voice and video note messages
SearchMessagesFilterVoiceAndVideoNote :: SearchMessagesFilter

-- | Returns only messages with mentions of the current user, or messages
--   that are replies to their messages
SearchMessagesFilterMention :: SearchMessagesFilter

-- | Returns only messages with unread mentions of the current user, or
--   messages that are replies to their messages. When using this filter
--   the results can't be additionally filtered by a query, a message
--   thread or by the sending user
SearchMessagesFilterUnreadMention :: SearchMessagesFilter

-- | Returns only messages with unread reactions for the current user. When
--   using this filter the results can't be additionally filtered by a
--   query, a message thread or by the sending user
SearchMessagesFilterUnreadReaction :: SearchMessagesFilter

-- | Returns only failed to send messages. This filter can be used only if
--   the message database is used
SearchMessagesFilterFailedToSend :: SearchMessagesFilter

-- | Returns only pinned messages
SearchMessagesFilterPinned :: SearchMessagesFilter
instance GHC.Classes.Eq TD.Data.SearchMessagesFilter.SearchMessagesFilter
instance GHC.Show.Show TD.Data.SearchMessagesFilter.SearchMessagesFilter
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.SearchMessagesFilter.SearchMessagesFilter
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.SearchMessagesFilter.SearchMessagesFilter


module TD.Query.SearchSecretMessages

-- | Searches for messages in secret chats. Returns the results in reverse
--   chronological order. For optimal performance, the number of returned
--   messages is chosen by TDLib
data SearchSecretMessages
SearchSecretMessages :: Maybe SearchMessagesFilter -> Maybe Int -> Maybe String -> Maybe String -> Maybe Int -> SearchSecretMessages

-- | Additional filter for messages to search; pass null to search for all
--   messages
[_filter] :: SearchSecretMessages -> Maybe SearchMessagesFilter

-- | The maximum number of messages to be returned; up to 100. For optimal
--   performance, the number of returned messages is chosen by TDLib and
--   can be smaller than the specified limit
[limit] :: SearchSecretMessages -> Maybe Int

-- | Offset of the first entry to return as received from the previous
--   request; use empty string to get the first chunk of results
[offset] :: SearchSecretMessages -> Maybe String

-- | Query to search for. If empty, searchChatMessages must be used instead
[query] :: SearchSecretMessages -> Maybe String

-- | Identifier of the chat in which to search. Specify 0 to search in all
--   secret chats
[chat_id] :: SearchSecretMessages -> Maybe Int
instance GHC.Classes.Eq TD.Query.SearchSecretMessages.SearchSecretMessages
instance GHC.Show.Show TD.Query.SearchSecretMessages.SearchSecretMessages
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SearchSecretMessages.SearchSecretMessages


module TD.Query.GetChatSparseMessagePositions

-- | Returns sparse positions of messages of the specified type in the chat
--   to be used for shared media scroll implementation. Returns the results
--   in reverse chronological order (i.e., in order of decreasing
--   message_id). Cannot be used in secret chats or with
--   searchMessagesFilterFailedToSend filter without an enabled message
--   database
data GetChatSparseMessagePositions
GetChatSparseMessagePositions :: Maybe Int -> Maybe Int -> Maybe SearchMessagesFilter -> Maybe Int -> GetChatSparseMessagePositions

-- | The expected number of message positions to be returned; 50-2000. A
--   smaller number of positions can be returned, if there are not enough
--   appropriate messages
[limit] :: GetChatSparseMessagePositions -> Maybe Int

-- | The message identifier from which to return information about message
--   positions
[from_message_id] :: GetChatSparseMessagePositions -> Maybe Int

-- | Filter for message content. Filters searchMessagesFilterEmpty,
--   searchMessagesFilterMention, searchMessagesFilterUnreadMention, and
--   searchMessagesFilterUnreadReaction are unsupported in this function
[_filter] :: GetChatSparseMessagePositions -> Maybe SearchMessagesFilter

-- | Identifier of the chat in which to return information about message
--   positions
[chat_id] :: GetChatSparseMessagePositions -> Maybe Int
instance GHC.Classes.Eq TD.Query.GetChatSparseMessagePositions.GetChatSparseMessagePositions
instance GHC.Show.Show TD.Query.GetChatSparseMessagePositions.GetChatSparseMessagePositions
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetChatSparseMessagePositions.GetChatSparseMessagePositions


module TD.Query.GetChatMessageCount

-- | Returns approximate number of messages of the specified type in the
--   chat <tt>chat_id Identifier of the chat in which to count messages
--   </tt>filter Filter for message content; searchMessagesFilterEmpty is
--   unsupported in this function @return_local Pass true to get the number
--   of messages without sending network requests, or -1 if the number of
--   messages is unknown locally
data GetChatMessageCount
GetChatMessageCount :: Maybe Bool -> Maybe SearchMessagesFilter -> Maybe Int -> GetChatMessageCount

[return_local] :: GetChatMessageCount -> Maybe Bool

[_filter] :: GetChatMessageCount -> Maybe SearchMessagesFilter

[chat_id] :: GetChatMessageCount -> Maybe Int
instance GHC.Classes.Eq TD.Query.GetChatMessageCount.GetChatMessageCount
instance GHC.Show.Show TD.Query.GetChatMessageCount.GetChatMessageCount
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetChatMessageCount.GetChatMessageCount


module TD.Query.GetChatMessageCalendar

-- | Returns information about the next messages of the specified type in
--   the chat split by days. Returns the results in reverse chronological
--   order. Can return partial result for the last returned day. Behavior
--   of this method depends on the value of the option "utc_time_offset"
data GetChatMessageCalendar
GetChatMessageCalendar :: Maybe Int -> Maybe SearchMessagesFilter -> Maybe Int -> GetChatMessageCalendar

-- | The message identifier from which to return information about
--   messages; use 0 to get results from the last message
[from_message_id] :: GetChatMessageCalendar -> Maybe Int

-- | Filter for message content. Filters searchMessagesFilterEmpty,
--   searchMessagesFilterMention, searchMessagesFilterUnreadMention, and
--   searchMessagesFilterUnreadReaction are unsupported in this function
[_filter] :: GetChatMessageCalendar -> Maybe SearchMessagesFilter

-- | Identifier of the chat in which to return information about messages
[chat_id] :: GetChatMessageCalendar -> Maybe Int
instance GHC.Classes.Eq TD.Query.GetChatMessageCalendar.GetChatMessageCalendar
instance GHC.Show.Show TD.Query.GetChatMessageCalendar.GetChatMessageCalendar
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetChatMessageCalendar.GetChatMessageCalendar


module TD.Data.ScopeNotificationSettings

data ScopeNotificationSettings

-- | Contains information about notification settings for several chats
ScopeNotificationSettings :: Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Int -> Maybe Int -> ScopeNotificationSettings

-- | True, if notifications for messages with mentions will be created as
--   for an ordinary unread message
[disable_mention_notifications] :: ScopeNotificationSettings -> Maybe Bool

-- | True, if notifications for incoming pinned messages will be created as
--   for an ordinary unread message
[disable_pinned_message_notifications] :: ScopeNotificationSettings -> Maybe Bool

-- | True, if message content must be displayed in notifications
[show_preview] :: ScopeNotificationSettings -> Maybe Bool

-- | Identifier of the notification sound to be played; 0 if sound is
--   disabled
[sound_id] :: ScopeNotificationSettings -> Maybe Int

-- | Time left before notifications will be unmuted, in seconds
[mute_for] :: ScopeNotificationSettings -> Maybe Int
instance GHC.Classes.Eq TD.Data.ScopeNotificationSettings.ScopeNotificationSettings
instance GHC.Show.Show TD.Data.ScopeNotificationSettings.ScopeNotificationSettings
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.ScopeNotificationSettings.ScopeNotificationSettings
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.ScopeNotificationSettings.ScopeNotificationSettings


module TD.Data.SavedCredentials

data SavedCredentials

-- | Contains information about saved card credentials <tt>id Unique
--   identifier of the saved credentials </tt>title Title of the saved
--   credentials
SavedCredentials :: Maybe String -> Maybe String -> SavedCredentials

[title] :: SavedCredentials -> Maybe String

[_id] :: SavedCredentials -> Maybe String
instance GHC.Classes.Eq TD.Data.SavedCredentials.SavedCredentials
instance GHC.Show.Show TD.Data.SavedCredentials.SavedCredentials
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.SavedCredentials.SavedCredentials
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.SavedCredentials.SavedCredentials


module TD.Data.RtmpUrl

data RtmpUrl

-- | Represents an RTMP url <tt>url The URL </tt>stream_key Stream key
RtmpUrl :: Maybe String -> Maybe String -> RtmpUrl

[stream_key] :: RtmpUrl -> Maybe String

[url] :: RtmpUrl -> Maybe String
instance GHC.Classes.Eq TD.Data.RtmpUrl.RtmpUrl
instance GHC.Show.Show TD.Data.RtmpUrl.RtmpUrl
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.RtmpUrl.RtmpUrl
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.RtmpUrl.RtmpUrl


module TD.Data.ResetPasswordResult

-- | Represents result of 2-step verification password reset
data ResetPasswordResult

-- | The password was reset
ResetPasswordResultOk :: ResetPasswordResult

-- | The password reset request is pending @pending_reset_date Point in
--   time (Unix timestamp) after which the password can be reset
--   immediately using resetPassword
ResetPasswordResultPending :: Maybe Int -> ResetPasswordResult

[pending_reset_date] :: ResetPasswordResult -> Maybe Int

-- | The password reset request was declined @retry_date Point in time
--   (Unix timestamp) when the password reset can be retried
ResetPasswordResultDeclined :: Maybe Int -> ResetPasswordResult

[retry_date] :: ResetPasswordResult -> Maybe Int
instance GHC.Classes.Eq TD.Data.ResetPasswordResult.ResetPasswordResult
instance GHC.Show.Show TD.Data.ResetPasswordResult.ResetPasswordResult
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.ResetPasswordResult.ResetPasswordResult
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.ResetPasswordResult.ResetPasswordResult


module TD.Data.RemoteFile

data RemoteFile

-- | Represents a remote file
RemoteFile :: Maybe Int -> Maybe Bool -> Maybe Bool -> Maybe String -> Maybe String -> RemoteFile

-- | Size of the remote available part of the file, in bytes; 0 if unknown
[uploaded_size] :: RemoteFile -> Maybe Int

-- | True, if a remote copy is fully available
[is_uploading_completed] :: RemoteFile -> Maybe Bool

-- | True, if the file is currently being uploaded (or a remote copy is
--   being generated by some other means)
[is_uploading_active] :: RemoteFile -> Maybe Bool

-- | Unique file identifier; may be empty if unknown. The unique file
--   identifier which is the same for the same file even for different
--   users and is persistent over time
[unique_id] :: RemoteFile -> Maybe String

-- | Remote file identifier; may be empty. Can be used by the current user
--   across application restarts or even from other devices. Uniquely
--   identifies a file, but a file can have a lot of different valid
--   identifiers. If the ID starts with "<a>http://"</a> or
--   "<a>https://"</a>, it represents the HTTP URL of the file. TDLib is
--   currently unable to download files if only their URL is known. If
--   downloadFile/addFileToDownloads is called on such a file or if it is
--   sent to a secret chat, TDLib starts a file generation process by
--   sending updateFileGenerationStart to the application with the HTTP URL
--   in the original_path and "" as the conversion string. Application must
--   generate the file by downloading it to the specified location
[_id] :: RemoteFile -> Maybe String
instance GHC.Classes.Eq TD.Data.RemoteFile.RemoteFile
instance GHC.Show.Show TD.Data.RemoteFile.RemoteFile
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.RemoteFile.RemoteFile
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.RemoteFile.RemoteFile


module TD.Data.RecoveryEmailAddress

data RecoveryEmailAddress

-- | Contains information about the current recovery email address
--   @recovery_email_address Recovery email address
RecoveryEmailAddress :: Maybe String -> RecoveryEmailAddress

[recovery_email_address] :: RecoveryEmailAddress -> Maybe String
instance GHC.Classes.Eq TD.Data.RecoveryEmailAddress.RecoveryEmailAddress
instance GHC.Show.Show TD.Data.RecoveryEmailAddress.RecoveryEmailAddress
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.RecoveryEmailAddress.RecoveryEmailAddress
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.RecoveryEmailAddress.RecoveryEmailAddress


module TD.Data.PushReceiverId

data PushReceiverId

-- | Contains a globally unique push receiver identifier, which can be used
--   to identify which account has received a push notification @id The
--   globally unique identifier of push notification subscription
PushReceiverId :: Maybe Int -> PushReceiverId

[_id] :: PushReceiverId -> Maybe Int
instance GHC.Classes.Eq TD.Data.PushReceiverId.PushReceiverId
instance GHC.Show.Show TD.Data.PushReceiverId.PushReceiverId
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.PushReceiverId.PushReceiverId
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.PushReceiverId.PushReceiverId


module TD.Data.PublicChatType

-- | Describes a type of public chats
data PublicChatType

-- | The chat is public, because it has username
PublicChatTypeHasUsername :: PublicChatType

-- | The chat is public, because it is a location-based supergroup
PublicChatTypeIsLocationBased :: PublicChatType
instance GHC.Classes.Eq TD.Data.PublicChatType.PublicChatType
instance GHC.Show.Show TD.Data.PublicChatType.PublicChatType
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.PublicChatType.PublicChatType
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.PublicChatType.PublicChatType


module TD.Query.GetCreatedPublicChats

-- | Returns a list of public chats of the specified type, owned by the
--   user @type Type of the public chats to return
data GetCreatedPublicChats
GetCreatedPublicChats :: Maybe PublicChatType -> GetCreatedPublicChats

[_type] :: GetCreatedPublicChats -> Maybe PublicChatType
instance GHC.Classes.Eq TD.Query.GetCreatedPublicChats.GetCreatedPublicChats
instance GHC.Show.Show TD.Query.GetCreatedPublicChats.GetCreatedPublicChats
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetCreatedPublicChats.GetCreatedPublicChats


module TD.Query.CheckCreatedPublicChatsLimit

-- | Checks whether the maximum number of owned public chats has been
--   reached. Returns corresponding error if the limit was reached. The
--   limit can be increased with Telegram Premium @type Type of the public
--   chats, for which to check the limit
data CheckCreatedPublicChatsLimit
CheckCreatedPublicChatsLimit :: Maybe PublicChatType -> CheckCreatedPublicChatsLimit

[_type] :: CheckCreatedPublicChatsLimit -> Maybe PublicChatType
instance GHC.Classes.Eq TD.Query.CheckCreatedPublicChatsLimit.CheckCreatedPublicChatsLimit
instance GHC.Show.Show TD.Query.CheckCreatedPublicChatsLimit.CheckCreatedPublicChatsLimit
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.CheckCreatedPublicChatsLimit.CheckCreatedPublicChatsLimit


module TD.Data.ProxyType

-- | Describes the type of a proxy server
data ProxyType

-- | A SOCKS5 proxy server <tt>username Username for logging in; may be
--   empty </tt>password Password for logging in; may be empty
ProxyTypeSocks5 :: Maybe String -> Maybe String -> ProxyType

[password] :: ProxyType -> Maybe String

[username] :: ProxyType -> Maybe String

-- | A HTTP transparent proxy server <tt>username Username for logging in;
--   may be empty </tt>password Password for logging in; may be empty
--   @http_only Pass true if the proxy supports only HTTP requests and
--   doesn't support transparent TCP connections via HTTP CONNECT method
ProxyTypeHttp :: Maybe Bool -> Maybe String -> Maybe String -> ProxyType

[http_only] :: ProxyType -> Maybe Bool

[password] :: ProxyType -> Maybe String

[username] :: ProxyType -> Maybe String

-- | An MTProto proxy server @secret The proxy's secret in hexadecimal
--   encoding
ProxyTypeMtproto :: Maybe String -> ProxyType

[secret] :: ProxyType -> Maybe String
instance GHC.Classes.Eq TD.Data.ProxyType.ProxyType
instance GHC.Show.Show TD.Data.ProxyType.ProxyType
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.ProxyType.ProxyType
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.ProxyType.ProxyType


module TD.Query.TestProxy

-- | Sends a simple network request to the Telegram servers via proxy; for
--   testing only. Can be called before authorization <tt>server Proxy
--   server IP address </tt>port Proxy server port @type Proxy type
data TestProxy
TestProxy :: Maybe Float -> Maybe Int -> Maybe ProxyType -> Maybe Int -> Maybe String -> TestProxy

[timeout] :: TestProxy -> Maybe Float

-- | Identifier of a datacenter with which to test connection @timeout The
--   maximum overall timeout for the request
[dc_id] :: TestProxy -> Maybe Int

[_type] :: TestProxy -> Maybe ProxyType

[port] :: TestProxy -> Maybe Int

[server] :: TestProxy -> Maybe String
instance GHC.Classes.Eq TD.Query.TestProxy.TestProxy
instance GHC.Show.Show TD.Query.TestProxy.TestProxy
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.TestProxy.TestProxy


module TD.Query.EditProxy

-- | Edits an existing proxy server for network requests. Can be called
--   before authorization <tt>proxy_id Proxy identifier </tt>server Proxy
--   server IP address <tt>port Proxy server port </tt>enable Pass true to
--   immediately enable the proxy @type Proxy type
data EditProxy
EditProxy :: Maybe ProxyType -> Maybe Bool -> Maybe Int -> Maybe String -> Maybe Int -> EditProxy

[_type] :: EditProxy -> Maybe ProxyType

[enable] :: EditProxy -> Maybe Bool

[port] :: EditProxy -> Maybe Int

[server] :: EditProxy -> Maybe String

[proxy_id] :: EditProxy -> Maybe Int
instance GHC.Classes.Eq TD.Query.EditProxy.EditProxy
instance GHC.Show.Show TD.Query.EditProxy.EditProxy
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.EditProxy.EditProxy


module TD.Query.AddProxy

-- | Adds a proxy server for network requests. Can be called before
--   authorization <tt>server Proxy server IP address </tt>port Proxy
--   server port <tt>enable Pass true to immediately enable the proxy
--   </tt>type Proxy type
data AddProxy
AddProxy :: Maybe ProxyType -> Maybe Bool -> Maybe Int -> Maybe String -> AddProxy

[_type] :: AddProxy -> Maybe ProxyType

[enable] :: AddProxy -> Maybe Bool

[port] :: AddProxy -> Maybe Int

[server] :: AddProxy -> Maybe String
instance GHC.Classes.Eq TD.Query.AddProxy.AddProxy
instance GHC.Show.Show TD.Query.AddProxy.AddProxy
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.AddProxy.AddProxy


module TD.Data.Proxy

data Proxy

-- | Contains information about a proxy server <tt>id Unique identifier of
--   the proxy </tt>server Proxy server IP address <tt>port Proxy server
--   port </tt>last_used_date Point in time (Unix timestamp) when the proxy
--   was last used; 0 if never <tt>is_enabled True, if the proxy is enabled
--   now </tt>type Type of the proxy
Proxy :: Maybe ProxyType -> Maybe Bool -> Maybe Int -> Maybe Int -> Maybe String -> Maybe Int -> Proxy

[_type] :: Proxy -> Maybe ProxyType

[is_enabled] :: Proxy -> Maybe Bool

[last_used_date] :: Proxy -> Maybe Int

[port] :: Proxy -> Maybe Int

[server] :: Proxy -> Maybe String

[_id] :: Proxy -> Maybe Int
instance GHC.Classes.Eq TD.Data.Proxy.Proxy
instance GHC.Show.Show TD.Data.Proxy.Proxy
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.Proxy.Proxy
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.Proxy.Proxy


module TD.Data.Proxies

data Proxies

-- | Represents a list of proxy servers @proxies List of proxy servers
Proxies :: Maybe [Proxy] -> Proxies

[proxies] :: Proxies -> Maybe [Proxy]
instance GHC.Classes.Eq TD.Data.Proxies.Proxies
instance GHC.Show.Show TD.Data.Proxies.Proxies
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.Proxies.Proxies
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.Proxies.Proxies


module TD.Data.PremiumLimitType

-- | Describes type of a limit, increased for Premium users
data PremiumLimitType

-- | The maximum number of joined supergroups and channels
PremiumLimitTypeSupergroupCount :: PremiumLimitType

-- | The maximum number of pinned chats in the main chat list
PremiumLimitTypePinnedChatCount :: PremiumLimitType

-- | The maximum number of created public chats
PremiumLimitTypeCreatedPublicChatCount :: PremiumLimitType

-- | The maximum number of saved animations
PremiumLimitTypeSavedAnimationCount :: PremiumLimitType

-- | The maximum number of favorite stickers
PremiumLimitTypeFavoriteStickerCount :: PremiumLimitType

-- | The maximum number of chat filters
PremiumLimitTypeChatFilterCount :: PremiumLimitType

-- | The maximum number of pinned and always included, or always excluded
--   chats in a chat filter
PremiumLimitTypeChatFilterChosenChatCount :: PremiumLimitType

-- | The maximum number of pinned chats in the archive chat list
PremiumLimitTypePinnedArchivedChatCount :: PremiumLimitType

-- | The maximum length of sent media caption
PremiumLimitTypeCaptionLength :: PremiumLimitType

-- | The maximum length of the user's bio
PremiumLimitTypeBioLength :: PremiumLimitType
instance GHC.Classes.Eq TD.Data.PremiumLimitType.PremiumLimitType
instance GHC.Show.Show TD.Data.PremiumLimitType.PremiumLimitType
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.PremiumLimitType.PremiumLimitType
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.PremiumLimitType.PremiumLimitType


module TD.Query.GetPremiumLimit

-- | Returns information about a limit, increased for Premium users.
--   Returns a 404 error if the limit is unknown @limit_type Type of the
--   limit
data GetPremiumLimit
GetPremiumLimit :: Maybe PremiumLimitType -> GetPremiumLimit

[limit_type] :: GetPremiumLimit -> Maybe PremiumLimitType
instance GHC.Classes.Eq TD.Query.GetPremiumLimit.GetPremiumLimit
instance GHC.Show.Show TD.Query.GetPremiumLimit.GetPremiumLimit
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetPremiumLimit.GetPremiumLimit


module TD.Data.PremiumLimit

data PremiumLimit

-- | Contains information about a limit, increased for Premium users
--   <tt>type The type of the limit </tt>default_value Default value of the
--   limit @premium_value Value of the limit for Premium users
PremiumLimit :: Maybe Int -> Maybe Int -> Maybe PremiumLimitType -> PremiumLimit

[premium_value] :: PremiumLimit -> Maybe Int

[default_value] :: PremiumLimit -> Maybe Int

[_type] :: PremiumLimit -> Maybe PremiumLimitType
instance GHC.Classes.Eq TD.Data.PremiumLimit.PremiumLimit
instance GHC.Show.Show TD.Data.PremiumLimit.PremiumLimit
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.PremiumLimit.PremiumLimit
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.PremiumLimit.PremiumLimit


module TD.Data.PremiumFeature

-- | Describes a feature available to Premium users
data PremiumFeature

-- | Increased limits
PremiumFeatureIncreasedLimits :: PremiumFeature

-- | Increased maximum upload file size
PremiumFeatureIncreasedUploadFileSize :: PremiumFeature

-- | Improved download speed
PremiumFeatureImprovedDownloadSpeed :: PremiumFeature

-- | The ability to convert voice notes to text
PremiumFeatureVoiceRecognition :: PremiumFeature

-- | Disabled ads
PremiumFeatureDisabledAds :: PremiumFeature

-- | Allowed to use more reactions
PremiumFeatureUniqueReactions :: PremiumFeature

-- | Allowed to use premium stickers with unique effects
PremiumFeatureUniqueStickers :: PremiumFeature

-- | Ability to change position of the main chat list, archive and mute all
--   new chats from non-contacts, and completely disable notifications
--   about the user's contacts joined Telegram
PremiumFeatureAdvancedChatManagement :: PremiumFeature

-- | A badge in the user's profile
PremiumFeatureProfileBadge :: PremiumFeature

-- | Profile photo animation on message and chat screens
PremiumFeatureAnimatedProfilePhoto :: PremiumFeature

-- | Allowed to set a premium appllication icons
PremiumFeatureAppIcons :: PremiumFeature
instance GHC.Classes.Eq TD.Data.PremiumFeature.PremiumFeature
instance GHC.Show.Show TD.Data.PremiumFeature.PremiumFeature
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.PremiumFeature.PremiumFeature
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.PremiumFeature.PremiumFeature


module TD.Query.ViewPremiumFeature

-- | Informs TDLib that the user viewed detailed information about a
--   Premium feature on the Premium features screen @feature The viewed
--   premium feature
data ViewPremiumFeature
ViewPremiumFeature :: Maybe PremiumFeature -> ViewPremiumFeature

[feature] :: ViewPremiumFeature -> Maybe PremiumFeature
instance GHC.Classes.Eq TD.Query.ViewPremiumFeature.ViewPremiumFeature
instance GHC.Show.Show TD.Query.ViewPremiumFeature.ViewPremiumFeature
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ViewPremiumFeature.ViewPremiumFeature


module TD.Data.PremiumSource

-- | Describes a source from which the Premium features screen is opened
data PremiumSource

-- | A limit was exceeded @limit_type Type of the exceeded limit
PremiumSourceLimitExceeded :: Maybe PremiumLimitType -> PremiumSource

[limit_type] :: PremiumSource -> Maybe PremiumLimitType

-- | A user tried to use a Premium feature @feature The used feature
PremiumSourceFeature :: Maybe PremiumFeature -> PremiumSource

[feature] :: PremiumSource -> Maybe PremiumFeature

-- | A user opened an internal link of the type
--   internalLinkTypePremiumFeatures @referrer The referrer from the link
PremiumSourceLink :: Maybe String -> PremiumSource

[referrer] :: PremiumSource -> Maybe String

-- | A user opened the Premium features screen from settings
PremiumSourceSettings :: PremiumSource
instance GHC.Classes.Eq TD.Data.PremiumSource.PremiumSource
instance GHC.Show.Show TD.Data.PremiumSource.PremiumSource
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.PremiumSource.PremiumSource
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.PremiumSource.PremiumSource


module TD.Query.GetPremiumFeatures

-- | Returns information about features, available to Premium users @source
--   Source of the request; pass null if the method is called from some
--   non-standard source
data GetPremiumFeatures
GetPremiumFeatures :: Maybe PremiumSource -> GetPremiumFeatures

[source] :: GetPremiumFeatures -> Maybe PremiumSource
instance GHC.Classes.Eq TD.Query.GetPremiumFeatures.GetPremiumFeatures
instance GHC.Show.Show TD.Query.GetPremiumFeatures.GetPremiumFeatures
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetPremiumFeatures.GetPremiumFeatures


module TD.Data.PollOption

data PollOption

-- | Describes one answer option of a poll <tt>text Option text; 1-100
--   characters </tt>voter_count Number of voters for this option,
--   available only for closed or voted polls @vote_percentage The
--   percentage of votes for this option; 0-100
PollOption :: Maybe Bool -> Maybe Bool -> Maybe Int -> Maybe Int -> Maybe String -> PollOption

[is_being_chosen] :: PollOption -> Maybe Bool

-- | True, if the option was chosen by the user @is_being_chosen True, if
--   the option is being chosen by a pending setPollAnswer request
[is_chosen] :: PollOption -> Maybe Bool

[vote_percentage] :: PollOption -> Maybe Int

[voter_count] :: PollOption -> Maybe Int

[text] :: PollOption -> Maybe String
instance GHC.Classes.Eq TD.Data.PollOption.PollOption
instance GHC.Show.Show TD.Data.PollOption.PollOption
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.PollOption.PollOption
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.PollOption.PollOption


module TD.Data.Point

data Point

-- | A point on a Cartesian plane <tt>x The point's first coordinate </tt>y
--   The point's second coordinate
Point :: Maybe Float -> Maybe Float -> Point

[y] :: Point -> Maybe Float

[x] :: Point -> Maybe Float
instance GHC.Classes.Eq TD.Data.Point.Point
instance GHC.Show.Show TD.Data.Point.Point
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.Point.Point
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.Point.Point


module TD.Data.VectorPathCommand

-- | Represents a vector path command
data VectorPathCommand

-- | A straight line to a given point @end_point The end point of the
--   straight line
VectorPathCommandLine :: Maybe Point -> VectorPathCommand

[end_point] :: VectorPathCommand -> Maybe Point

-- | A cubic Bézier curve to a given point <tt>start_control_point The
--   start control point of the curve </tt>end_control_point The end
--   control point of the curve @end_point The end point of the curve
VectorPathCommandCubicBezierCurve :: Maybe Point -> Maybe Point -> Maybe Point -> VectorPathCommand

[end_point] :: VectorPathCommand -> Maybe Point

[end_control_point] :: VectorPathCommand -> Maybe Point

[start_control_point] :: VectorPathCommand -> Maybe Point
instance GHC.Classes.Eq TD.Data.VectorPathCommand.VectorPathCommand
instance GHC.Show.Show TD.Data.VectorPathCommand.VectorPathCommand
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.VectorPathCommand.VectorPathCommand
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.VectorPathCommand.VectorPathCommand


module TD.Data.PhoneNumberAuthenticationSettings

data PhoneNumberAuthenticationSettings

-- | Contains settings for the authentication of the user's phone number
PhoneNumberAuthenticationSettings :: Maybe [String] -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> PhoneNumberAuthenticationSettings

-- | List of up to 20 authentication tokens, recently received in
--   updateOption("authentication_token") in previously logged out sessions
[authentication_tokens] :: PhoneNumberAuthenticationSettings -> Maybe [String]

-- | For official applications only. True, if the application can use
--   Android SMS Retriever API (requires Google Play Services &gt;= 10.2)
--   to automatically receive the authentication code from the SMS. See
--   <a>https://developers.google.com/identity/sms-retriever/</a> for more
--   details
[allow_sms_retriever_api] :: PhoneNumberAuthenticationSettings -> Maybe Bool

-- | Pass true if the authenticated phone number is used on the current
--   device
[is_current_phone_number] :: PhoneNumberAuthenticationSettings -> Maybe Bool

-- | Pass true if the authentication code may be sent via a missed call to
--   the specified phone number
[allow_missed_call] :: PhoneNumberAuthenticationSettings -> Maybe Bool

-- | Pass true if the authentication code may be sent via a flash call to
--   the specified phone number
[allow_flash_call] :: PhoneNumberAuthenticationSettings -> Maybe Bool
instance GHC.Classes.Eq TD.Data.PhoneNumberAuthenticationSettings.PhoneNumberAuthenticationSettings
instance GHC.Show.Show TD.Data.PhoneNumberAuthenticationSettings.PhoneNumberAuthenticationSettings
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.PhoneNumberAuthenticationSettings.PhoneNumberAuthenticationSettings
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.PhoneNumberAuthenticationSettings.PhoneNumberAuthenticationSettings


module TD.Query.SetAuthenticationPhoneNumber

-- | Sets the phone number of the user and sends an authentication code to
--   the user. Works only when the current authorization state is
--   authorizationStateWaitPhoneNumber, or if there is no pending
--   authentication query and the current authorization state is
--   authorizationStateWaitCode, authorizationStateWaitRegistration, or
--   authorizationStateWaitPassword
data SetAuthenticationPhoneNumber
SetAuthenticationPhoneNumber :: Maybe PhoneNumberAuthenticationSettings -> Maybe String -> SetAuthenticationPhoneNumber

[settings] :: SetAuthenticationPhoneNumber -> Maybe PhoneNumberAuthenticationSettings

-- | The phone number of the user, in international format @settings
--   Settings for the authentication of the user's phone number; pass null
--   to use default settings
[phone_number] :: SetAuthenticationPhoneNumber -> Maybe String
instance GHC.Classes.Eq TD.Query.SetAuthenticationPhoneNumber.SetAuthenticationPhoneNumber
instance GHC.Show.Show TD.Query.SetAuthenticationPhoneNumber.SetAuthenticationPhoneNumber
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SetAuthenticationPhoneNumber.SetAuthenticationPhoneNumber


module TD.Query.SendPhoneNumberVerificationCode

-- | Sends a code to verify a phone number to be added to a user's Telegram
--   Passport
data SendPhoneNumberVerificationCode
SendPhoneNumberVerificationCode :: Maybe PhoneNumberAuthenticationSettings -> Maybe String -> SendPhoneNumberVerificationCode

[settings] :: SendPhoneNumberVerificationCode -> Maybe PhoneNumberAuthenticationSettings

-- | The phone number of the user, in international format @settings
--   Settings for the authentication of the user's phone number; pass null
--   to use default settings
[phone_number] :: SendPhoneNumberVerificationCode -> Maybe String
instance GHC.Classes.Eq TD.Query.SendPhoneNumberVerificationCode.SendPhoneNumberVerificationCode
instance GHC.Show.Show TD.Query.SendPhoneNumberVerificationCode.SendPhoneNumberVerificationCode
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SendPhoneNumberVerificationCode.SendPhoneNumberVerificationCode


module TD.Query.SendPhoneNumberConfirmationCode

-- | Sends phone number confirmation code to handle links of the type
--   internalLinkTypePhoneNumberConfirmation <tt>hash Hash value from the
--   link </tt>phone_number Phone number value from the link @settings
--   Settings for the authentication of the user's phone number; pass null
--   to use default settings
data SendPhoneNumberConfirmationCode
SendPhoneNumberConfirmationCode :: Maybe PhoneNumberAuthenticationSettings -> Maybe String -> Maybe String -> SendPhoneNumberConfirmationCode

[settings] :: SendPhoneNumberConfirmationCode -> Maybe PhoneNumberAuthenticationSettings

[phone_number] :: SendPhoneNumberConfirmationCode -> Maybe String

[hash] :: SendPhoneNumberConfirmationCode -> Maybe String
instance GHC.Classes.Eq TD.Query.SendPhoneNumberConfirmationCode.SendPhoneNumberConfirmationCode
instance GHC.Show.Show TD.Query.SendPhoneNumberConfirmationCode.SendPhoneNumberConfirmationCode
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SendPhoneNumberConfirmationCode.SendPhoneNumberConfirmationCode


module TD.Query.ChangePhoneNumber

-- | Changes the phone number of the user and sends an authentication code
--   to the user's new phone number. On success, returns information about
--   the sent code
data ChangePhoneNumber
ChangePhoneNumber :: Maybe PhoneNumberAuthenticationSettings -> Maybe String -> ChangePhoneNumber

[settings] :: ChangePhoneNumber -> Maybe PhoneNumberAuthenticationSettings

-- | The new phone number of the user in international format @settings
--   Settings for the authentication of the user's phone number; pass null
--   to use default settings
[phone_number] :: ChangePhoneNumber -> Maybe String
instance GHC.Classes.Eq TD.Query.ChangePhoneNumber.ChangePhoneNumber
instance GHC.Show.Show TD.Query.ChangePhoneNumber.ChangePhoneNumber
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ChangePhoneNumber.ChangePhoneNumber


module TD.Data.PaymentResult

data PaymentResult

-- | Contains the result of a payment request <tt>success True, if the
--   payment request was successful; otherwise the verification_url will be
--   non-empty </tt>verification_url URL for additional payment credentials
--   verification
PaymentResult :: Maybe String -> Maybe Bool -> PaymentResult

[verification_url] :: PaymentResult -> Maybe String

[success] :: PaymentResult -> Maybe Bool
instance GHC.Classes.Eq TD.Data.PaymentResult.PaymentResult
instance GHC.Show.Show TD.Data.PaymentResult.PaymentResult
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.PaymentResult.PaymentResult
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.PaymentResult.PaymentResult


module TD.Data.PaymentProvider

-- | Contains information about a payment provider
data PaymentProvider

-- | Smart Glocal payment provider @public_token Public payment token
PaymentProviderSmartGlocal :: Maybe String -> PaymentProvider

[public_token] :: PaymentProvider -> Maybe String

-- | Stripe payment provider <tt>publishable_key Stripe API publishable key
--   </tt>need_country True, if the user country must be provided
--   <tt>need_postal_code True, if the user ZIP/postal code must be
--   provided </tt>need_cardholder_name True, if the cardholder name must
--   be provided
PaymentProviderStripe :: Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe String -> PaymentProvider

[need_cardholder_name] :: PaymentProvider -> Maybe Bool

[need_postal_code] :: PaymentProvider -> Maybe Bool

[need_country] :: PaymentProvider -> Maybe Bool

[publishable_key] :: PaymentProvider -> Maybe String

-- | Some other payment provider, for which a web payment form must be
--   shown @url Payment form URL
PaymentProviderOther :: Maybe String -> PaymentProvider

[url] :: PaymentProvider -> Maybe String
instance GHC.Classes.Eq TD.Data.PaymentProvider.PaymentProvider
instance GHC.Show.Show TD.Data.PaymentProvider.PaymentProvider
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.PaymentProvider.PaymentProvider
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.PaymentProvider.PaymentProvider


module TD.Data.PassportElementType

-- | Contains the type of a Telegram Passport element
data PassportElementType

-- | A Telegram Passport element containing the user's personal details
PassportElementTypePersonalDetails :: PassportElementType

-- | A Telegram Passport element containing the user's passport
PassportElementTypePassport :: PassportElementType

-- | A Telegram Passport element containing the user's driver license
PassportElementTypeDriverLicense :: PassportElementType

-- | A Telegram Passport element containing the user's identity card
PassportElementTypeIdentityCard :: PassportElementType

-- | A Telegram Passport element containing the user's internal passport
PassportElementTypeInternalPassport :: PassportElementType

-- | A Telegram Passport element containing the user's address
PassportElementTypeAddress :: PassportElementType

-- | A Telegram Passport element containing the user's utility bill
PassportElementTypeUtilityBill :: PassportElementType

-- | A Telegram Passport element containing the user's bank statement
PassportElementTypeBankStatement :: PassportElementType

-- | A Telegram Passport element containing the user's rental agreement
PassportElementTypeRentalAgreement :: PassportElementType

-- | A Telegram Passport element containing the registration page of the
--   user's passport
PassportElementTypePassportRegistration :: PassportElementType

-- | A Telegram Passport element containing the user's temporary
--   registration
PassportElementTypeTemporaryRegistration :: PassportElementType

-- | A Telegram Passport element containing the user's phone number
PassportElementTypePhoneNumber :: PassportElementType

-- | A Telegram Passport element containing the user's email address
PassportElementTypeEmailAddress :: PassportElementType
instance GHC.Classes.Eq TD.Data.PassportElementType.PassportElementType
instance GHC.Show.Show TD.Data.PassportElementType.PassportElementType
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.PassportElementType.PassportElementType
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.PassportElementType.PassportElementType


module TD.Query.SendPassportAuthorizationForm

-- | Sends a Telegram Passport authorization form, effectively sharing data
--   with the service. This method must be called after
--   getPassportAuthorizationFormAvailableElements if some previously
--   available elements are going to be reused
data SendPassportAuthorizationForm
SendPassportAuthorizationForm :: Maybe [PassportElementType] -> Maybe Int -> SendPassportAuthorizationForm

[types] :: SendPassportAuthorizationForm -> Maybe [PassportElementType]

-- | Authorization form identifier @types Types of Telegram Passport
--   elements chosen by user to complete the authorization form
[autorization_form_id] :: SendPassportAuthorizationForm -> Maybe Int
instance GHC.Classes.Eq TD.Query.SendPassportAuthorizationForm.SendPassportAuthorizationForm
instance GHC.Show.Show TD.Query.SendPassportAuthorizationForm.SendPassportAuthorizationForm
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SendPassportAuthorizationForm.SendPassportAuthorizationForm


module TD.Query.GetPassportElement

-- | Returns one of the available Telegram Passport elements <tt>type
--   Telegram Passport element type </tt>password Password of the current
--   user
data GetPassportElement
GetPassportElement :: Maybe String -> Maybe PassportElementType -> GetPassportElement

[password] :: GetPassportElement -> Maybe String

[_type] :: GetPassportElement -> Maybe PassportElementType
instance GHC.Classes.Eq TD.Query.GetPassportElement.GetPassportElement
instance GHC.Show.Show TD.Query.GetPassportElement.GetPassportElement
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetPassportElement.GetPassportElement


module TD.Query.DeletePassportElement

-- | Deletes a Telegram Passport element @type Element type
data DeletePassportElement
DeletePassportElement :: Maybe PassportElementType -> DeletePassportElement

[_type] :: DeletePassportElement -> Maybe PassportElementType
instance GHC.Classes.Eq TD.Query.DeletePassportElement.DeletePassportElement
instance GHC.Show.Show TD.Query.DeletePassportElement.DeletePassportElement
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.DeletePassportElement.DeletePassportElement


module TD.Data.PassportSuitableElement

data PassportSuitableElement

-- | Contains information about a Telegram Passport element that was
--   requested by a service <tt>type Type of the element
--   </tt>is_selfie_required True, if a selfie is required with the
--   identity document
PassportSuitableElement :: Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe PassportElementType -> PassportSuitableElement

[is_native_name_required] :: PassportSuitableElement -> Maybe Bool

-- | True, if a certified English translation is required with the document
--   @is_native_name_required True, if personal details must include the
--   user's name in the language of their country of residence
[is_translation_required] :: PassportSuitableElement -> Maybe Bool

[is_selfie_required] :: PassportSuitableElement -> Maybe Bool

[_type] :: PassportSuitableElement -> Maybe PassportElementType
instance GHC.Classes.Eq TD.Data.PassportSuitableElement.PassportSuitableElement
instance GHC.Show.Show TD.Data.PassportSuitableElement.PassportSuitableElement
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.PassportSuitableElement.PassportSuitableElement
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.PassportSuitableElement.PassportSuitableElement


module TD.Data.PassportRequiredElement

data PassportRequiredElement

-- | Contains a description of the required Telegram Passport element that
--   was requested by a service @suitable_elements List of Telegram
--   Passport elements any of which is enough to provide
PassportRequiredElement :: Maybe [PassportSuitableElement] -> PassportRequiredElement

[suitable_elements] :: PassportRequiredElement -> Maybe [PassportSuitableElement]
instance GHC.Classes.Eq TD.Data.PassportRequiredElement.PassportRequiredElement
instance GHC.Show.Show TD.Data.PassportRequiredElement.PassportRequiredElement
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.PassportRequiredElement.PassportRequiredElement
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.PassportRequiredElement.PassportRequiredElement


module TD.Data.PassportElementErrorSource

-- | Contains the description of an error in a Telegram Passport element
data PassportElementErrorSource

-- | The element contains an error in an unspecified place. The error will
--   be considered resolved when new data is added
PassportElementErrorSourceUnspecified :: PassportElementErrorSource

-- | One of the data fields contains an error. The error will be considered
--   resolved when the value of the field changes @field_name Field name
PassportElementErrorSourceDataField :: Maybe String -> PassportElementErrorSource

[field_name] :: PassportElementErrorSource -> Maybe String

-- | The front side of the document contains an error. The error will be
--   considered resolved when the file with the front side changes
PassportElementErrorSourceFrontSide :: PassportElementErrorSource

-- | The reverse side of the document contains an error. The error will be
--   considered resolved when the file with the reverse side changes
PassportElementErrorSourceReverseSide :: PassportElementErrorSource

-- | The selfie with the document contains an error. The error will be
--   considered resolved when the file with the selfie changes
PassportElementErrorSourceSelfie :: PassportElementErrorSource

-- | One of files with the translation of the document contains an error.
--   The error will be considered resolved when the file changes
--   @file_index Index of a file with the error
PassportElementErrorSourceTranslationFile :: Maybe Int -> PassportElementErrorSource

[file_index] :: PassportElementErrorSource -> Maybe Int

-- | The translation of the document contains an error. The error will be
--   considered resolved when the list of translation files changes
PassportElementErrorSourceTranslationFiles :: PassportElementErrorSource

-- | The file contains an error. The error will be considered resolved when
--   the file changes @file_index Index of a file with the error
PassportElementErrorSourceFile :: Maybe Int -> PassportElementErrorSource

[file_index] :: PassportElementErrorSource -> Maybe Int

-- | The list of attached files contains an error. The error will be
--   considered resolved when the list of files changes
PassportElementErrorSourceFiles :: PassportElementErrorSource
instance GHC.Classes.Eq TD.Data.PassportElementErrorSource.PassportElementErrorSource
instance GHC.Show.Show TD.Data.PassportElementErrorSource.PassportElementErrorSource
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.PassportElementErrorSource.PassportElementErrorSource
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.PassportElementErrorSource.PassportElementErrorSource


module TD.Data.PassportElementError

data PassportElementError

-- | Contains the description of an error in a Telegram Passport element
--   <tt>type Type of the Telegram Passport element which has the error
--   </tt>message Error message @source Error source
PassportElementError :: Maybe PassportElementErrorSource -> Maybe String -> Maybe PassportElementType -> PassportElementError

[source] :: PassportElementError -> Maybe PassportElementErrorSource

[message] :: PassportElementError -> Maybe String

[_type] :: PassportElementError -> Maybe PassportElementType
instance GHC.Classes.Eq TD.Data.PassportElementError.PassportElementError
instance GHC.Show.Show TD.Data.PassportElementError.PassportElementError
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.PassportElementError.PassportElementError
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.PassportElementError.PassportElementError


module TD.Data.PassportAuthorizationForm

data PassportAuthorizationForm

-- | Contains information about a Telegram Passport authorization form that
--   was requested @id Unique identifier of the authorization form
PassportAuthorizationForm :: Maybe String -> Maybe [PassportRequiredElement] -> Maybe Int -> PassportAuthorizationForm

-- | URL for the privacy policy of the service; may be empty
[privacy_policy_url] :: PassportAuthorizationForm -> Maybe String

-- | Telegram Passport elements that must be provided to complete the form
[required_elements] :: PassportAuthorizationForm -> Maybe [PassportRequiredElement]

[_id] :: PassportAuthorizationForm -> Maybe Int
instance GHC.Classes.Eq TD.Data.PassportAuthorizationForm.PassportAuthorizationForm
instance GHC.Show.Show TD.Data.PassportAuthorizationForm.PassportAuthorizationForm
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.PassportAuthorizationForm.PassportAuthorizationForm
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.PassportAuthorizationForm.PassportAuthorizationForm


module TD.Data.PageBlockVerticalAlignment

-- | Describes a Vertical alignment of a table cell content
data PageBlockVerticalAlignment

-- | The content must be top-aligned
PageBlockVerticalAlignmentTop :: PageBlockVerticalAlignment

-- | The content must be middle-aligned
PageBlockVerticalAlignmentMiddle :: PageBlockVerticalAlignment

-- | The content must be bottom-aligned
PageBlockVerticalAlignmentBottom :: PageBlockVerticalAlignment
instance GHC.Classes.Eq TD.Data.PageBlockVerticalAlignment.PageBlockVerticalAlignment
instance GHC.Show.Show TD.Data.PageBlockVerticalAlignment.PageBlockVerticalAlignment
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.PageBlockVerticalAlignment.PageBlockVerticalAlignment
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.PageBlockVerticalAlignment.PageBlockVerticalAlignment


module TD.Data.PageBlockListItem

data PageBlockListItem

-- | Describes an item of a list page block <tt>label Item label
--   </tt>page_blocks Item blocks
PageBlockListItem :: Maybe [PageBlock] -> Maybe String -> PageBlockListItem

[page_blocks] :: PageBlockListItem -> Maybe [PageBlock]

[label] :: PageBlockListItem -> Maybe String
instance GHC.Classes.Eq TD.Data.PageBlockListItem.PageBlockListItem
instance GHC.Show.Show TD.Data.PageBlockListItem.PageBlockListItem
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.PageBlockListItem.PageBlockListItem
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.PageBlockListItem.PageBlockListItem


module TD.Data.PageBlockHorizontalAlignment

-- | Describes a horizontal alignment of a table cell content
data PageBlockHorizontalAlignment

-- | The content must be left-aligned
PageBlockHorizontalAlignmentLeft :: PageBlockHorizontalAlignment

-- | The content must be center-aligned
PageBlockHorizontalAlignmentCenter :: PageBlockHorizontalAlignment

-- | The content must be right-aligned
PageBlockHorizontalAlignmentRight :: PageBlockHorizontalAlignment
instance GHC.Classes.Eq TD.Data.PageBlockHorizontalAlignment.PageBlockHorizontalAlignment
instance GHC.Show.Show TD.Data.PageBlockHorizontalAlignment.PageBlockHorizontalAlignment
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.PageBlockHorizontalAlignment.PageBlockHorizontalAlignment
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.PageBlockHorizontalAlignment.PageBlockHorizontalAlignment


module TD.Data.OptionValue

-- | Represents the value of an option
data OptionValue

-- | Represents a boolean option @value The value of the option
OptionValueBoolean :: Maybe Bool -> OptionValue

[value] :: OptionValue -> Maybe Bool

-- | Represents an unknown option or an option which has a default value
OptionValueEmpty :: OptionValue

-- | Represents an integer option @value The value of the option
OptionValueInteger :: Maybe Int -> OptionValue

[_value] :: OptionValue -> Maybe Int

-- | Represents a string option @value The value of the option
OptionValueString :: Maybe String -> OptionValue

[__value] :: OptionValue -> Maybe String
instance GHC.Classes.Eq TD.Data.OptionValue.OptionValue
instance GHC.Show.Show TD.Data.OptionValue.OptionValue
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.OptionValue.OptionValue
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.OptionValue.OptionValue


module TD.Query.SetOption

-- | Sets the value of an option. (Check the list of available options on
--   <a>https://core.telegram.org/tdlib/options.)</a> Only writable options
--   can be set. Can be called before authorization
data SetOption
SetOption :: Maybe OptionValue -> Maybe String -> SetOption

[value] :: SetOption -> Maybe OptionValue

-- | The name of the option @value The new value of the option; pass null
--   to reset option value to a default value
[name] :: SetOption -> Maybe String
instance GHC.Classes.Eq TD.Query.SetOption.SetOption
instance GHC.Show.Show TD.Query.SetOption.SetOption
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SetOption.SetOption


module TD.Data.Ok

data Ok

-- | An object of this type is returned on a successful function call for
--   certain functions
Ok :: Ok
instance GHC.Classes.Eq TD.Data.Ok.Ok
instance GHC.Show.Show TD.Data.Ok.Ok
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.Ok.Ok
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.Ok.Ok


module TD.Data.NotificationSettingsScope

-- | Describes the types of chats to which notification settings are
--   relevant
data NotificationSettingsScope

-- | Notification settings applied to all private and secret chats when the
--   corresponding chat setting has a default value
NotificationSettingsScopePrivateChats :: NotificationSettingsScope

-- | Notification settings applied to all basic group and supergroup chats
--   when the corresponding chat setting has a default value
NotificationSettingsScopeGroupChats :: NotificationSettingsScope

-- | Notification settings applied to all channel chats when the
--   corresponding chat setting has a default value
NotificationSettingsScopeChannelChats :: NotificationSettingsScope
instance GHC.Classes.Eq TD.Data.NotificationSettingsScope.NotificationSettingsScope
instance GHC.Show.Show TD.Data.NotificationSettingsScope.NotificationSettingsScope
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.NotificationSettingsScope.NotificationSettingsScope
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.NotificationSettingsScope.NotificationSettingsScope


module TD.Query.SetScopeNotificationSettings

-- | Changes notification settings for chats of a given type <tt>scope
--   Types of chats for which to change the notification settings
--   </tt>notification_settings The new notification settings for the given
--   scope
data SetScopeNotificationSettings
SetScopeNotificationSettings :: Maybe ScopeNotificationSettings -> Maybe NotificationSettingsScope -> SetScopeNotificationSettings

[notification_settings] :: SetScopeNotificationSettings -> Maybe ScopeNotificationSettings

[scope] :: SetScopeNotificationSettings -> Maybe NotificationSettingsScope
instance GHC.Classes.Eq TD.Query.SetScopeNotificationSettings.SetScopeNotificationSettings
instance GHC.Show.Show TD.Query.SetScopeNotificationSettings.SetScopeNotificationSettings
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SetScopeNotificationSettings.SetScopeNotificationSettings


module TD.Query.GetScopeNotificationSettings

-- | Returns the notification settings for chats of a given type @scope
--   Types of chats for which to return the notification settings
--   information
data GetScopeNotificationSettings
GetScopeNotificationSettings :: Maybe NotificationSettingsScope -> GetScopeNotificationSettings

[scope] :: GetScopeNotificationSettings -> Maybe NotificationSettingsScope
instance GHC.Classes.Eq TD.Query.GetScopeNotificationSettings.GetScopeNotificationSettings
instance GHC.Show.Show TD.Query.GetScopeNotificationSettings.GetScopeNotificationSettings
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetScopeNotificationSettings.GetScopeNotificationSettings


module TD.Query.GetChatNotificationSettingsExceptions

-- | Returns list of chats with non-default notification settings
data GetChatNotificationSettingsExceptions
GetChatNotificationSettingsExceptions :: Maybe Bool -> Maybe NotificationSettingsScope -> GetChatNotificationSettingsExceptions

-- | Pass true to include in the response chats with only non-default sound
[compare_sound] :: GetChatNotificationSettingsExceptions -> Maybe Bool

-- | If specified, only chats from the scope will be returned; pass null to
--   return chats from all scopes
[scope] :: GetChatNotificationSettingsExceptions -> Maybe NotificationSettingsScope
instance GHC.Classes.Eq TD.Query.GetChatNotificationSettingsExceptions.GetChatNotificationSettingsExceptions
instance GHC.Show.Show TD.Query.GetChatNotificationSettingsExceptions.GetChatNotificationSettingsExceptions
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetChatNotificationSettingsExceptions.GetChatNotificationSettingsExceptions


module TD.Data.NotificationGroupType

-- | Describes the type of notifications in a notification group
data NotificationGroupType

-- | A group containing notifications of type notificationTypeNewMessage
--   and notificationTypeNewPushMessage with ordinary unread messages
NotificationGroupTypeMessages :: NotificationGroupType

-- | A group containing notifications of type notificationTypeNewMessage
--   and notificationTypeNewPushMessage with unread mentions of the current
--   user, replies to their messages, or a pinned message
NotificationGroupTypeMentions :: NotificationGroupType

-- | A group containing a notification of type
--   notificationTypeNewSecretChat
NotificationGroupTypeSecretChat :: NotificationGroupType

-- | A group containing notifications of type notificationTypeNewCall
NotificationGroupTypeCalls :: NotificationGroupType
instance GHC.Classes.Eq TD.Data.NotificationGroupType.NotificationGroupType
instance GHC.Show.Show TD.Data.NotificationGroupType.NotificationGroupType
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.NotificationGroupType.NotificationGroupType
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.NotificationGroupType.NotificationGroupType


module TD.Data.NetworkType

-- | Represents the type of a network
data NetworkType

-- | The network is not available
NetworkTypeNone :: NetworkType

-- | A mobile network
NetworkTypeMobile :: NetworkType

-- | A mobile roaming network
NetworkTypeMobileRoaming :: NetworkType

-- | A Wi-Fi network
NetworkTypeWiFi :: NetworkType

-- | A different network type (e.g., Ethernet network)
NetworkTypeOther :: NetworkType
instance GHC.Classes.Eq TD.Data.NetworkType.NetworkType
instance GHC.Show.Show TD.Data.NetworkType.NetworkType
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.NetworkType.NetworkType
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.NetworkType.NetworkType


module TD.Query.SetNetworkType

-- | Sets the current network type. Can be called before authorization.
--   Calling this method forces all network connections to reopen,
--   mitigating the delay in switching between different networks, so it
--   must be called whenever the network is changed, even if the network
--   type remains the same. Network type is used to check whether the
--   library can use the network at all and also for collecting detailed
--   network data usage statistics @type The new network type; pass null to
--   set network type to networkTypeOther
data SetNetworkType
SetNetworkType :: Maybe NetworkType -> SetNetworkType

[_type] :: SetNetworkType -> Maybe NetworkType
instance GHC.Classes.Eq TD.Query.SetNetworkType.SetNetworkType
instance GHC.Show.Show TD.Query.SetNetworkType.SetNetworkType
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SetNetworkType.SetNetworkType


module TD.Data.Minithumbnail

data Minithumbnail

-- | Thumbnail image of a very poor quality and low resolution <tt>width
--   Thumbnail width, usually doesn't exceed 40 </tt>height Thumbnail
--   height, usually doesn't exceed 40 @data The thumbnail in JPEG format
Minithumbnail :: Maybe String -> Maybe Int -> Maybe Int -> Minithumbnail

[_data] :: Minithumbnail -> Maybe String

[height] :: Minithumbnail -> Maybe Int

[width] :: Minithumbnail -> Maybe Int
instance GHC.Classes.Eq TD.Data.Minithumbnail.Minithumbnail
instance GHC.Show.Show TD.Data.Minithumbnail.Minithumbnail
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.Minithumbnail.Minithumbnail
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.Minithumbnail.Minithumbnail


module TD.Data.MessageStatistics

data MessageStatistics

-- | A detailed statistics about a message @message_interaction_graph A
--   graph containing number of message views and shares
MessageStatistics :: Maybe StatisticalGraph -> MessageStatistics

[message_interaction_graph] :: MessageStatistics -> Maybe StatisticalGraph
instance GHC.Classes.Eq TD.Data.MessageStatistics.MessageStatistics
instance GHC.Show.Show TD.Data.MessageStatistics.MessageStatistics
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.MessageStatistics.MessageStatistics
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.MessageStatistics.MessageStatistics


module TD.Data.MessageSendingState

-- | Contains information about the sending state of the message
data MessageSendingState

-- | The message is being sent now, but has not yet been delivered to the
--   server
MessageSendingStatePending :: MessageSendingState

-- | The message failed to be sent <tt>error_code An error code; 0 if
--   unknown </tt>error_message Error message
MessageSendingStateFailed :: Maybe Float -> Maybe Bool -> Maybe Bool -> Maybe String -> Maybe Int -> MessageSendingState

-- | Time left before the message can be re-sent, in seconds. No update is
--   sent when this field changes
[retry_after] :: MessageSendingState -> Maybe Float

-- | True, if the message can be re-sent only on behalf of a different
--   sender
[need_another_sender] :: MessageSendingState -> Maybe Bool

-- | True, if the message can be re-sent
[can_retry] :: MessageSendingState -> Maybe Bool

[error_message] :: MessageSendingState -> Maybe String

[error_code] :: MessageSendingState -> Maybe Int
instance GHC.Classes.Eq TD.Data.MessageSendingState.MessageSendingState
instance GHC.Show.Show TD.Data.MessageSendingState.MessageSendingState
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.MessageSendingState.MessageSendingState
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.MessageSendingState.MessageSendingState


module TD.Data.MessageSender

-- | Contains information about the sender of a message
data MessageSender

-- | The message was sent by a known user @user_id Identifier of the user
--   that sent the message
MessageSenderUser :: Maybe Int -> MessageSender

[user_id] :: MessageSender -> Maybe Int

-- | The message was sent on behalf of a chat @chat_id Identifier of the
--   chat that sent the message
MessageSenderChat :: Maybe Int -> MessageSender

[chat_id] :: MessageSender -> Maybe Int
instance GHC.Classes.Eq TD.Data.MessageSender.MessageSender
instance GHC.Show.Show TD.Data.MessageSender.MessageSender
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.MessageSender.MessageSender
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.MessageSender.MessageSender


module TD.Query.ToggleMessageSenderIsBlocked

-- | Changes the block state of a message sender. Currently, only users and
--   supergroup chats can be blocked <tt>sender_id Identifier of a message
--   sender to block/unblock </tt>is_blocked New value of is_blocked
data ToggleMessageSenderIsBlocked
ToggleMessageSenderIsBlocked :: Maybe Bool -> Maybe MessageSender -> ToggleMessageSenderIsBlocked

[is_blocked] :: ToggleMessageSenderIsBlocked -> Maybe Bool

[sender_id] :: ToggleMessageSenderIsBlocked -> Maybe MessageSender
instance GHC.Classes.Eq TD.Query.ToggleMessageSenderIsBlocked.ToggleMessageSenderIsBlocked
instance GHC.Show.Show TD.Query.ToggleMessageSenderIsBlocked.ToggleMessageSenderIsBlocked
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ToggleMessageSenderIsBlocked.ToggleMessageSenderIsBlocked


module TD.Query.ToggleGroupCallParticipantIsMuted

-- | Toggles whether a participant of an active group call is muted,
--   unmuted, or allowed to unmute themselves
data ToggleGroupCallParticipantIsMuted
ToggleGroupCallParticipantIsMuted :: Maybe Bool -> Maybe MessageSender -> Maybe Int -> ToggleGroupCallParticipantIsMuted

[is_muted] :: ToggleGroupCallParticipantIsMuted -> Maybe Bool

[participant_id] :: ToggleGroupCallParticipantIsMuted -> Maybe MessageSender

-- | Group call identifier <tt>participant_id Participant identifier
--   </tt>is_muted Pass true to mute the user; pass false to unmute the
--   them
[group_call_id] :: ToggleGroupCallParticipantIsMuted -> Maybe Int
instance GHC.Classes.Eq TD.Query.ToggleGroupCallParticipantIsMuted.ToggleGroupCallParticipantIsMuted
instance GHC.Show.Show TD.Query.ToggleGroupCallParticipantIsMuted.ToggleGroupCallParticipantIsMuted
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ToggleGroupCallParticipantIsMuted.ToggleGroupCallParticipantIsMuted


module TD.Query.ToggleGroupCallParticipantIsHandRaised

-- | Toggles whether a group call participant hand is rased
data ToggleGroupCallParticipantIsHandRaised
ToggleGroupCallParticipantIsHandRaised :: Maybe Bool -> Maybe MessageSender -> Maybe Int -> ToggleGroupCallParticipantIsHandRaised

-- | Pass true if the user's hand needs to be raised. Only self hand can be
--   raised. Requires groupCall.can_be_managed group call flag to lower
--   other's hand
[is_hand_raised] :: ToggleGroupCallParticipantIsHandRaised -> Maybe Bool

[participant_id] :: ToggleGroupCallParticipantIsHandRaised -> Maybe MessageSender

-- | Group call identifier @participant_id Participant identifier
[group_call_id] :: ToggleGroupCallParticipantIsHandRaised -> Maybe Int
instance GHC.Classes.Eq TD.Query.ToggleGroupCallParticipantIsHandRaised.ToggleGroupCallParticipantIsHandRaised
instance GHC.Show.Show TD.Query.ToggleGroupCallParticipantIsHandRaised.ToggleGroupCallParticipantIsHandRaised
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ToggleGroupCallParticipantIsHandRaised.ToggleGroupCallParticipantIsHandRaised


module TD.Query.SetVideoChatDefaultParticipant

-- | Changes default participant identifier, on whose behalf a video chat
--   in the chat will be joined <tt>chat_id Chat identifier
--   </tt>default_participant_id Default group call participant identifier
--   to join the video chats
data SetVideoChatDefaultParticipant
SetVideoChatDefaultParticipant :: Maybe MessageSender -> Maybe Int -> SetVideoChatDefaultParticipant

[default_participant_id] :: SetVideoChatDefaultParticipant -> Maybe MessageSender

[chat_id] :: SetVideoChatDefaultParticipant -> Maybe Int
instance GHC.Classes.Eq TD.Query.SetVideoChatDefaultParticipant.SetVideoChatDefaultParticipant
instance GHC.Show.Show TD.Query.SetVideoChatDefaultParticipant.SetVideoChatDefaultParticipant
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SetVideoChatDefaultParticipant.SetVideoChatDefaultParticipant


module TD.Query.SetGroupCallParticipantVolumeLevel

-- | Changes volume level of a participant of an active group call. If the
--   current user can manage the group call, then the participant's volume
--   level will be changed for all users with the default volume level
data SetGroupCallParticipantVolumeLevel
SetGroupCallParticipantVolumeLevel :: Maybe Int -> Maybe MessageSender -> Maybe Int -> SetGroupCallParticipantVolumeLevel

[volume_level] :: SetGroupCallParticipantVolumeLevel -> Maybe Int

[participant_id] :: SetGroupCallParticipantVolumeLevel -> Maybe MessageSender

-- | Group call identifier <tt>participant_id Participant identifier
--   </tt>volume_level New participant's volume level; 1-20000 in hundreds
--   of percents
[group_call_id] :: SetGroupCallParticipantVolumeLevel -> Maybe Int
instance GHC.Classes.Eq TD.Query.SetGroupCallParticipantVolumeLevel.SetGroupCallParticipantVolumeLevel
instance GHC.Show.Show TD.Query.SetGroupCallParticipantVolumeLevel.SetGroupCallParticipantVolumeLevel
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SetGroupCallParticipantVolumeLevel.SetGroupCallParticipantVolumeLevel


module TD.Query.SetChatMessageSender

-- | Selects a message sender to send messages in a chat <tt>chat_id Chat
--   identifier </tt>message_sender_id New message sender for the chat
data SetChatMessageSender
SetChatMessageSender :: Maybe MessageSender -> Maybe Int -> SetChatMessageSender

[message_sender_id] :: SetChatMessageSender -> Maybe MessageSender

[chat_id] :: SetChatMessageSender -> Maybe Int
instance GHC.Classes.Eq TD.Query.SetChatMessageSender.SetChatMessageSender
instance GHC.Show.Show TD.Query.SetChatMessageSender.SetChatMessageSender
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SetChatMessageSender.SetChatMessageSender


module TD.Query.SearchChatMessages

-- | Searches for messages with given words in the chat. Returns the
--   results in reverse chronological order, i.e. in order of decreasing
--   message_id. Cannot be used in secret chats with a non-empty query
--   (searchSecretMessages must be used instead), or without an enabled
--   message database. For optimal performance, the number of returned
--   messages is chosen by TDLib and can be smaller than the specified
--   limit
data SearchChatMessages
SearchChatMessages :: Maybe Int -> Maybe SearchMessagesFilter -> Maybe Int -> Maybe Int -> Maybe Int -> Maybe MessageSender -> Maybe String -> Maybe Int -> SearchChatMessages

-- | If not 0, only messages in the specified thread will be returned;
--   supergroups only
[message_thread_id] :: SearchChatMessages -> Maybe Int

-- | Additional filter for messages to search; pass null to search for all
--   messages
[_filter] :: SearchChatMessages -> Maybe SearchMessagesFilter

-- | The maximum number of messages to be returned; must be positive and
--   can't be greater than 100. If the offset is negative, the limit must
--   be greater than -offset. For optimal performance, the number of
--   returned messages is chosen by TDLib and can be smaller than the
--   specified limit
[limit] :: SearchChatMessages -> Maybe Int

-- | Specify 0 to get results from exactly the from_message_id or a
--   negative offset to get the specified message and some newer messages
[offset] :: SearchChatMessages -> Maybe Int

-- | Identifier of the message starting from which history must be fetched;
--   use 0 to get results from the last message
[from_message_id] :: SearchChatMessages -> Maybe Int

-- | Identifier of the sender of messages to search for; pass null to
--   search for messages from any sender. Not supported in secret chats
[sender_id] :: SearchChatMessages -> Maybe MessageSender

-- | Query to search for
[query] :: SearchChatMessages -> Maybe String

-- | Identifier of the chat in which to search messages
[chat_id] :: SearchChatMessages -> Maybe Int
instance GHC.Classes.Eq TD.Query.SearchChatMessages.SearchChatMessages
instance GHC.Show.Show TD.Query.SearchChatMessages.SearchChatMessages
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SearchChatMessages.SearchChatMessages


module TD.Query.JoinGroupCall

-- | Joins an active group call. Returns join response payload for tgcalls
data JoinGroupCall
JoinGroupCall :: Maybe String -> Maybe Bool -> Maybe Bool -> Maybe String -> Maybe Int -> Maybe MessageSender -> Maybe Int -> JoinGroupCall

-- | If non-empty, invite hash to be used to join the group call without
--   being muted by administrators
[invite_hash] :: JoinGroupCall -> Maybe String

-- | Pass true if the user's video is enabled
[is_my_video_enabled] :: JoinGroupCall -> Maybe Bool

-- | Pass true to join the call with muted microphone
[is_muted] :: JoinGroupCall -> Maybe Bool

-- | Group call join payload; received from tgcalls
[payload] :: JoinGroupCall -> Maybe String

-- | Caller audio channel synchronization source identifier; received from
--   tgcalls
[audio_source_id] :: JoinGroupCall -> Maybe Int

-- | Identifier of a group call participant, which will be used to join the
--   call; pass null to join as self; video chats only
[participant_id] :: JoinGroupCall -> Maybe MessageSender

-- | Group call identifier
[group_call_id] :: JoinGroupCall -> Maybe Int
instance GHC.Classes.Eq TD.Query.JoinGroupCall.JoinGroupCall
instance GHC.Show.Show TD.Query.JoinGroupCall.JoinGroupCall
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.JoinGroupCall.JoinGroupCall


module TD.Query.GetChatMember

-- | Returns information about a single member of a chat <tt>chat_id Chat
--   identifier </tt>member_id Member identifier
data GetChatMember
GetChatMember :: Maybe MessageSender -> Maybe Int -> GetChatMember

[member_id] :: GetChatMember -> Maybe MessageSender

[chat_id] :: GetChatMember -> Maybe Int
instance GHC.Classes.Eq TD.Query.GetChatMember.GetChatMember
instance GHC.Show.Show TD.Query.GetChatMember.GetChatMember
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetChatMember.GetChatMember


module TD.Query.DeleteChatMessagesBySender

-- | Deletes all messages sent by the specified message sender in a chat.
--   Supported only for supergroups; requires can_delete_messages
--   administrator privileges <tt>chat_id Chat identifier </tt>sender_id
--   Identifier of the sender of messages to delete
data DeleteChatMessagesBySender
DeleteChatMessagesBySender :: Maybe MessageSender -> Maybe Int -> DeleteChatMessagesBySender

[sender_id] :: DeleteChatMessagesBySender -> Maybe MessageSender

[chat_id] :: DeleteChatMessagesBySender -> Maybe Int
instance GHC.Classes.Eq TD.Query.DeleteChatMessagesBySender.DeleteChatMessagesBySender
instance GHC.Show.Show TD.Query.DeleteChatMessagesBySender.DeleteChatMessagesBySender
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.DeleteChatMessagesBySender.DeleteChatMessagesBySender


module TD.Query.BanChatMember

-- | Bans a member in a chat. Members can't be banned in private or secret
--   chats. In supergroups and channels, the user will not be able to
--   return to the group on their own using invite links, etc., unless
--   unbanned first
data BanChatMember
BanChatMember :: Maybe Bool -> Maybe Int -> Maybe MessageSender -> Maybe Int -> BanChatMember

-- | Pass true to delete all messages in the chat for the user that is
--   being removed. Always true for supergroups and channels
[revoke_messages] :: BanChatMember -> Maybe Bool

-- | Point in time (Unix timestamp) when the user will be unbanned; 0 if
--   never. If the user is banned for more than 366 days or for less than
--   30 seconds from the current time, the user is considered to be banned
--   forever. Ignored in basic groups and if a chat is banned
[banned_until_date] :: BanChatMember -> Maybe Int

-- | Member identifier
[member_id] :: BanChatMember -> Maybe MessageSender

-- | Chat identifier
[chat_id] :: BanChatMember -> Maybe Int
instance GHC.Classes.Eq TD.Query.BanChatMember.BanChatMember
instance GHC.Show.Show TD.Query.BanChatMember.BanChatMember
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.BanChatMember.BanChatMember


module TD.Data.VideoChat

data VideoChat

-- | Describes a video chat
VideoChat :: Maybe MessageSender -> Maybe Bool -> Maybe Int -> VideoChat

-- | Default group call participant identifier to join the video chat; may
--   be null
[default_participant_id] :: VideoChat -> Maybe MessageSender

-- | True, if the video chat has participants
[has_participants] :: VideoChat -> Maybe Bool

-- | Group call identifier of an active video chat; 0 if none. Full
--   information about the video chat can be received through the method
--   getGroupCall
[group_call_id] :: VideoChat -> Maybe Int
instance GHC.Classes.Eq TD.Data.VideoChat.VideoChat
instance GHC.Show.Show TD.Data.VideoChat.VideoChat
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.VideoChat.VideoChat
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.VideoChat.VideoChat


module TD.Data.UnreadReaction

data UnreadReaction

-- | Contains information about an unread reaction to a message
UnreadReaction :: Maybe Bool -> Maybe MessageSender -> Maybe String -> UnreadReaction

-- | True, if the reaction was added with a big animation
[is_big] :: UnreadReaction -> Maybe Bool

-- | Identifier of the sender, added the reaction
[sender_id] :: UnreadReaction -> Maybe MessageSender

-- | Text representation of the reaction
[reaction] :: UnreadReaction -> Maybe String
instance GHC.Classes.Eq TD.Data.UnreadReaction.UnreadReaction
instance GHC.Show.Show TD.Data.UnreadReaction.UnreadReaction
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.UnreadReaction.UnreadReaction
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.UnreadReaction.UnreadReaction


module TD.Data.MessageSenders

data MessageSenders

-- | Represents a list of message senders <tt>total_count Approximate total
--   number of messages senders found </tt>senders List of message senders
MessageSenders :: Maybe [MessageSender] -> Maybe Int -> MessageSenders

[senders] :: MessageSenders -> Maybe [MessageSender]

[total_count] :: MessageSenders -> Maybe Int
instance GHC.Classes.Eq TD.Data.MessageSenders.MessageSenders
instance GHC.Show.Show TD.Data.MessageSenders.MessageSenders
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.MessageSenders.MessageSenders
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.MessageSenders.MessageSenders


module TD.Data.MessageSchedulingState

-- | Contains information about the time when a scheduled message will be
--   sent
data MessageSchedulingState

-- | The message will be sent at the specified date @send_date Date the
--   message will be sent. The date must be within 367 days in the future
MessageSchedulingStateSendAtDate :: Maybe Int -> MessageSchedulingState

[send_date] :: MessageSchedulingState -> Maybe Int

-- | The message will be sent when the peer will be online. Applicable to
--   private chats only and when the exact online status of the peer is
--   known
MessageSchedulingStateSendWhenOnline :: MessageSchedulingState
instance GHC.Classes.Eq TD.Data.MessageSchedulingState.MessageSchedulingState
instance GHC.Show.Show TD.Data.MessageSchedulingState.MessageSchedulingState
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.MessageSchedulingState.MessageSchedulingState
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.MessageSchedulingState.MessageSchedulingState


module TD.Query.EditMessageSchedulingState

-- | Edits the time when a scheduled message will be sent. Scheduling state
--   of all messages in the same album or forwarded together with the
--   message will be also changed
data EditMessageSchedulingState
EditMessageSchedulingState :: Maybe MessageSchedulingState -> Maybe Int -> Maybe Int -> EditMessageSchedulingState

-- | The new message scheduling state; pass null to send the message
--   immediately
[scheduling_state] :: EditMessageSchedulingState -> Maybe MessageSchedulingState

-- | Identifier of the message
[message_id] :: EditMessageSchedulingState -> Maybe Int

-- | The chat the message belongs to
[chat_id] :: EditMessageSchedulingState -> Maybe Int
instance GHC.Classes.Eq TD.Query.EditMessageSchedulingState.EditMessageSchedulingState
instance GHC.Show.Show TD.Query.EditMessageSchedulingState.EditMessageSchedulingState
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.EditMessageSchedulingState.EditMessageSchedulingState


module TD.Data.MessageSendOptions

data MessageSendOptions

-- | Options to be used when a message is sent
MessageSendOptions :: Maybe MessageSchedulingState -> Maybe Bool -> Maybe Bool -> Maybe Bool -> MessageSendOptions

-- | Message scheduling state; pass null to send message immediately.
--   Messages sent to a secret chat, live location messages and
--   self-destructing messages can't be scheduled
[scheduling_state] :: MessageSendOptions -> Maybe MessageSchedulingState

-- | Pass true if the content of the message must be protected from
--   forwarding and saving; for bots only
[protect_content] :: MessageSendOptions -> Maybe Bool

-- | Pass true if the message is sent from the background
[from_background] :: MessageSendOptions -> Maybe Bool

-- | Pass true to disable notification for the message
[disable_notification] :: MessageSendOptions -> Maybe Bool
instance GHC.Classes.Eq TD.Data.MessageSendOptions.MessageSendOptions
instance GHC.Show.Show TD.Data.MessageSendOptions.MessageSendOptions
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.MessageSendOptions.MessageSendOptions
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.MessageSendOptions.MessageSendOptions


module TD.Query.SendInlineQueryResultMessage

-- | Sends the result of an inline query as a message. Returns the sent
--   message. Always clears a chat draft message
data SendInlineQueryResultMessage
SendInlineQueryResultMessage :: Maybe Bool -> Maybe String -> Maybe Int -> Maybe MessageSendOptions -> Maybe Int -> Maybe Int -> Maybe Int -> SendInlineQueryResultMessage

-- | Pass true to hide the bot, via which the message is sent. Can be used
--   only for bots GetOption("animation_search_bot_username"),
--   GetOption("photo_search_bot_username"), and
--   GetOption("venue_search_bot_username")
[hide_via_bot] :: SendInlineQueryResultMessage -> Maybe Bool

-- | Identifier of the inline result
[result_id] :: SendInlineQueryResultMessage -> Maybe String

-- | Identifier of the inline query
[query_id] :: SendInlineQueryResultMessage -> Maybe Int

-- | Options to be used to send the message; pass null to use default
--   options
[options] :: SendInlineQueryResultMessage -> Maybe MessageSendOptions

-- | Identifier of a replied message; 0 if none
[reply_to_message_id] :: SendInlineQueryResultMessage -> Maybe Int

-- | If not 0, a message thread identifier in which the message will be
--   sent
[message_thread_id] :: SendInlineQueryResultMessage -> Maybe Int

-- | Target chat
[chat_id] :: SendInlineQueryResultMessage -> Maybe Int
instance GHC.Classes.Eq TD.Query.SendInlineQueryResultMessage.SendInlineQueryResultMessage
instance GHC.Show.Show TD.Query.SendInlineQueryResultMessage.SendInlineQueryResultMessage
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SendInlineQueryResultMessage.SendInlineQueryResultMessage


module TD.Query.ForwardMessages

-- | Forwards previously sent messages. Returns the forwarded messages in
--   the same order as the message identifiers passed in message_ids. If a
--   message can't be forwarded, null will be returned instead of the
--   message
data ForwardMessages
ForwardMessages :: Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe MessageSendOptions -> Maybe [Int] -> Maybe Int -> Maybe Int -> ForwardMessages

-- | Pass true to get fake messages instead of actually forwarding them
[only_preview] :: ForwardMessages -> Maybe Bool

-- | Pass true to remove media captions of message copies. Ignored if
--   send_copy is false
[remove_caption] :: ForwardMessages -> Maybe Bool

-- | Pass true to copy content of the messages without reference to the
--   original sender. Always true if the messages are forwarded to a secret
--   chat or are local
[send_copy] :: ForwardMessages -> Maybe Bool

-- | Options to be used to send the messages; pass null to use default
--   options
[options] :: ForwardMessages -> Maybe MessageSendOptions

-- | Identifiers of the messages to forward. Message identifiers must be in
--   a strictly increasing order. At most 100 messages can be forwarded
--   simultaneously
[message_ids] :: ForwardMessages -> Maybe [Int]

-- | Identifier of the chat from which to forward messages
[from_chat_id] :: ForwardMessages -> Maybe Int

-- | Identifier of the chat to which to forward messages
[chat_id] :: ForwardMessages -> Maybe Int
instance GHC.Classes.Eq TD.Query.ForwardMessages.ForwardMessages
instance GHC.Show.Show TD.Query.ForwardMessages.ForwardMessages
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ForwardMessages.ForwardMessages


module TD.Data.MessageReplyInfo

data MessageReplyInfo

-- | Contains information about replies to a message
MessageReplyInfo :: Maybe Int -> Maybe Int -> Maybe Int -> Maybe [MessageSender] -> Maybe Int -> MessageReplyInfo

-- | Identifier of the last reply to the message
[last_message_id] :: MessageReplyInfo -> Maybe Int

-- | Identifier of the last read outgoing reply to the message
[last_read_outbox_message_id] :: MessageReplyInfo -> Maybe Int

-- | Identifier of the last read incoming reply to the message
[last_read_inbox_message_id] :: MessageReplyInfo -> Maybe Int

-- | Identifiers of at most 3 recent repliers to the message; available in
--   channels with a discussion supergroup. The users and chats are
--   expected to be inaccessible: only their photo and name will be
--   available
[recent_replier_ids] :: MessageReplyInfo -> Maybe [MessageSender]

-- | Number of times the message was directly or indirectly replied
[reply_count] :: MessageReplyInfo -> Maybe Int
instance GHC.Classes.Eq TD.Data.MessageReplyInfo.MessageReplyInfo
instance GHC.Show.Show TD.Data.MessageReplyInfo.MessageReplyInfo
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.MessageReplyInfo.MessageReplyInfo
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.MessageReplyInfo.MessageReplyInfo


module TD.Data.MessageReaction

data MessageReaction

-- | Contains information about a reaction to a message
MessageReaction :: Maybe [MessageSender] -> Maybe Bool -> Maybe Int -> Maybe String -> MessageReaction

-- | Identifiers of at most 3 recent message senders, added the reaction;
--   available in private, basic group and supergroup chats
[recent_sender_ids] :: MessageReaction -> Maybe [MessageSender]

-- | True, if the reaction is chosen by the current user
[is_chosen] :: MessageReaction -> Maybe Bool

-- | Number of times the reaction was added
[total_count] :: MessageReaction -> Maybe Int

-- | Text representation of the reaction
[reaction] :: MessageReaction -> Maybe String
instance GHC.Classes.Eq TD.Data.MessageReaction.MessageReaction
instance GHC.Show.Show TD.Data.MessageReaction.MessageReaction
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.MessageReaction.MessageReaction
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.MessageReaction.MessageReaction


module TD.Data.MessagePosition

data MessagePosition

-- | Contains information about a message in a specific position
--   <tt>position 0-based message position in the full list of suitable
--   messages </tt>message_id Message identifier @date Point in time (Unix
--   timestamp) when the message was sent
MessagePosition :: Maybe Int -> Maybe Int -> Maybe Int -> MessagePosition

[date] :: MessagePosition -> Maybe Int

[message_id] :: MessagePosition -> Maybe Int

[position] :: MessagePosition -> Maybe Int
instance GHC.Classes.Eq TD.Data.MessagePosition.MessagePosition
instance GHC.Show.Show TD.Data.MessagePosition.MessagePosition
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.MessagePosition.MessagePosition
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.MessagePosition.MessagePosition


module TD.Data.MessagePositions

data MessagePositions

-- | Contains a list of message positions <tt>total_count Total number of
--   messages found </tt>positions List of message positions
MessagePositions :: Maybe [MessagePosition] -> Maybe Int -> MessagePositions

[positions] :: MessagePositions -> Maybe [MessagePosition]

[total_count] :: MessagePositions -> Maybe Int
instance GHC.Classes.Eq TD.Data.MessagePositions.MessagePositions
instance GHC.Show.Show TD.Data.MessagePositions.MessagePositions
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.MessagePositions.MessagePositions
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.MessagePositions.MessagePositions


module TD.Data.MessageLink

data MessageLink

-- | Contains an HTTPS link to a message in a supergroup or channel
--   <tt>link Message link </tt>is_public True, if the link will work for
--   non-members of the chat
MessageLink :: Maybe Bool -> Maybe String -> MessageLink

[is_public] :: MessageLink -> Maybe Bool

[link] :: MessageLink -> Maybe String
instance GHC.Classes.Eq TD.Data.MessageLink.MessageLink
instance GHC.Show.Show TD.Data.MessageLink.MessageLink
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.MessageLink.MessageLink
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.MessageLink.MessageLink


module TD.Data.MessageInteractionInfo

data MessageInteractionInfo

-- | Contains information about interactions with a message
MessageInteractionInfo :: Maybe [MessageReaction] -> Maybe MessageReplyInfo -> Maybe Int -> Maybe Int -> MessageInteractionInfo

-- | The list of reactions added to the message
[reactions] :: MessageInteractionInfo -> Maybe [MessageReaction]

-- | Information about direct or indirect replies to the message; may be
--   null. Currently, available only in channels with a discussion
--   supergroup and discussion supergroups for messages, which are not
--   replies itself
[reply_info] :: MessageInteractionInfo -> Maybe MessageReplyInfo

-- | Number of times the message was forwarded
[forward_count] :: MessageInteractionInfo -> Maybe Int

-- | Number of times the message was viewed
[view_count] :: MessageInteractionInfo -> Maybe Int
instance GHC.Classes.Eq TD.Data.MessageInteractionInfo.MessageInteractionInfo
instance GHC.Show.Show TD.Data.MessageInteractionInfo.MessageInteractionInfo
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.MessageInteractionInfo.MessageInteractionInfo
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.MessageInteractionInfo.MessageInteractionInfo


module TD.Data.MessageForwardOrigin

-- | Contains information about the origin of a forwarded message
data MessageForwardOrigin

-- | The message was originally sent by a known user @sender_user_id
--   Identifier of the user that originally sent the message
MessageForwardOriginUser :: Maybe Int -> MessageForwardOrigin

[sender_user_id] :: MessageForwardOrigin -> Maybe Int

-- | The message was originally sent on behalf of a chat
MessageForwardOriginChat :: Maybe String -> Maybe Int -> MessageForwardOrigin

-- | For messages originally sent by an anonymous chat administrator,
--   original message author signature
[author_signature] :: MessageForwardOrigin -> Maybe String

-- | Identifier of the chat that originally sent the message
[sender_chat_id] :: MessageForwardOrigin -> Maybe Int

-- | The message was originally sent by a user, which is hidden by their
--   privacy settings @sender_name Name of the sender
MessageForwardOriginHiddenUser :: Maybe String -> MessageForwardOrigin

[sender_name] :: MessageForwardOrigin -> Maybe String

-- | The message was originally a post in a channel
MessageForwardOriginChannel :: Maybe String -> Maybe Int -> Maybe Int -> MessageForwardOrigin

-- | For messages originally sent by an anonymous chat administrator,
--   original message author signature
[author_signature] :: MessageForwardOrigin -> Maybe String

-- | Message identifier of the original message
[message_id] :: MessageForwardOrigin -> Maybe Int

-- | Identifier of the chat from which the message was originally forwarded
[chat_id] :: MessageForwardOrigin -> Maybe Int

-- | The message was imported from an exported message history @sender_name
--   Name of the sender
MessageForwardOriginMessageImport :: Maybe String -> MessageForwardOrigin

[sender_name] :: MessageForwardOrigin -> Maybe String
instance GHC.Classes.Eq TD.Data.MessageForwardOrigin.MessageForwardOrigin
instance GHC.Show.Show TD.Data.MessageForwardOrigin.MessageForwardOrigin
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.MessageForwardOrigin.MessageForwardOrigin
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.MessageForwardOrigin.MessageForwardOrigin


module TD.Data.MessageForwardInfo

data MessageForwardInfo

-- | Contains information about a forwarded message
MessageForwardInfo :: Maybe Int -> Maybe Int -> Maybe String -> Maybe Int -> Maybe MessageForwardOrigin -> MessageForwardInfo

-- | For messages forwarded to the chat with the current user (Saved
--   Messages), to the Replies bot chat, or to the channel's discussion
--   group, the identifier of the original message from which the new
--   message was forwarded last time; 0 if unknown
[from_message_id] :: MessageForwardInfo -> Maybe Int

-- | For messages forwarded to the chat with the current user (Saved
--   Messages), to the Replies bot chat, or to the channel's discussion
--   group, the identifier of the chat from which the message was forwarded
--   last time; 0 if unknown
[from_chat_id] :: MessageForwardInfo -> Maybe Int

-- | The type of a public service announcement for the forwarded message
[public_service_announcement_type] :: MessageForwardInfo -> Maybe String

-- | Point in time (Unix timestamp) when the message was originally sent
[date] :: MessageForwardInfo -> Maybe Int

-- | Origin of a forwarded message
[origin] :: MessageForwardInfo -> Maybe MessageForwardOrigin
instance GHC.Classes.Eq TD.Data.MessageForwardInfo.MessageForwardInfo
instance GHC.Show.Show TD.Data.MessageForwardInfo.MessageForwardInfo
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.MessageForwardInfo.MessageForwardInfo
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.MessageForwardInfo.MessageForwardInfo


module TD.Data.MessageFileType

-- | Contains information about a file with messages exported from another
--   app
data MessageFileType

-- | The messages was exported from a private chat @name Name of the other
--   party; may be empty if unrecognized
MessageFileTypePrivate :: Maybe String -> MessageFileType

[name] :: MessageFileType -> Maybe String

-- | The messages was exported from a group chat @title Title of the group
--   chat; may be empty if unrecognized
MessageFileTypeGroup :: Maybe String -> MessageFileType

[title] :: MessageFileType -> Maybe String

-- | The messages was exported from a chat of unknown type
MessageFileTypeUnknown :: MessageFileType
instance GHC.Classes.Eq TD.Data.MessageFileType.MessageFileType
instance GHC.Show.Show TD.Data.MessageFileType.MessageFileType
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.MessageFileType.MessageFileType
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.MessageFileType.MessageFileType


module TD.Data.MaskPoint

-- | Part of the face, relative to which a mask is placed
data MaskPoint

-- | The mask is placed relatively to the forehead
MaskPointForehead :: MaskPoint

-- | The mask is placed relatively to the eyes
MaskPointEyes :: MaskPoint

-- | The mask is placed relatively to the mouth
MaskPointMouth :: MaskPoint

-- | The mask is placed relatively to the chin
MaskPointChin :: MaskPoint
instance GHC.Classes.Eq TD.Data.MaskPoint.MaskPoint
instance GHC.Show.Show TD.Data.MaskPoint.MaskPoint
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.MaskPoint.MaskPoint
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.MaskPoint.MaskPoint


module TD.Data.MaskPosition

data MaskPosition

-- | Position on a photo where a mask is placed @point Part of the face,
--   relative to which the mask is placed
MaskPosition :: Maybe Float -> Maybe Float -> Maybe Float -> Maybe MaskPoint -> MaskPosition

-- | Mask scaling coefficient. (For example, 2.0 means a doubled size)
[scale] :: MaskPosition -> Maybe Float

-- | Shift by Y-axis measured in heights of the mask scaled to the face
--   size, from top to bottom. (For example, 1.0 will place the mask just
--   below the default mask position)
[y_shift] :: MaskPosition -> Maybe Float

-- | Shift by X-axis measured in widths of the mask scaled to the face
--   size, from left to right. (For example, -1.0 will place the mask just
--   to the left of the default mask position)
[x_shift] :: MaskPosition -> Maybe Float

[point] :: MaskPosition -> Maybe MaskPoint
instance GHC.Classes.Eq TD.Data.MaskPosition.MaskPosition
instance GHC.Show.Show TD.Data.MaskPosition.MaskPosition
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.MaskPosition.MaskPosition
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.MaskPosition.MaskPosition


module TD.Data.StickerType

-- | Describes type of a sticker
data StickerType

-- | The sticker is an image in WEBP format
StickerTypeStatic :: StickerType

-- | The sticker is an animation in TGS format
StickerTypeAnimated :: StickerType

-- | The sticker is a video in WEBM format
StickerTypeVideo :: StickerType

-- | The sticker is a mask in WEBP format to be placed on photos or videos
--   @mask_position Position where the mask is placed; may be null
StickerTypeMask :: Maybe MaskPosition -> StickerType

[mask_position] :: StickerType -> Maybe MaskPosition
instance GHC.Classes.Eq TD.Data.StickerType.StickerType
instance GHC.Show.Show TD.Data.StickerType.StickerType
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.StickerType.StickerType
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.StickerType.StickerType


module TD.Data.LoginUrlInfo

-- | Contains information about an inline button of type
--   inlineKeyboardButtonTypeLoginUrl
data LoginUrlInfo

-- | An HTTP url needs to be open <tt>url The URL to open </tt>skip_confirm
--   True, if there is no need to show an ordinary open URL confirm
LoginUrlInfoOpen :: Maybe Bool -> Maybe String -> LoginUrlInfo

[skip_confirm] :: LoginUrlInfo -> Maybe Bool

[url] :: LoginUrlInfo -> Maybe String

-- | An authorization confirmation dialog needs to be shown to the user
--   <tt>url An HTTP URL to be opened </tt>domain A domain of the URL
LoginUrlInfoRequestConfirmation :: Maybe Bool -> Maybe Int -> Maybe String -> Maybe String -> LoginUrlInfo

[request_write_access] :: LoginUrlInfo -> Maybe Bool

-- | User identifier of a bot linked with the website @request_write_access
--   True, if the user needs to be requested to give the permission to the
--   bot to send them messages
[bot_user_id] :: LoginUrlInfo -> Maybe Int

[domain] :: LoginUrlInfo -> Maybe String

[url] :: LoginUrlInfo -> Maybe String
instance GHC.Classes.Eq TD.Data.LoginUrlInfo.LoginUrlInfo
instance GHC.Show.Show TD.Data.LoginUrlInfo.LoginUrlInfo
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.LoginUrlInfo.LoginUrlInfo
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.LoginUrlInfo.LoginUrlInfo


module TD.Data.LogVerbosityLevel

data LogVerbosityLevel

-- | Contains a TDLib internal log verbosity level @verbosity_level Log
--   verbosity level
LogVerbosityLevel :: Maybe Int -> LogVerbosityLevel

[verbosity_level] :: LogVerbosityLevel -> Maybe Int
instance GHC.Classes.Eq TD.Data.LogVerbosityLevel.LogVerbosityLevel
instance GHC.Show.Show TD.Data.LogVerbosityLevel.LogVerbosityLevel
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.LogVerbosityLevel.LogVerbosityLevel
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.LogVerbosityLevel.LogVerbosityLevel


module TD.Data.LogTags

data LogTags

-- | Contains a list of available TDLib internal log tags @tags List of log
--   tags
LogTags :: Maybe [String] -> LogTags

[tags] :: LogTags -> Maybe [String]
instance GHC.Classes.Eq TD.Data.LogTags.LogTags
instance GHC.Show.Show TD.Data.LogTags.LogTags
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.LogTags.LogTags
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.LogTags.LogTags


module TD.Data.LogStream

-- | Describes a stream to which TDLib internal log is written
data LogStream

-- | The log is written to stderr or an OS specific log
LogStreamDefault :: LogStream

-- | The log is written to a file
LogStreamFile :: Maybe Bool -> Maybe Int -> Maybe String -> LogStream

-- | Pass true to additionally redirect stderr to the log file. Ignored on
--   Windows
[redirect_stderr] :: LogStream -> Maybe Bool

-- | The maximum size of the file to where the internal TDLib log is
--   written before the file will automatically be rotated, in bytes
[max_file_size] :: LogStream -> Maybe Int

-- | Path to the file to where the internal TDLib log will be written
[path] :: LogStream -> Maybe String

-- | The log is written nowhere
LogStreamEmpty :: LogStream
instance GHC.Classes.Eq TD.Data.LogStream.LogStream
instance GHC.Show.Show TD.Data.LogStream.LogStream
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.LogStream.LogStream
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.LogStream.LogStream


module TD.Query.SetLogStream

-- | Sets new log stream for internal logging of TDLib. Can be called
--   synchronously @log_stream New log stream
data SetLogStream
SetLogStream :: Maybe LogStream -> SetLogStream

[log_stream] :: SetLogStream -> Maybe LogStream
instance GHC.Classes.Eq TD.Query.SetLogStream.SetLogStream
instance GHC.Show.Show TD.Query.SetLogStream.SetLogStream
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SetLogStream.SetLogStream


module TD.Data.Location

data Location

-- | Describes a location on planet Earth <tt>latitude Latitude of the
--   location in degrees; as defined by the sender </tt>longitude Longitude
--   of the location, in degrees; as defined by the sender
Location :: Maybe Float -> Maybe Float -> Maybe Float -> Location

-- | The estimated horizontal accuracy of the location, in meters; as
--   defined by the sender. 0 if unknown
[horizontal_accuracy] :: Location -> Maybe Float

[longitude] :: Location -> Maybe Float

[latitude] :: Location -> Maybe Float
instance GHC.Classes.Eq TD.Data.Location.Location
instance GHC.Show.Show TD.Data.Location.Location
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.Location.Location
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.Location.Location


module TD.Query.SetLocation

-- | Changes the location of the current user. Needs to be called if
--   GetOption("is_location_visible") is true and location changes for more
--   than 1 kilometer @location The new location of the user
data SetLocation
SetLocation :: Maybe Location -> SetLocation

[location] :: SetLocation -> Maybe Location
instance GHC.Classes.Eq TD.Query.SetLocation.SetLocation
instance GHC.Show.Show TD.Query.SetLocation.SetLocation
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SetLocation.SetLocation


module TD.Query.SearchChatsNearby

-- | Returns a list of users and location-based supergroups nearby. The
--   list of users nearby will be updated for 60 seconds after the request
--   by the updates updateUsersNearby. The request must be sent again every
--   25 seconds with adjusted location to not miss new chats @location
--   Current user location
data SearchChatsNearby
SearchChatsNearby :: Maybe Location -> SearchChatsNearby

[location] :: SearchChatsNearby -> Maybe Location
instance GHC.Classes.Eq TD.Query.SearchChatsNearby.SearchChatsNearby
instance GHC.Show.Show TD.Query.SearchChatsNearby.SearchChatsNearby
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SearchChatsNearby.SearchChatsNearby


module TD.Query.GetMapThumbnailFile

-- | Returns information about a file with a map thumbnail in PNG format.
--   Only map thumbnail files with size less than 1MB can be downloaded
--   <tt>location Location of the map center </tt>zoom Map zoom level;
--   13-20 <tt>width Map width in pixels before applying scale; 16-1024
--   </tt>height Map height in pixels before applying scale; 16-1024
--   <tt>scale Map scale; 1-3 </tt>chat_id Identifier of a chat in which
--   the thumbnail will be shown. Use 0 if unknown
data GetMapThumbnailFile
GetMapThumbnailFile :: Maybe Int -> Maybe Int -> Maybe Int -> Maybe Int -> Maybe Int -> Maybe Location -> GetMapThumbnailFile

[chat_id] :: GetMapThumbnailFile -> Maybe Int

[scale] :: GetMapThumbnailFile -> Maybe Int

[height] :: GetMapThumbnailFile -> Maybe Int

[width] :: GetMapThumbnailFile -> Maybe Int

[zoom] :: GetMapThumbnailFile -> Maybe Int

[location] :: GetMapThumbnailFile -> Maybe Location
instance GHC.Classes.Eq TD.Query.GetMapThumbnailFile.GetMapThumbnailFile
instance GHC.Show.Show TD.Query.GetMapThumbnailFile.GetMapThumbnailFile
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetMapThumbnailFile.GetMapThumbnailFile


module TD.Query.GetInlineQueryResults

-- | Sends an inline query to a bot and returns its results. Returns an
--   error with code 502 if the bot fails to answer the query before the
--   query timeout expires
data GetInlineQueryResults
GetInlineQueryResults :: Maybe String -> Maybe String -> Maybe Location -> Maybe Int -> Maybe Int -> GetInlineQueryResults

-- | Offset of the first entry to return
[offset] :: GetInlineQueryResults -> Maybe String

-- | Text of the query
[query] :: GetInlineQueryResults -> Maybe String

-- | Location of the user; pass null if unknown or the bot doesn't need
--   user's location
[user_location] :: GetInlineQueryResults -> Maybe Location

-- | Identifier of the chat where the query was sent
[chat_id] :: GetInlineQueryResults -> Maybe Int

-- | The identifier of the target bot
[bot_user_id] :: GetInlineQueryResults -> Maybe Int
instance GHC.Classes.Eq TD.Query.GetInlineQueryResults.GetInlineQueryResults
instance GHC.Show.Show TD.Query.GetInlineQueryResults.GetInlineQueryResults
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetInlineQueryResults.GetInlineQueryResults


module TD.Data.Venue

data Venue

-- | Describes a venue <tt>location Venue location; as defined by the
--   sender </tt>title Venue name; as defined by the sender <tt>address
--   Venue address; as defined by the sender </tt>provider Provider of the
--   venue database; as defined by the sender. Currently, only "foursquare"
--   and "gplaces" (Google Places) need to be supported
Venue :: Maybe String -> Maybe String -> Maybe String -> Maybe String -> Maybe String -> Maybe Location -> Venue

[_type] :: Venue -> Maybe String

-- | Identifier of the venue in the provider database; as defined by the
--   sender @type Type of the venue in the provider database; as defined by
--   the sender
[_id] :: Venue -> Maybe String

[provider] :: Venue -> Maybe String

[address] :: Venue -> Maybe String

[title] :: Venue -> Maybe String

[location] :: Venue -> Maybe Location
instance GHC.Classes.Eq TD.Data.Venue.Venue
instance GHC.Show.Show TD.Data.Venue.Venue
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.Venue.Venue
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.Venue.Venue


module TD.Data.LocalFile

data LocalFile

-- | Represents a local file
LocalFile :: Maybe Int -> Maybe Int -> Maybe Int -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe String -> LocalFile

-- | Total downloaded file size, in bytes. Can be used only for calculating
--   download progress. The actual file size may be bigger, and some parts
--   of it may contain garbage
[downloaded_size] :: LocalFile -> Maybe Int

-- | If is_downloading_completed is false, then only some prefix of the
--   file starting from download_offset is ready to be read.
--   downloaded_prefix_size is the size of that prefix in bytes
[downloaded_prefix_size] :: LocalFile -> Maybe Int

-- | Download will be started from this offset. downloaded_prefix_size is
--   calculated from this offset
[download_offset] :: LocalFile -> Maybe Int

-- | True, if the local copy is fully available
[is_downloading_completed] :: LocalFile -> Maybe Bool

-- | True, if the file is currently being downloaded (or a local copy is
--   being generated by some other means)
[is_downloading_active] :: LocalFile -> Maybe Bool

-- | True, if the file can be deleted
[can_be_deleted] :: LocalFile -> Maybe Bool

-- | True, if it is possible to download or generate the file
[can_be_downloaded] :: LocalFile -> Maybe Bool

-- | Local path to the locally available file part; may be empty
[path] :: LocalFile -> Maybe String
instance GHC.Classes.Eq TD.Data.LocalFile.LocalFile
instance GHC.Show.Show TD.Data.LocalFile.LocalFile
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.LocalFile.LocalFile
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.LocalFile.LocalFile


module TD.Data.LanguagePackStringValue

-- | Represents the value of a string in a language pack
data LanguagePackStringValue

-- | An ordinary language pack string @value String value
LanguagePackStringValueOrdinary :: Maybe String -> LanguagePackStringValue

[value] :: LanguagePackStringValue -> Maybe String

-- | A language pack string which has different forms based on the number
--   of some object it mentions. See
--   <a>https://www.unicode.org/cldr/charts/latest/supplemental/language_plural_rules.html</a>
--   for more information
LanguagePackStringValuePluralized :: Maybe String -> Maybe String -> Maybe String -> Maybe String -> Maybe String -> Maybe String -> LanguagePackStringValue

[other_value] :: LanguagePackStringValue -> Maybe String

[many_value] :: LanguagePackStringValue -> Maybe String

-- | Value for few objects <tt>many_value Value for many objects
--   </tt>other_value Default value
[few_value] :: LanguagePackStringValue -> Maybe String

[two_value] :: LanguagePackStringValue -> Maybe String

[one_value] :: LanguagePackStringValue -> Maybe String

-- | Value for zero objects <tt>one_value Value for one object
--   </tt>two_value Value for two objects
[zero_value] :: LanguagePackStringValue -> Maybe String

-- | A deleted language pack string, the value must be taken from the
--   built-in English language pack
LanguagePackStringValueDeleted :: LanguagePackStringValue
instance GHC.Classes.Eq TD.Data.LanguagePackStringValue.LanguagePackStringValue
instance GHC.Show.Show TD.Data.LanguagePackStringValue.LanguagePackStringValue
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.LanguagePackStringValue.LanguagePackStringValue
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.LanguagePackStringValue.LanguagePackStringValue


module TD.Data.LanguagePackString

data LanguagePackString

-- | Represents one language pack string <tt>key String key </tt>value
--   String value; pass null if the string needs to be taken from the
--   built-in English language pack
LanguagePackString :: Maybe LanguagePackStringValue -> Maybe String -> LanguagePackString

[value] :: LanguagePackString -> Maybe LanguagePackStringValue

[key] :: LanguagePackString -> Maybe String
instance GHC.Classes.Eq TD.Data.LanguagePackString.LanguagePackString
instance GHC.Show.Show TD.Data.LanguagePackString.LanguagePackString
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.LanguagePackString.LanguagePackString
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.LanguagePackString.LanguagePackString


module TD.Query.SetCustomLanguagePackString

-- | Adds, edits or deletes a string in a custom local language pack. Can
--   be called before authorization <tt>language_pack_id Identifier of a
--   previously added custom local language pack in the current
--   localization target </tt>new_string New language pack string
data SetCustomLanguagePackString
SetCustomLanguagePackString :: Maybe LanguagePackString -> Maybe String -> SetCustomLanguagePackString

[new_string] :: SetCustomLanguagePackString -> Maybe LanguagePackString

[language_pack_id] :: SetCustomLanguagePackString -> Maybe String
instance GHC.Classes.Eq TD.Query.SetCustomLanguagePackString.SetCustomLanguagePackString
instance GHC.Show.Show TD.Query.SetCustomLanguagePackString.SetCustomLanguagePackString
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SetCustomLanguagePackString.SetCustomLanguagePackString


module TD.Data.LanguagePackStrings

data LanguagePackStrings

-- | Contains a list of language pack strings @strings A list of language
--   pack strings
LanguagePackStrings :: Maybe [LanguagePackString] -> LanguagePackStrings

[strings] :: LanguagePackStrings -> Maybe [LanguagePackString]
instance GHC.Classes.Eq TD.Data.LanguagePackStrings.LanguagePackStrings
instance GHC.Show.Show TD.Data.LanguagePackStrings.LanguagePackStrings
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.LanguagePackStrings.LanguagePackStrings
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.LanguagePackStrings.LanguagePackStrings


module TD.Data.LanguagePackInfo

data LanguagePackInfo

-- | Contains information about a language pack @id Unique language pack
--   identifier
LanguagePackInfo :: Maybe String -> Maybe Int -> Maybe Int -> Maybe Int -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe String -> Maybe String -> Maybe String -> Maybe String -> Maybe String -> LanguagePackInfo

[translation_url] :: LanguagePackInfo -> Maybe String

-- | Total number of non-deleted strings from the language pack available
--   locally @translation_url Link to language translation interface; empty
--   for custom local language packs
[local_string_count] :: LanguagePackInfo -> Maybe Int

[translated_string_count] :: LanguagePackInfo -> Maybe Int

-- | Total number of non-deleted strings from the language pack
--   @translated_string_count Total number of translated strings from the
--   language pack
[total_string_count] :: LanguagePackInfo -> Maybe Int

-- | True, if the language pack is installed by the current user
[is_installed] :: LanguagePackInfo -> Maybe Bool

[is_beta] :: LanguagePackInfo -> Maybe Bool

[is_rtl] :: LanguagePackInfo -> Maybe Bool

-- | True, if the language pack is official <tt>is_rtl True, if the
--   language pack strings are RTL </tt>is_beta True, if the language pack
--   is a beta language pack
[is_official] :: LanguagePackInfo -> Maybe Bool

-- | A language code to be used to apply plural forms. See
--   <a>https://www.unicode.org/cldr/charts/latest/supplemental/language_plural_rules.html</a>
--   for more information
[plural_code] :: LanguagePackInfo -> Maybe String

[native_name] :: LanguagePackInfo -> Maybe String

-- | Language name @native_name Name of the language in that language
[name] :: LanguagePackInfo -> Maybe String

-- | Identifier of a base language pack; may be empty. If a string is
--   missed in the language pack, then it must be fetched from base
--   language pack. Unsupported in custom language packs
[base_language_pack_id] :: LanguagePackInfo -> Maybe String

[_id] :: LanguagePackInfo -> Maybe String
instance GHC.Classes.Eq TD.Data.LanguagePackInfo.LanguagePackInfo
instance GHC.Show.Show TD.Data.LanguagePackInfo.LanguagePackInfo
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.LanguagePackInfo.LanguagePackInfo
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.LanguagePackInfo.LanguagePackInfo


module TD.Query.SetCustomLanguagePack

-- | Adds or changes a custom local language pack to the current
--   localization target <tt>info Information about the language pack.
--   Language pack ID must start with <tt>X</tt>, consist only of English
--   letters, digits and hyphens, and must not exceed 64 characters. Can be
--   called before authorization </tt>strings Strings of the new language
--   pack
data SetCustomLanguagePack
SetCustomLanguagePack :: Maybe [LanguagePackString] -> Maybe LanguagePackInfo -> SetCustomLanguagePack

[strings] :: SetCustomLanguagePack -> Maybe [LanguagePackString]

[info] :: SetCustomLanguagePack -> Maybe LanguagePackInfo
instance GHC.Classes.Eq TD.Query.SetCustomLanguagePack.SetCustomLanguagePack
instance GHC.Show.Show TD.Query.SetCustomLanguagePack.SetCustomLanguagePack
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SetCustomLanguagePack.SetCustomLanguagePack


module TD.Query.EditCustomLanguagePackInfo

-- | Edits information about a custom local language pack in the current
--   localization target. Can be called before authorization @info New
--   information about the custom local language pack
data EditCustomLanguagePackInfo
EditCustomLanguagePackInfo :: Maybe LanguagePackInfo -> EditCustomLanguagePackInfo

[info] :: EditCustomLanguagePackInfo -> Maybe LanguagePackInfo
instance GHC.Classes.Eq TD.Query.EditCustomLanguagePackInfo.EditCustomLanguagePackInfo
instance GHC.Show.Show TD.Query.EditCustomLanguagePackInfo.EditCustomLanguagePackInfo
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.EditCustomLanguagePackInfo.EditCustomLanguagePackInfo


module TD.Data.LocalizationTargetInfo

data LocalizationTargetInfo

-- | Contains information about the current localization target
--   @language_packs List of available language packs for this application
LocalizationTargetInfo :: Maybe [LanguagePackInfo] -> LocalizationTargetInfo

[language_packs] :: LocalizationTargetInfo -> Maybe [LanguagePackInfo]
instance GHC.Classes.Eq TD.Data.LocalizationTargetInfo.LocalizationTargetInfo
instance GHC.Show.Show TD.Data.LocalizationTargetInfo.LocalizationTargetInfo
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.LocalizationTargetInfo.LocalizationTargetInfo
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.LocalizationTargetInfo.LocalizationTargetInfo


module TD.Data.LabeledPricePart

data LabeledPricePart

-- | Portion of the price of a product (e.g., "delivery cost", "tax
--   amount") <tt>label Label for this portion of the product price
--   </tt>amount Currency amount in the smallest units of the currency
LabeledPricePart :: Maybe Int -> Maybe String -> LabeledPricePart

[amount] :: LabeledPricePart -> Maybe Int

[label] :: LabeledPricePart -> Maybe String
instance GHC.Classes.Eq TD.Data.LabeledPricePart.LabeledPricePart
instance GHC.Show.Show TD.Data.LabeledPricePart.LabeledPricePart
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.LabeledPricePart.LabeledPricePart
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.LabeledPricePart.LabeledPricePart


module TD.Data.ShippingOption

data ShippingOption

-- | One shipping option <tt>id Shipping option identifier </tt>title
--   Option title @price_parts A list of objects used to calculate the
--   total shipping costs
ShippingOption :: Maybe [LabeledPricePart] -> Maybe String -> Maybe String -> ShippingOption

[price_parts] :: ShippingOption -> Maybe [LabeledPricePart]

[title] :: ShippingOption -> Maybe String

[_id] :: ShippingOption -> Maybe String
instance GHC.Classes.Eq TD.Data.ShippingOption.ShippingOption
instance GHC.Show.Show TD.Data.ShippingOption.ShippingOption
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.ShippingOption.ShippingOption
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.ShippingOption.ShippingOption


module TD.Query.AnswerShippingQuery

-- | Sets the result of a shipping query; for bots only
--   <tt>shipping_query_id Identifier of the shipping query
--   </tt>shipping_options Available shipping options @error_message An
--   error message, empty on success
data AnswerShippingQuery
AnswerShippingQuery :: Maybe String -> Maybe [ShippingOption] -> Maybe Int -> AnswerShippingQuery

[error_message] :: AnswerShippingQuery -> Maybe String

[shipping_options] :: AnswerShippingQuery -> Maybe [ShippingOption]

[shipping_query_id] :: AnswerShippingQuery -> Maybe Int
instance GHC.Classes.Eq TD.Query.AnswerShippingQuery.AnswerShippingQuery
instance GHC.Show.Show TD.Query.AnswerShippingQuery.AnswerShippingQuery
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.AnswerShippingQuery.AnswerShippingQuery


module TD.Data.ValidatedOrderInfo

data ValidatedOrderInfo

-- | Contains a temporary identifier of validated order information, which
--   is stored for one hour. Also contains the available shipping options
--   <tt>order_info_id Temporary identifier of the order information
--   </tt>shipping_options Available shipping options
ValidatedOrderInfo :: Maybe [ShippingOption] -> Maybe String -> ValidatedOrderInfo

[shipping_options] :: ValidatedOrderInfo -> Maybe [ShippingOption]

[order_info_id] :: ValidatedOrderInfo -> Maybe String
instance GHC.Classes.Eq TD.Data.ValidatedOrderInfo.ValidatedOrderInfo
instance GHC.Show.Show TD.Data.ValidatedOrderInfo.ValidatedOrderInfo
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.ValidatedOrderInfo.ValidatedOrderInfo
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.ValidatedOrderInfo.ValidatedOrderInfo


module TD.Data.KeyboardButtonType

-- | Describes a keyboard button type
data KeyboardButtonType

-- | A simple button, with text that must be sent when the button is
--   pressed
KeyboardButtonTypeText :: KeyboardButtonType

-- | A button that sends the user's phone number when pressed; available
--   only in private chats
KeyboardButtonTypeRequestPhoneNumber :: KeyboardButtonType

-- | A button that sends the user's location when pressed; available only
--   in private chats
KeyboardButtonTypeRequestLocation :: KeyboardButtonType

-- | A button that allows the user to create and send a poll when pressed;
--   available only in private chats <tt>force_regular If true, only
--   regular polls must be allowed to create </tt>force_quiz If true, only
--   polls in quiz mode must be allowed to create
KeyboardButtonTypeRequestPoll :: Maybe Bool -> Maybe Bool -> KeyboardButtonType

[force_quiz] :: KeyboardButtonType -> Maybe Bool

[force_regular] :: KeyboardButtonType -> Maybe Bool

-- | A button that opens a Web App by calling getWebAppUrl @url An HTTP URL
--   to pass to getWebAppUrl
KeyboardButtonTypeWebApp :: Maybe String -> KeyboardButtonType

[url] :: KeyboardButtonType -> Maybe String
instance GHC.Classes.Eq TD.Data.KeyboardButtonType.KeyboardButtonType
instance GHC.Show.Show TD.Data.KeyboardButtonType.KeyboardButtonType
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.KeyboardButtonType.KeyboardButtonType
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.KeyboardButtonType.KeyboardButtonType


module TD.Data.KeyboardButton

data KeyboardButton

-- | Represents a single button in a bot keyboard <tt>text Text of the
--   button </tt>type Type of the button
KeyboardButton :: Maybe KeyboardButtonType -> Maybe String -> KeyboardButton

[_type] :: KeyboardButton -> Maybe KeyboardButtonType

[text] :: KeyboardButton -> Maybe String
instance GHC.Classes.Eq TD.Data.KeyboardButton.KeyboardButton
instance GHC.Show.Show TD.Data.KeyboardButton.KeyboardButton
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.KeyboardButton.KeyboardButton
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.KeyboardButton.KeyboardButton


module TD.Data.JsonValue

-- | Represents a JSON value
data JsonValue

-- | Represents a null JSON value
JsonValueNull :: JsonValue

-- | Represents a boolean JSON value @value The value
JsonValueBoolean :: Maybe Bool -> JsonValue

[value] :: JsonValue -> Maybe Bool

-- | Represents a numeric JSON value @value The value
JsonValueNumber :: Maybe Float -> JsonValue

[_value] :: JsonValue -> Maybe Float

-- | Represents a string JSON value @value The value
JsonValueString :: Maybe String -> JsonValue

[__value] :: JsonValue -> Maybe String

-- | Represents a JSON array @values The list of array elements
JsonValueArray :: Maybe [JsonValue] -> JsonValue

[values] :: JsonValue -> Maybe [JsonValue]

-- | Represents a JSON object @members The list of object members
JsonValueObject :: Maybe [JsonObjectMember] -> JsonValue

[members] :: JsonValue -> Maybe [JsonObjectMember]
instance GHC.Classes.Eq TD.Data.JsonValue.JsonValue
instance GHC.Show.Show TD.Data.JsonValue.JsonValue
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.JsonValue.JsonValue
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.JsonValue.JsonValue


module TD.Query.SaveApplicationLogEvent

-- | Saves application log event on the server. Can be called before
--   authorization <tt>type Event type </tt>chat_id Optional chat
--   identifier, associated with the event @data The log event data
data SaveApplicationLogEvent
SaveApplicationLogEvent :: Maybe JsonValue -> Maybe Int -> Maybe String -> SaveApplicationLogEvent

[_data] :: SaveApplicationLogEvent -> Maybe JsonValue

[chat_id] :: SaveApplicationLogEvent -> Maybe Int

[_type] :: SaveApplicationLogEvent -> Maybe String
instance GHC.Classes.Eq TD.Query.SaveApplicationLogEvent.SaveApplicationLogEvent
instance GHC.Show.Show TD.Query.SaveApplicationLogEvent.SaveApplicationLogEvent
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SaveApplicationLogEvent.SaveApplicationLogEvent


module TD.Query.GetJsonString

-- | Converts a JsonValue object to corresponding JSON-serialized string.
--   Can be called synchronously @json_value The JsonValue object
data GetJsonString
GetJsonString :: Maybe JsonValue -> GetJsonString

[json_value] :: GetJsonString -> Maybe JsonValue
instance GHC.Classes.Eq TD.Query.GetJsonString.GetJsonString
instance GHC.Show.Show TD.Query.GetJsonString.GetJsonString
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetJsonString.GetJsonString


module TD.Data.JsonObjectMember

data JsonObjectMember

-- | Represents one member of a JSON object <tt>key Member's key </tt>value
--   Member's value
JsonObjectMember :: Maybe JsonValue -> Maybe String -> JsonObjectMember

[value] :: JsonObjectMember -> Maybe JsonValue

[key] :: JsonObjectMember -> Maybe String
instance GHC.Classes.Eq TD.Data.JsonObjectMember.JsonObjectMember
instance GHC.Show.Show TD.Data.JsonObjectMember.JsonObjectMember
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.JsonObjectMember.JsonObjectMember
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.JsonObjectMember.JsonObjectMember


module TD.Data.Invoice

data Invoice

-- | Product invoice
Invoice :: Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe String -> Maybe [Int] -> Maybe Int -> Maybe [LabeledPricePart] -> Maybe String -> Invoice

-- | True, if the total price depends on the shipping method
[is_flexible] :: Invoice -> Maybe Bool

-- | True, if the user's email address will be sent to the provider
[send_email_address_to_provider] :: Invoice -> Maybe Bool

-- | True, if the user's phone number will be sent to the provider
[send_phone_number_to_provider] :: Invoice -> Maybe Bool

-- | True, if the user's shipping address is needed for payment
[need_shipping_address] :: Invoice -> Maybe Bool

-- | True, if the user's email address is needed for payment
[need_email_address] :: Invoice -> Maybe Bool

-- | True, if the user's phone number is needed for payment
[need_phone_number] :: Invoice -> Maybe Bool

-- | True, if the user's name is needed for payment
[need_name] :: Invoice -> Maybe Bool

-- | True, if the payment is a test payment
[is_test] :: Invoice -> Maybe Bool

-- | An HTTP URL with terms of service for recurring payments. If
--   non-empty, the invoice payment will result in recurring payments and
--   the user must accept the terms of service before allowed to pay
[recurring_payment_terms_of_service_url] :: Invoice -> Maybe String

-- | Suggested amounts of tip in the smallest units of the currency
[suggested_tip_amounts] :: Invoice -> Maybe [Int]

-- | The maximum allowed amount of tip in the smallest units of the
--   currency
[max_tip_amount] :: Invoice -> Maybe Int

-- | A list of objects used to calculate the total price of the product
[price_parts] :: Invoice -> Maybe [LabeledPricePart]

-- | ISO 4217 currency code
[currency] :: Invoice -> Maybe String
instance GHC.Classes.Eq TD.Data.Invoice.Invoice
instance GHC.Show.Show TD.Data.Invoice.Invoice
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.Invoice.Invoice
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.Invoice.Invoice


module TD.Data.InputPassportElementErrorSource

-- | Contains the description of an error in a Telegram Passport element;
--   for bots only
data InputPassportElementErrorSource

-- | The element contains an error in an unspecified place. The error will
--   be considered resolved when new data is added @element_hash Current
--   hash of the entire element
InputPassportElementErrorSourceUnspecified :: Maybe String -> InputPassportElementErrorSource

[element_hash] :: InputPassportElementErrorSource -> Maybe String

-- | A data field contains an error. The error is considered resolved when
--   the field's value changes <tt>field_name Field name </tt>data_hash
--   Current data hash
InputPassportElementErrorSourceDataField :: Maybe String -> Maybe String -> InputPassportElementErrorSource

[data_hash] :: InputPassportElementErrorSource -> Maybe String

[field_name] :: InputPassportElementErrorSource -> Maybe String

-- | The front side of the document contains an error. The error is
--   considered resolved when the file with the front side of the document
--   changes @file_hash Current hash of the file containing the front side
InputPassportElementErrorSourceFrontSide :: Maybe String -> InputPassportElementErrorSource

[file_hash] :: InputPassportElementErrorSource -> Maybe String

-- | The reverse side of the document contains an error. The error is
--   considered resolved when the file with the reverse side of the
--   document changes @file_hash Current hash of the file containing the
--   reverse side
InputPassportElementErrorSourceReverseSide :: Maybe String -> InputPassportElementErrorSource

[file_hash] :: InputPassportElementErrorSource -> Maybe String

-- | The selfie contains an error. The error is considered resolved when
--   the file with the selfie changes @file_hash Current hash of the file
--   containing the selfie
InputPassportElementErrorSourceSelfie :: Maybe String -> InputPassportElementErrorSource

[file_hash] :: InputPassportElementErrorSource -> Maybe String

-- | One of the files containing the translation of the document contains
--   an error. The error is considered resolved when the file with the
--   translation changes @file_hash Current hash of the file containing the
--   translation
InputPassportElementErrorSourceTranslationFile :: Maybe String -> InputPassportElementErrorSource

[file_hash] :: InputPassportElementErrorSource -> Maybe String

-- | The translation of the document contains an error. The error is
--   considered resolved when the list of files changes @file_hashes
--   Current hashes of all files with the translation
InputPassportElementErrorSourceTranslationFiles :: Maybe [String] -> InputPassportElementErrorSource

[file_hashes] :: InputPassportElementErrorSource -> Maybe [String]

-- | The file contains an error. The error is considered resolved when the
--   file changes @file_hash Current hash of the file which has the error
InputPassportElementErrorSourceFile :: Maybe String -> InputPassportElementErrorSource

[file_hash] :: InputPassportElementErrorSource -> Maybe String

-- | The list of attached files contains an error. The error is considered
--   resolved when the file list changes @file_hashes Current hashes of all
--   attached files
InputPassportElementErrorSourceFiles :: Maybe [String] -> InputPassportElementErrorSource

[file_hashes] :: InputPassportElementErrorSource -> Maybe [String]
instance GHC.Classes.Eq TD.Data.InputPassportElementErrorSource.InputPassportElementErrorSource
instance GHC.Show.Show TD.Data.InputPassportElementErrorSource.InputPassportElementErrorSource
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.InputPassportElementErrorSource.InputPassportElementErrorSource
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.InputPassportElementErrorSource.InputPassportElementErrorSource


module TD.Data.InputPassportElementError

data InputPassportElementError

-- | Contains the description of an error in a Telegram Passport element;
--   for bots only <tt>type Type of Telegram Passport element that has the
--   error </tt>message Error message @source Error source
InputPassportElementError :: Maybe InputPassportElementErrorSource -> Maybe String -> Maybe PassportElementType -> InputPassportElementError

[source] :: InputPassportElementError -> Maybe InputPassportElementErrorSource

[message] :: InputPassportElementError -> Maybe String

[_type] :: InputPassportElementError -> Maybe PassportElementType
instance GHC.Classes.Eq TD.Data.InputPassportElementError.InputPassportElementError
instance GHC.Show.Show TD.Data.InputPassportElementError.InputPassportElementError
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.InputPassportElementError.InputPassportElementError
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.InputPassportElementError.InputPassportElementError


module TD.Query.SetPassportElementErrors

-- | Informs the user that some of the elements in their Telegram Passport
--   contain errors; for bots only. The user will not be able to resend the
--   elements, until the errors are fixed <tt>user_id User identifier
--   </tt>errors The errors
data SetPassportElementErrors
SetPassportElementErrors :: Maybe [InputPassportElementError] -> Maybe Int -> SetPassportElementErrors

[errors] :: SetPassportElementErrors -> Maybe [InputPassportElementError]

[user_id] :: SetPassportElementErrors -> Maybe Int
instance GHC.Classes.Eq TD.Query.SetPassportElementErrors.SetPassportElementErrors
instance GHC.Show.Show TD.Query.SetPassportElementErrors.SetPassportElementErrors
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SetPassportElementErrors.SetPassportElementErrors


module TD.Data.InputInvoice

-- | Describe an invoice to process
data InputInvoice

-- | An invoice from a message of the type messageInvoice <tt>chat_id Chat
--   identifier of the message </tt>message_id Message identifier
InputInvoiceMessage :: Maybe Int -> Maybe Int -> InputInvoice

[message_id] :: InputInvoice -> Maybe Int

[chat_id] :: InputInvoice -> Maybe Int

-- | An invoice from a link of the type internalLinkTypeInvoice @name Name
--   of the invoice
InputInvoiceName :: Maybe String -> InputInvoice

[name] :: InputInvoice -> Maybe String
instance GHC.Classes.Eq TD.Data.InputInvoice.InputInvoice
instance GHC.Show.Show TD.Data.InputInvoice.InputInvoice
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.InputInvoice.InputInvoice
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.InputInvoice.InputInvoice


module TD.Query.GetPaymentForm

-- | Returns an invoice payment form. This method must be called when the
--   user presses inlineKeyboardButtonBuy
data GetPaymentForm
GetPaymentForm :: Maybe ThemeParameters -> Maybe InputInvoice -> GetPaymentForm

-- | Preferred payment form theme; pass null to use the default theme
[theme] :: GetPaymentForm -> Maybe ThemeParameters

-- | The invoice
[input_invoice] :: GetPaymentForm -> Maybe InputInvoice
instance GHC.Classes.Eq TD.Query.GetPaymentForm.GetPaymentForm
instance GHC.Show.Show TD.Query.GetPaymentForm.GetPaymentForm
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetPaymentForm.GetPaymentForm


module TD.Data.InputFile

-- | Points to a file
data InputFile

-- | A file defined by its unique ID @id Unique file identifier
InputFileId :: Maybe Int -> InputFile

[_id] :: InputFile -> Maybe Int

-- | A file defined by its remote ID. The remote ID is guaranteed to be
--   usable only if the corresponding file is still accessible to the user
--   and known to TDLib. For example, if the file is from a message, then
--   the message must be not deleted and accessible to the user. If the
--   file database is disabled, then the corresponding object with the file
--   must be preloaded by the application
InputFileRemote :: Maybe String -> InputFile

-- | Remote file identifier
[__id] :: InputFile -> Maybe String

-- | A file defined by a local path @path Local path to the file
InputFileLocal :: Maybe String -> InputFile

[path] :: InputFile -> Maybe String

-- | A file generated by the application @original_path Local path to a
--   file from which the file is generated; may be empty if there is no
--   such file
InputFileGenerated :: Maybe Int -> Maybe String -> Maybe String -> InputFile

-- | Expected size of the generated file, in bytes; 0 if unknown
[expected_size] :: InputFile -> Maybe Int

-- | String specifying the conversion applied to the original file; must be
--   persistent across application restarts. Conversions beginning with
--   <tt>#</tt> are reserved for internal TDLib usage
[conversion] :: InputFile -> Maybe String

[original_path] :: InputFile -> Maybe String
instance GHC.Classes.Eq TD.Data.InputFile.InputFile
instance GHC.Show.Show TD.Data.InputFile.InputFile
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.InputFile.InputFile
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.InputFile.InputFile


module TD.Query.SetStickerSetThumbnail

-- | Sets a sticker set thumbnail; for bots only. Returns the sticker set
data SetStickerSetThumbnail
SetStickerSetThumbnail :: Maybe InputFile -> Maybe String -> Maybe Int -> SetStickerSetThumbnail

-- | Thumbnail to set in PNG, TGS, or WEBM format; pass null to remove the
--   sticker set thumbnail. Thumbnail format must match the format of
--   stickers in the set
[thumbnail] :: SetStickerSetThumbnail -> Maybe InputFile

[name] :: SetStickerSetThumbnail -> Maybe String

-- | Sticker set owner @name Sticker set name
[user_id] :: SetStickerSetThumbnail -> Maybe Int
instance GHC.Classes.Eq TD.Query.SetStickerSetThumbnail.SetStickerSetThumbnail
instance GHC.Show.Show TD.Query.SetStickerSetThumbnail.SetStickerSetThumbnail
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SetStickerSetThumbnail.SetStickerSetThumbnail


module TD.Query.SetStickerPositionInSet

-- | Changes the position of a sticker in the set to which it belongs; for
--   bots only. The sticker set must have been created by the bot
data SetStickerPositionInSet
SetStickerPositionInSet :: Maybe Int -> Maybe InputFile -> SetStickerPositionInSet

[position] :: SetStickerPositionInSet -> Maybe Int

-- | Sticker @position New position of the sticker in the set, 0-based
[sticker] :: SetStickerPositionInSet -> Maybe InputFile
instance GHC.Classes.Eq TD.Query.SetStickerPositionInSet.SetStickerPositionInSet
instance GHC.Show.Show TD.Query.SetStickerPositionInSet.SetStickerPositionInSet
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SetStickerPositionInSet.SetStickerPositionInSet


module TD.Query.SendCallLog

-- | Sends log file for a call to Telegram servers <tt>call_id Call
--   identifier </tt>log_file Call log file. Only inputFileLocal and
--   inputFileGenerated are supported
data SendCallLog
SendCallLog :: Maybe InputFile -> Maybe Int -> SendCallLog

[log_file] :: SendCallLog -> Maybe InputFile

[call_id] :: SendCallLog -> Maybe Int
instance GHC.Classes.Eq TD.Query.SendCallLog.SendCallLog
instance GHC.Show.Show TD.Query.SendCallLog.SendCallLog
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SendCallLog.SendCallLog


module TD.Query.RemoveStickerFromSet

-- | Removes a sticker from the set to which it belongs; for bots only. The
--   sticker set must have been created by the bot @sticker Sticker
data RemoveStickerFromSet
RemoveStickerFromSet :: Maybe InputFile -> RemoveStickerFromSet

[sticker] :: RemoveStickerFromSet -> Maybe InputFile
instance GHC.Classes.Eq TD.Query.RemoveStickerFromSet.RemoveStickerFromSet
instance GHC.Show.Show TD.Query.RemoveStickerFromSet.RemoveStickerFromSet
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.RemoveStickerFromSet.RemoveStickerFromSet


module TD.Query.RemoveSavedAnimation

-- | Removes an animation from the list of saved animations @animation
--   Animation file to be removed
data RemoveSavedAnimation
RemoveSavedAnimation :: Maybe InputFile -> RemoveSavedAnimation

[animation] :: RemoveSavedAnimation -> Maybe InputFile
instance GHC.Classes.Eq TD.Query.RemoveSavedAnimation.RemoveSavedAnimation
instance GHC.Show.Show TD.Query.RemoveSavedAnimation.RemoveSavedAnimation
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.RemoveSavedAnimation.RemoveSavedAnimation


module TD.Query.RemoveRecentSticker

-- | Removes a sticker from the list of recently used stickers
--   <tt>is_attached Pass true to remove the sticker from the list of
--   stickers recently attached to photo or video files; pass false to
--   remove the sticker from the list of recently sent stickers
--   </tt>sticker Sticker file to delete
data RemoveRecentSticker
RemoveRecentSticker :: Maybe InputFile -> Maybe Bool -> RemoveRecentSticker

[sticker] :: RemoveRecentSticker -> Maybe InputFile

[is_attached] :: RemoveRecentSticker -> Maybe Bool
instance GHC.Classes.Eq TD.Query.RemoveRecentSticker.RemoveRecentSticker
instance GHC.Show.Show TD.Query.RemoveRecentSticker.RemoveRecentSticker
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.RemoveRecentSticker.RemoveRecentSticker


module TD.Query.RemoveFavoriteSticker

-- | Removes a sticker from the list of favorite stickers @sticker Sticker
--   file to delete from the list
data RemoveFavoriteSticker
RemoveFavoriteSticker :: Maybe InputFile -> RemoveFavoriteSticker

[sticker] :: RemoveFavoriteSticker -> Maybe InputFile
instance GHC.Classes.Eq TD.Query.RemoveFavoriteSticker.RemoveFavoriteSticker
instance GHC.Show.Show TD.Query.RemoveFavoriteSticker.RemoveFavoriteSticker
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.RemoveFavoriteSticker.RemoveFavoriteSticker


module TD.Query.ImportMessages

-- | Imports messages exported from another app
data ImportMessages
ImportMessages :: Maybe [InputFile] -> Maybe InputFile -> Maybe Int -> ImportMessages

-- | Files used in the imported messages. Only inputFileLocal and
--   inputFileGenerated are supported. The files must not be previously
--   uploaded
[attached_files] :: ImportMessages -> Maybe [InputFile]

-- | File with messages to import. Only inputFileLocal and
--   inputFileGenerated are supported. The file must not be previously
--   uploaded
[message_file] :: ImportMessages -> Maybe InputFile

-- | Identifier of a chat to which the messages will be imported. It must
--   be an identifier of a private chat with a mutual contact or an
--   identifier of a supergroup chat with can_change_info administrator
--   right
[chat_id] :: ImportMessages -> Maybe Int
instance GHC.Classes.Eq TD.Query.ImportMessages.ImportMessages
instance GHC.Show.Show TD.Query.ImportMessages.ImportMessages
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ImportMessages.ImportMessages


module TD.Query.GetStickerEmojis

-- | Returns emoji corresponding to a sticker. The list is only for
--   informational purposes, because a sticker is always sent with a fixed
--   emoji from the corresponding Sticker object @sticker Sticker file
--   identifier
data GetStickerEmojis
GetStickerEmojis :: Maybe InputFile -> GetStickerEmojis

[sticker] :: GetStickerEmojis -> Maybe InputFile
instance GHC.Classes.Eq TD.Query.GetStickerEmojis.GetStickerEmojis
instance GHC.Show.Show TD.Query.GetStickerEmojis.GetStickerEmojis
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetStickerEmojis.GetStickerEmojis


module TD.Query.AddSavedNotificationSound

-- | Adds a new notification sound to the list of saved notification
--   sounds. The new notification sound is added to the top of the list. If
--   it is already in the list, its position isn't changed @sound
--   Notification sound file to add
data AddSavedNotificationSound
AddSavedNotificationSound :: Maybe InputFile -> AddSavedNotificationSound

[sound] :: AddSavedNotificationSound -> Maybe InputFile
instance GHC.Classes.Eq TD.Query.AddSavedNotificationSound.AddSavedNotificationSound
instance GHC.Show.Show TD.Query.AddSavedNotificationSound.AddSavedNotificationSound
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.AddSavedNotificationSound.AddSavedNotificationSound


module TD.Query.AddSavedAnimation

-- | Manually adds a new animation to the list of saved animations. The new
--   animation is added to the beginning of the list. If the animation was
--   already in the list, it is removed first. Only non-secret video
--   animations with MIME type "video/mp4" can be added to the list
data AddSavedAnimation
AddSavedAnimation :: Maybe InputFile -> AddSavedAnimation

-- | The animation file to be added. Only animations known to the server
--   (i.e., successfully sent via a message) can be added to the list
[animation] :: AddSavedAnimation -> Maybe InputFile
instance GHC.Classes.Eq TD.Query.AddSavedAnimation.AddSavedAnimation
instance GHC.Show.Show TD.Query.AddSavedAnimation.AddSavedAnimation
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.AddSavedAnimation.AddSavedAnimation


module TD.Query.AddRecentSticker

-- | Manually adds a new sticker to the list of recently used stickers. The
--   new sticker is added to the top of the list. If the sticker was
--   already in the list, it is removed from the list first. Only stickers
--   belonging to a sticker set can be added to this list
data AddRecentSticker
AddRecentSticker :: Maybe InputFile -> Maybe Bool -> AddRecentSticker

[sticker] :: AddRecentSticker -> Maybe InputFile

-- | Pass true to add the sticker to the list of stickers recently attached
--   to photo or video files; pass false to add the sticker to the list of
--   recently sent stickers @sticker Sticker file to add
[is_attached] :: AddRecentSticker -> Maybe Bool
instance GHC.Classes.Eq TD.Query.AddRecentSticker.AddRecentSticker
instance GHC.Show.Show TD.Query.AddRecentSticker.AddRecentSticker
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.AddRecentSticker.AddRecentSticker


module TD.Query.AddFavoriteSticker

-- | Adds a new sticker to the list of favorite stickers. The new sticker
--   is added to the top of the list. If the sticker was already in the
--   list, it is removed from the list first. Only stickers belonging to a
--   sticker set can be added to this list
data AddFavoriteSticker
AddFavoriteSticker :: Maybe InputFile -> AddFavoriteSticker

-- | Sticker file to add
[sticker] :: AddFavoriteSticker -> Maybe InputFile
instance GHC.Classes.Eq TD.Query.AddFavoriteSticker.AddFavoriteSticker
instance GHC.Show.Show TD.Query.AddFavoriteSticker.AddFavoriteSticker
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.AddFavoriteSticker.AddFavoriteSticker


module TD.Data.InputThumbnail

data InputThumbnail

-- | A thumbnail to be sent along with a file; must be in JPEG or WEBP
--   format for stickers, and less than 200 KB in size
InputThumbnail :: Maybe Int -> Maybe Int -> Maybe InputFile -> InputThumbnail

-- | Thumbnail height, usually shouldn't exceed 320. Use 0 if unknown
[height] :: InputThumbnail -> Maybe Int

-- | Thumbnail width, usually shouldn't exceed 320. Use 0 if unknown
[width] :: InputThumbnail -> Maybe Int

-- | Thumbnail file to send. Sending thumbnails by file_id is currently not
--   supported
[thumbnail] :: InputThumbnail -> Maybe InputFile
instance GHC.Classes.Eq TD.Data.InputThumbnail.InputThumbnail
instance GHC.Show.Show TD.Data.InputThumbnail.InputThumbnail
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.InputThumbnail.InputThumbnail
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.InputThumbnail.InputThumbnail


module TD.Data.InputSticker

data InputSticker

-- | A sticker to be added to a sticker set
InputSticker :: Maybe StickerType -> Maybe String -> Maybe InputFile -> InputSticker

-- | Sticker type
[_type] :: InputSticker -> Maybe StickerType

-- | Emojis corresponding to the sticker
[emojis] :: InputSticker -> Maybe String

-- | File with the sticker; must fit in a 512x512 square. For WEBP stickers
--   and masks the file must be in PNG format, which will be converted to
--   WEBP server-side. Otherwise, the file must be local or uploaded within
--   a week. See
--   <a>https://core.telegram.org/animated_stickers#technical-requirements</a>
--   for technical requirements
[sticker] :: InputSticker -> Maybe InputFile
instance GHC.Classes.Eq TD.Data.InputSticker.InputSticker
instance GHC.Show.Show TD.Data.InputSticker.InputSticker
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.InputSticker.InputSticker
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.InputSticker.InputSticker


module TD.Query.UploadStickerFile

-- | Uploads a file with a sticker; returns the uploaded file <tt>user_id
--   Sticker file owner; ignored for regular users </tt>sticker Sticker
--   file to upload
data UploadStickerFile
UploadStickerFile :: Maybe InputSticker -> Maybe Int -> UploadStickerFile

[sticker] :: UploadStickerFile -> Maybe InputSticker

[user_id] :: UploadStickerFile -> Maybe Int
instance GHC.Classes.Eq TD.Query.UploadStickerFile.UploadStickerFile
instance GHC.Show.Show TD.Query.UploadStickerFile.UploadStickerFile
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.UploadStickerFile.UploadStickerFile


module TD.Query.CreateNewStickerSet

-- | Creates a new sticker set. Returns the newly created sticker set
data CreateNewStickerSet
CreateNewStickerSet :: Maybe String -> Maybe [InputSticker] -> Maybe String -> Maybe String -> Maybe Int -> CreateNewStickerSet

-- | Source of the sticker set; may be empty if unknown
[source] :: CreateNewStickerSet -> Maybe String

-- | List of stickers to be added to the set; must be non-empty. All
--   stickers must have the same format. For TGS stickers,
--   uploadStickerFile must be used before the sticker is shown
[stickers] :: CreateNewStickerSet -> Maybe [InputSticker]

-- | Sticker set name. Can contain only English letters, digits and
--   underscores. Must end with *"_by_<a>username</a>"*
--   (*<a>bot_username</a>* is case insensitive) for bots; 1-64 characters
[name] :: CreateNewStickerSet -> Maybe String

-- | Sticker set title; 1-64 characters
[title] :: CreateNewStickerSet -> Maybe String

-- | Sticker set owner; ignored for regular users
[user_id] :: CreateNewStickerSet -> Maybe Int
instance GHC.Classes.Eq TD.Query.CreateNewStickerSet.CreateNewStickerSet
instance GHC.Show.Show TD.Query.CreateNewStickerSet.CreateNewStickerSet
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.CreateNewStickerSet.CreateNewStickerSet


module TD.Query.AddStickerToSet

-- | Adds a new sticker to a set; for bots only. Returns the sticker set
data AddStickerToSet
AddStickerToSet :: Maybe InputSticker -> Maybe String -> Maybe Int -> AddStickerToSet

[sticker] :: AddStickerToSet -> Maybe InputSticker

[name] :: AddStickerToSet -> Maybe String

-- | Sticker set owner <tt>name Sticker set name </tt>sticker Sticker to
--   add to the set
[user_id] :: AddStickerToSet -> Maybe Int
instance GHC.Classes.Eq TD.Query.AddStickerToSet.AddStickerToSet
instance GHC.Show.Show TD.Query.AddStickerToSet.AddStickerToSet
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.AddStickerToSet.AddStickerToSet


module TD.Data.InputPersonalDocument

data InputPersonalDocument

-- | A personal document to be saved to Telegram Passport <tt>files List of
--   files containing the pages of the document </tt>translation List of
--   files containing a certified English translation of the document
InputPersonalDocument :: Maybe [InputFile] -> Maybe [InputFile] -> InputPersonalDocument

[translation] :: InputPersonalDocument -> Maybe [InputFile]

[files] :: InputPersonalDocument -> Maybe [InputFile]
instance GHC.Classes.Eq TD.Data.InputPersonalDocument.InputPersonalDocument
instance GHC.Show.Show TD.Data.InputPersonalDocument.InputPersonalDocument
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.InputPersonalDocument.InputPersonalDocument
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.InputPersonalDocument.InputPersonalDocument


module TD.Data.InputCredentials

-- | Contains information about the payment method chosen by the user
data InputCredentials

-- | Applies if a user chooses some previously saved payment credentials.
--   To use their previously saved credentials, the user must have a valid
--   temporary password @saved_credentials_id Identifier of the saved
--   credentials
InputCredentialsSaved :: Maybe String -> InputCredentials

[saved_credentials_id] :: InputCredentials -> Maybe String

-- | Applies if a user enters new credentials on a payment provider website
--   <tt>data JSON-encoded data with the credential identifier from the
--   payment provider </tt>allow_save True, if the credential identifier
--   can be saved on the server side
InputCredentialsNew :: Maybe Bool -> Maybe String -> InputCredentials

[allow_save] :: InputCredentials -> Maybe Bool

[_data] :: InputCredentials -> Maybe String

-- | Applies if a user enters new credentials using Apple Pay @data
--   JSON-encoded data with the credential identifier
InputCredentialsApplePay :: Maybe String -> InputCredentials

[_data] :: InputCredentials -> Maybe String

-- | Applies if a user enters new credentials using Google Pay @data
--   JSON-encoded data with the credential identifier
InputCredentialsGooglePay :: Maybe String -> InputCredentials

[_data] :: InputCredentials -> Maybe String
instance GHC.Classes.Eq TD.Data.InputCredentials.InputCredentials
instance GHC.Show.Show TD.Data.InputCredentials.InputCredentials
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.InputCredentials.InputCredentials
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.InputCredentials.InputCredentials


module TD.Query.SendPaymentForm

-- | Sends a filled-out payment form to the bot for final verification
--   @input_invoice The invoice
data SendPaymentForm
SendPaymentForm :: Maybe Int -> Maybe InputCredentials -> Maybe String -> Maybe String -> Maybe Int -> Maybe InputInvoice -> SendPaymentForm

[tip_amount] :: SendPaymentForm -> Maybe Int

-- | The credentials chosen by user for payment @tip_amount Chosen by the
--   user amount of tip in the smallest units of the currency
[credentials] :: SendPaymentForm -> Maybe InputCredentials

[shipping_option_id] :: SendPaymentForm -> Maybe String

[order_info_id] :: SendPaymentForm -> Maybe String

-- | Payment form identifier returned by getPaymentForm <tt>order_info_id
--   Identifier returned by validateOrderInfo, or an empty string
--   </tt>shipping_option_id Identifier of a chosen shipping option, if
--   applicable
[payment_form_id] :: SendPaymentForm -> Maybe Int

[input_invoice] :: SendPaymentForm -> Maybe InputInvoice
instance GHC.Classes.Eq TD.Query.SendPaymentForm.SendPaymentForm
instance GHC.Show.Show TD.Query.SendPaymentForm.SendPaymentForm
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SendPaymentForm.SendPaymentForm


module TD.Data.InputChatPhoto

-- | Describes a photo to be set as a user profile or chat photo
data InputChatPhoto

-- | A previously used profile photo of the current user @chat_photo_id
--   Identifier of the current user's profile photo to reuse
InputChatPhotoPrevious :: Maybe Int -> InputChatPhoto

[chat_photo_id] :: InputChatPhoto -> Maybe Int

-- | A static photo in JPEG format @photo Photo to be set as profile photo.
--   Only inputFileLocal and inputFileGenerated are allowed
InputChatPhotoStatic :: Maybe InputFile -> InputChatPhoto

[photo] :: InputChatPhoto -> Maybe InputFile

-- | An animation in MPEG4 format; must be square, at most 10 seconds long,
--   have width between 160 and 800 and be at most 2MB in size
InputChatPhotoAnimation :: Maybe Float -> Maybe InputFile -> InputChatPhoto

-- | Timestamp of the frame, which will be used as static chat photo
[main_frame_timestamp] :: InputChatPhoto -> Maybe Float

-- | Animation to be set as profile photo. Only inputFileLocal and
--   inputFileGenerated are allowed
[animation] :: InputChatPhoto -> Maybe InputFile
instance GHC.Classes.Eq TD.Data.InputChatPhoto.InputChatPhoto
instance GHC.Show.Show TD.Data.InputChatPhoto.InputChatPhoto
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.InputChatPhoto.InputChatPhoto
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.InputChatPhoto.InputChatPhoto


module TD.Query.SetProfilePhoto

-- | Changes a profile photo for the current user @photo Profile photo to
--   set
data SetProfilePhoto
SetProfilePhoto :: Maybe InputChatPhoto -> SetProfilePhoto

[photo] :: SetProfilePhoto -> Maybe InputChatPhoto
instance GHC.Classes.Eq TD.Query.SetProfilePhoto.SetProfilePhoto
instance GHC.Show.Show TD.Query.SetProfilePhoto.SetProfilePhoto
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SetProfilePhoto.SetProfilePhoto


module TD.Query.SetChatPhoto

-- | Changes the photo of a chat. Supported only for basic groups,
--   supergroups and channels. Requires can_change_info administrator right
data SetChatPhoto
SetChatPhoto :: Maybe InputChatPhoto -> Maybe Int -> SetChatPhoto

[photo] :: SetChatPhoto -> Maybe InputChatPhoto

-- | Chat identifier @photo New chat photo; pass null to delete the chat
--   photo
[chat_id] :: SetChatPhoto -> Maybe Int
instance GHC.Classes.Eq TD.Query.SetChatPhoto.SetChatPhoto
instance GHC.Show.Show TD.Query.SetChatPhoto.SetChatPhoto
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SetChatPhoto.SetChatPhoto


module TD.Data.InputBackground

-- | Contains information about background to set
data InputBackground

-- | A background from a local file
InputBackgroundLocal :: Maybe InputFile -> InputBackground

-- | Background file to use. Only inputFileLocal and inputFileGenerated are
--   supported. The file must be in JPEG format for wallpapers and in PNG
--   format for patterns
[background] :: InputBackground -> Maybe InputFile

-- | A background from the server @background_id The background identifier
InputBackgroundRemote :: Maybe Int -> InputBackground

[background_id] :: InputBackground -> Maybe Int
instance GHC.Classes.Eq TD.Data.InputBackground.InputBackground
instance GHC.Show.Show TD.Data.InputBackground.InputBackground
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.InputBackground.InputBackground
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.InputBackground.InputBackground


module TD.Data.InlineKeyboardButtonType

-- | Describes the type of an inline keyboard button
data InlineKeyboardButtonType

-- | A button that opens a specified URL @url HTTP or tg:// URL to open
InlineKeyboardButtonTypeUrl :: Maybe String -> InlineKeyboardButtonType

[url] :: InlineKeyboardButtonType -> Maybe String

-- | A button that opens a specified URL and automatically authorize the
--   current user by calling getLoginUrlInfo <tt>url An HTTP URL to pass to
--   getLoginUrlInfo </tt>id Unique button identifier @forward_text If
--   non-empty, new text of the button in forwarded messages
InlineKeyboardButtonTypeLoginUrl :: Maybe String -> Maybe Int -> Maybe String -> InlineKeyboardButtonType

[forward_text] :: InlineKeyboardButtonType -> Maybe String

[_id] :: InlineKeyboardButtonType -> Maybe Int

[url] :: InlineKeyboardButtonType -> Maybe String

-- | A button that opens a Web App by calling openWebApp @url An HTTP URL
--   to pass to openWebApp
InlineKeyboardButtonTypeWebApp :: Maybe String -> InlineKeyboardButtonType

[url] :: InlineKeyboardButtonType -> Maybe String

-- | A button that sends a callback query to a bot @data Data to be sent to
--   the bot via a callback query
InlineKeyboardButtonTypeCallback :: Maybe String -> InlineKeyboardButtonType

[_data] :: InlineKeyboardButtonType -> Maybe String

-- | A button that asks for password of the current user and then sends a
--   callback query to a bot @data Data to be sent to the bot via a
--   callback query
InlineKeyboardButtonTypeCallbackWithPassword :: Maybe String -> InlineKeyboardButtonType

[_data] :: InlineKeyboardButtonType -> Maybe String

-- | A button with a game that sends a callback query to a bot. This button
--   must be in the first column and row of the keyboard and can be
--   attached only to a message with content of the type messageGame
InlineKeyboardButtonTypeCallbackGame :: InlineKeyboardButtonType

-- | A button that forces an inline query to the bot to be inserted in the
--   input field <tt>query Inline query to be sent to the bot
--   </tt>in_current_chat True, if the inline query must be sent from the
--   current chat
InlineKeyboardButtonTypeSwitchInline :: Maybe Bool -> Maybe String -> InlineKeyboardButtonType

[in_current_chat] :: InlineKeyboardButtonType -> Maybe Bool

[query] :: InlineKeyboardButtonType -> Maybe String

-- | A button to buy something. This button must be in the first column and
--   row of the keyboard and can be attached only to a message with content
--   of the type messageInvoice
InlineKeyboardButtonTypeBuy :: InlineKeyboardButtonType

-- | A button with a user reference to be handled in the same way as
--   textEntityTypeMentionName entities @user_id User identifier
InlineKeyboardButtonTypeUser :: Maybe Int -> InlineKeyboardButtonType

[user_id] :: InlineKeyboardButtonType -> Maybe Int
instance GHC.Classes.Eq TD.Data.InlineKeyboardButtonType.InlineKeyboardButtonType
instance GHC.Show.Show TD.Data.InlineKeyboardButtonType.InlineKeyboardButtonType
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.InlineKeyboardButtonType.InlineKeyboardButtonType
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.InlineKeyboardButtonType.InlineKeyboardButtonType


module TD.Data.InlineKeyboardButton

data InlineKeyboardButton

-- | Represents a single button in an inline keyboard <tt>text Text of the
--   button </tt>type Type of the button
InlineKeyboardButton :: Maybe InlineKeyboardButtonType -> Maybe String -> InlineKeyboardButton

[_type] :: InlineKeyboardButton -> Maybe InlineKeyboardButtonType

[text] :: InlineKeyboardButton -> Maybe String
instance GHC.Classes.Eq TD.Data.InlineKeyboardButton.InlineKeyboardButton
instance GHC.Show.Show TD.Data.InlineKeyboardButton.InlineKeyboardButton
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.InlineKeyboardButton.InlineKeyboardButton
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.InlineKeyboardButton.InlineKeyboardButton


module TD.Data.ReplyMarkup

-- | Contains a description of a custom keyboard and actions that can be
--   done with it to quickly reply to bots
data ReplyMarkup

-- | Instructs application to remove the keyboard once this message has
--   been received. This kind of keyboard can't be received in an incoming
--   message; instead, UpdateChatReplyMarkup with message_id == 0 will be
--   sent
ReplyMarkupRemoveKeyboard :: Maybe Bool -> ReplyMarkup

-- | True, if the keyboard is removed only for the mentioned users or the
--   target user of a reply
[is_personal] :: ReplyMarkup -> Maybe Bool

-- | Instructs application to force a reply to this message
ReplyMarkupForceReply :: Maybe String -> Maybe Bool -> ReplyMarkup

-- | If non-empty, the placeholder to be shown in the input field when the
--   reply is active; 0-64 characters
[input_field_placeholder] :: ReplyMarkup -> Maybe String

-- | True, if the keyboard is removed only for the mentioned users or the
--   target user of a reply
[is_personal] :: ReplyMarkup -> Maybe Bool

-- | Contains a custom keyboard layout to quickly reply to bots
ReplyMarkupShowKeyboard :: Maybe String -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe [[KeyboardButton]] -> ReplyMarkup

-- | If non-empty, the placeholder to be shown in the input field when the
--   reply is active; 0-64 characters
[input_field_placeholder] :: ReplyMarkup -> Maybe String

-- | True, if the keyboard is removed only for the mentioned users or the
--   target user of a reply
[is_personal] :: ReplyMarkup -> Maybe Bool

-- | True, if the application needs to hide the keyboard after use
[one_time] :: ReplyMarkup -> Maybe Bool

-- | True, if the application needs to resize the keyboard vertically
[resize_keyboard] :: ReplyMarkup -> Maybe Bool

-- | A list of rows of bot keyboard buttons
[rows] :: ReplyMarkup -> Maybe [[KeyboardButton]]

-- | Contains an inline keyboard layout
ReplyMarkupInlineKeyboard :: Maybe [[InlineKeyboardButton]] -> ReplyMarkup

-- | A list of rows of inline keyboard buttons
[_rows] :: ReplyMarkup -> Maybe [[InlineKeyboardButton]]
instance GHC.Classes.Eq TD.Data.ReplyMarkup.ReplyMarkup
instance GHC.Show.Show TD.Data.ReplyMarkup.ReplyMarkup
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.ReplyMarkup.ReplyMarkup
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.ReplyMarkup.ReplyMarkup


module TD.Query.StopPoll

-- | Stops a poll. A poll in a message can be stopped when the message has
--   can_be_edited flag set
data StopPoll
StopPoll :: Maybe ReplyMarkup -> Maybe Int -> Maybe Int -> StopPoll

-- | The new message reply markup; pass null if none; for bots only
[reply_markup] :: StopPoll -> Maybe ReplyMarkup

-- | Identifier of the message containing the poll
[message_id] :: StopPoll -> Maybe Int

-- | Identifier of the chat to which the poll belongs
[chat_id] :: StopPoll -> Maybe Int
instance GHC.Classes.Eq TD.Query.StopPoll.StopPoll
instance GHC.Show.Show TD.Query.StopPoll.StopPoll
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.StopPoll.StopPoll


module TD.Query.EditMessageReplyMarkup

-- | Edits the message reply markup; for bots only. Returns the edited
--   message after the edit is completed on the server side
data EditMessageReplyMarkup
EditMessageReplyMarkup :: Maybe ReplyMarkup -> Maybe Int -> Maybe Int -> EditMessageReplyMarkup

-- | The new message reply markup; pass null if none
[reply_markup] :: EditMessageReplyMarkup -> Maybe ReplyMarkup

-- | Identifier of the message
[message_id] :: EditMessageReplyMarkup -> Maybe Int

-- | The chat the message belongs to
[chat_id] :: EditMessageReplyMarkup -> Maybe Int
instance GHC.Classes.Eq TD.Query.EditMessageReplyMarkup.EditMessageReplyMarkup
instance GHC.Show.Show TD.Query.EditMessageReplyMarkup.EditMessageReplyMarkup
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.EditMessageReplyMarkup.EditMessageReplyMarkup


module TD.Query.EditMessageLiveLocation

-- | Edits the message content of a live location. Messages can be edited
--   for a limited period of time specified in the live location. Returns
--   the edited message after the edit is completed on the server side
data EditMessageLiveLocation
EditMessageLiveLocation :: Maybe Int -> Maybe Int -> Maybe Location -> Maybe ReplyMarkup -> Maybe Int -> Maybe Int -> EditMessageLiveLocation

-- | The new maximum distance for proximity alerts, in meters (0-100000).
--   Pass 0 if the notification is disabled
[proximity_alert_radius] :: EditMessageLiveLocation -> Maybe Int

-- | The new direction in which the location moves, in degrees; 1-360. Pass
--   0 if unknown
[heading] :: EditMessageLiveLocation -> Maybe Int

-- | New location content of the message; pass null to stop sharing the
--   live location
[location] :: EditMessageLiveLocation -> Maybe Location

-- | The new message reply markup; pass null if none; for bots only
[reply_markup] :: EditMessageLiveLocation -> Maybe ReplyMarkup

-- | Identifier of the message
[message_id] :: EditMessageLiveLocation -> Maybe Int

-- | The chat the message belongs to
[chat_id] :: EditMessageLiveLocation -> Maybe Int
instance GHC.Classes.Eq TD.Query.EditMessageLiveLocation.EditMessageLiveLocation
instance GHC.Show.Show TD.Query.EditMessageLiveLocation.EditMessageLiveLocation
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.EditMessageLiveLocation.EditMessageLiveLocation


module TD.Query.EditInlineMessageReplyMarkup

-- | Edits the reply markup of an inline message sent via a bot; for bots
--   only
data EditInlineMessageReplyMarkup
EditInlineMessageReplyMarkup :: Maybe ReplyMarkup -> Maybe String -> EditInlineMessageReplyMarkup

-- | The new message reply markup; pass null if none
[reply_markup] :: EditInlineMessageReplyMarkup -> Maybe ReplyMarkup

-- | Inline message identifier
[inline_message_id] :: EditInlineMessageReplyMarkup -> Maybe String
instance GHC.Classes.Eq TD.Query.EditInlineMessageReplyMarkup.EditInlineMessageReplyMarkup
instance GHC.Show.Show TD.Query.EditInlineMessageReplyMarkup.EditInlineMessageReplyMarkup
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.EditInlineMessageReplyMarkup.EditInlineMessageReplyMarkup


module TD.Query.EditInlineMessageLiveLocation

-- | Edits the content of a live location in an inline message sent via a
--   bot; for bots only
data EditInlineMessageLiveLocation
EditInlineMessageLiveLocation :: Maybe Int -> Maybe Int -> Maybe Location -> Maybe ReplyMarkup -> Maybe String -> EditInlineMessageLiveLocation

-- | The new maximum distance for proximity alerts, in meters (0-100000).
--   Pass 0 if the notification is disabled
[proximity_alert_radius] :: EditInlineMessageLiveLocation -> Maybe Int

-- | The new direction in which the location moves, in degrees; 1-360. Pass
--   0 if unknown
[heading] :: EditInlineMessageLiveLocation -> Maybe Int

-- | New location content of the message; pass null to stop sharing the
--   live location
[location] :: EditInlineMessageLiveLocation -> Maybe Location

-- | The new message reply markup; pass null if none
[reply_markup] :: EditInlineMessageLiveLocation -> Maybe ReplyMarkup

-- | Inline message identifier
[inline_message_id] :: EditInlineMessageLiveLocation -> Maybe String
instance GHC.Classes.Eq TD.Query.EditInlineMessageLiveLocation.EditInlineMessageLiveLocation
instance GHC.Show.Show TD.Query.EditInlineMessageLiveLocation.EditInlineMessageLiveLocation
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.EditInlineMessageLiveLocation.EditInlineMessageLiveLocation


module TD.Data.ImportedContacts

data ImportedContacts

-- | Represents the result of an ImportContacts request @user_ids User
--   identifiers of the imported contacts in the same order as they were
--   specified in the request; 0 if the contact is not yet a registered
--   user
ImportedContacts :: Maybe [Int] -> Maybe [Int] -> ImportedContacts

-- | The number of users that imported the corresponding contact; 0 for
--   already registered users or if unavailable
[importer_count] :: ImportedContacts -> Maybe [Int]

[user_ids] :: ImportedContacts -> Maybe [Int]
instance GHC.Classes.Eq TD.Data.ImportedContacts.ImportedContacts
instance GHC.Show.Show TD.Data.ImportedContacts.ImportedContacts
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.ImportedContacts.ImportedContacts
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.ImportedContacts.ImportedContacts


module TD.Data.HttpUrl

data HttpUrl

-- | Contains an HTTP URL @url The URL
HttpUrl :: Maybe String -> HttpUrl

[url] :: HttpUrl -> Maybe String
instance GHC.Classes.Eq TD.Data.HttpUrl.HttpUrl
instance GHC.Show.Show TD.Data.HttpUrl.HttpUrl
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.HttpUrl.HttpUrl
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.HttpUrl.HttpUrl


module TD.Data.Hashtags

data Hashtags

-- | Contains a list of hashtags @hashtags A list of hashtags
Hashtags :: Maybe [String] -> Hashtags

[hashtags] :: Hashtags -> Maybe [String]
instance GHC.Classes.Eq TD.Data.Hashtags.Hashtags
instance GHC.Show.Show TD.Data.Hashtags.Hashtags
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.Hashtags.Hashtags
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.Hashtags.Hashtags


module TD.Data.GroupCallVideoSourceGroup

data GroupCallVideoSourceGroup

-- | Describes a group of video synchronization source identifiers
--   <tt>semantics The semantics of sources, one of <a>SIM</a> or
--   <a>FID</a> </tt>source_ids The list of synchronization source
--   identifiers
GroupCallVideoSourceGroup :: Maybe [Int] -> Maybe String -> GroupCallVideoSourceGroup

[source_ids] :: GroupCallVideoSourceGroup -> Maybe [Int]

[semantics] :: GroupCallVideoSourceGroup -> Maybe String
instance GHC.Classes.Eq TD.Data.GroupCallVideoSourceGroup.GroupCallVideoSourceGroup
instance GHC.Show.Show TD.Data.GroupCallVideoSourceGroup.GroupCallVideoSourceGroup
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.GroupCallVideoSourceGroup.GroupCallVideoSourceGroup
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.GroupCallVideoSourceGroup.GroupCallVideoSourceGroup


module TD.Data.GroupCallVideoQuality

-- | Describes the quality of a group call video
data GroupCallVideoQuality

-- | The worst available video quality
GroupCallVideoQualityThumbnail :: GroupCallVideoQuality

-- | The medium video quality
GroupCallVideoQualityMedium :: GroupCallVideoQuality

-- | The best available video quality
GroupCallVideoQualityFull :: GroupCallVideoQuality
instance GHC.Classes.Eq TD.Data.GroupCallVideoQuality.GroupCallVideoQuality
instance GHC.Show.Show TD.Data.GroupCallVideoQuality.GroupCallVideoQuality
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.GroupCallVideoQuality.GroupCallVideoQuality
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.GroupCallVideoQuality.GroupCallVideoQuality


module TD.Query.GetGroupCallStreamSegment

-- | Returns a file with a segment of a group call stream in a modified OGG
--   format for audio or MPEG-4 format for video
data GetGroupCallStreamSegment
GetGroupCallStreamSegment :: Maybe GroupCallVideoQuality -> Maybe Int -> Maybe Int -> Maybe Int -> Maybe Int -> GetGroupCallStreamSegment

-- | Video quality as received from tgcalls; pass null to get the worst
--   available quality
[video_quality] :: GetGroupCallStreamSegment -> Maybe GroupCallVideoQuality

-- | Identifier of an audio/video channel to get as received from tgcalls
[channel_id] :: GetGroupCallStreamSegment -> Maybe Int

-- | Segment duration scale; 0-1. Segment's duration is 1000/(2**scale)
--   milliseconds
[scale] :: GetGroupCallStreamSegment -> Maybe Int

-- | Point in time when the stream segment begins; Unix timestamp in
--   milliseconds
[time_offset] :: GetGroupCallStreamSegment -> Maybe Int

-- | Group call identifier
[group_call_id] :: GetGroupCallStreamSegment -> Maybe Int
instance GHC.Classes.Eq TD.Query.GetGroupCallStreamSegment.GetGroupCallStreamSegment
instance GHC.Show.Show TD.Query.GetGroupCallStreamSegment.GetGroupCallStreamSegment
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetGroupCallStreamSegment.GetGroupCallStreamSegment


module TD.Data.GroupCallStream

data GroupCallStream

-- | Describes an available stream in a group call
GroupCallStream :: Maybe Int -> Maybe Int -> Maybe Int -> GroupCallStream

-- | Point in time when the stream currently ends; Unix timestamp in
--   milliseconds
[time_offset] :: GroupCallStream -> Maybe Int

-- | Scale of segment durations in the stream. The duration is
--   1000/(2**scale) milliseconds
[scale] :: GroupCallStream -> Maybe Int

-- | Identifier of an audio/video channel
[channel_id] :: GroupCallStream -> Maybe Int
instance GHC.Classes.Eq TD.Data.GroupCallStream.GroupCallStream
instance GHC.Show.Show TD.Data.GroupCallStream.GroupCallStream
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.GroupCallStream.GroupCallStream
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.GroupCallStream.GroupCallStream


module TD.Data.GroupCallStreams

data GroupCallStreams

-- | Represents a list of group call streams @streams A list of group call
--   streams
GroupCallStreams :: Maybe [GroupCallStream] -> GroupCallStreams

[streams] :: GroupCallStreams -> Maybe [GroupCallStream]
instance GHC.Classes.Eq TD.Data.GroupCallStreams.GroupCallStreams
instance GHC.Show.Show TD.Data.GroupCallStreams.GroupCallStreams
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.GroupCallStreams.GroupCallStreams
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.GroupCallStreams.GroupCallStreams


module TD.Data.GroupCallRecentSpeaker

data GroupCallRecentSpeaker

-- | Describes a recently speaking participant in a group call
--   <tt>participant_id Group call participant identifier </tt>is_speaking
--   True, is the user has spoken recently
GroupCallRecentSpeaker :: Maybe Bool -> Maybe MessageSender -> GroupCallRecentSpeaker

[is_speaking] :: GroupCallRecentSpeaker -> Maybe Bool

[participant_id] :: GroupCallRecentSpeaker -> Maybe MessageSender
instance GHC.Classes.Eq TD.Data.GroupCallRecentSpeaker.GroupCallRecentSpeaker
instance GHC.Show.Show TD.Data.GroupCallRecentSpeaker.GroupCallRecentSpeaker
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.GroupCallRecentSpeaker.GroupCallRecentSpeaker
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.GroupCallRecentSpeaker.GroupCallRecentSpeaker


module TD.Data.GroupCallParticipantVideoInfo

data GroupCallParticipantVideoInfo

-- | Contains information about a group call participant's video channel
--   <tt>source_groups List of synchronization source groups of the video
--   </tt>endpoint_id Video channel endpoint identifier
GroupCallParticipantVideoInfo :: Maybe Bool -> Maybe String -> Maybe [GroupCallVideoSourceGroup] -> GroupCallParticipantVideoInfo

-- | True if the video is paused. This flag needs to be ignored, if new
--   video frames are received
[is_paused] :: GroupCallParticipantVideoInfo -> Maybe Bool

[endpoint_id] :: GroupCallParticipantVideoInfo -> Maybe String

[source_groups] :: GroupCallParticipantVideoInfo -> Maybe [GroupCallVideoSourceGroup]
instance GHC.Classes.Eq TD.Data.GroupCallParticipantVideoInfo.GroupCallParticipantVideoInfo
instance GHC.Show.Show TD.Data.GroupCallParticipantVideoInfo.GroupCallParticipantVideoInfo
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.GroupCallParticipantVideoInfo.GroupCallParticipantVideoInfo
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.GroupCallParticipantVideoInfo.GroupCallParticipantVideoInfo


module TD.Data.GroupCallParticipant

data GroupCallParticipant

-- | Represents a group call participant
GroupCallParticipant :: Maybe String -> Maybe Int -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe String -> Maybe GroupCallParticipantVideoInfo -> Maybe GroupCallParticipantVideoInfo -> Maybe Int -> Maybe Int -> Maybe MessageSender -> GroupCallParticipant

-- | User's order in the group call participant list. Orders must be
--   compared lexicographically. The bigger is order, the higher is user in
--   the list. If order is empty, the user must be removed from the
--   participant list
[order] :: GroupCallParticipant -> Maybe String

-- | Participant's volume level; 1-20000 in hundreds of percents
[volume_level] :: GroupCallParticipant -> Maybe Int

-- | True, if the participant is muted for all users, but can unmute
--   themselves
[can_unmute_self] :: GroupCallParticipant -> Maybe Bool

-- | True, if the participant is muted for the current user
[is_muted_for_current_user] :: GroupCallParticipant -> Maybe Bool

-- | True, if the participant is muted for all users
[is_muted_for_all_users] :: GroupCallParticipant -> Maybe Bool

-- | True, if the current user can unmute the participant for self
[can_be_unmuted_for_current_user] :: GroupCallParticipant -> Maybe Bool

-- | True, if the current user can mute the participant only for self
[can_be_muted_for_current_user] :: GroupCallParticipant -> Maybe Bool

-- | True, if the current user can allow the participant to unmute
--   themselves or unmute the participant (if the participant is the
--   current user)
[can_be_unmuted_for_all_users] :: GroupCallParticipant -> Maybe Bool

-- | True, if the current user can mute the participant for all other group
--   call participants
[can_be_muted_for_all_users] :: GroupCallParticipant -> Maybe Bool

-- | True, if the participant hand is raised
[is_hand_raised] :: GroupCallParticipant -> Maybe Bool

-- | True, if the participant is speaking as set by
--   setGroupCallParticipantIsSpeaking
[is_speaking] :: GroupCallParticipant -> Maybe Bool

-- | True, if the participant is the current user
[is_current_user] :: GroupCallParticipant -> Maybe Bool

-- | The participant user's bio or the participant chat's description
[bio] :: GroupCallParticipant -> Maybe String

-- | Information about user's screen sharing video channel; may be null if
--   there is no active screen sharing video
[screen_sharing_video_info] :: GroupCallParticipant -> Maybe GroupCallParticipantVideoInfo

-- | Information about user's video channel; may be null if there is no
--   active video
[video_info] :: GroupCallParticipant -> Maybe GroupCallParticipantVideoInfo

-- | User's screen sharing audio channel synchronization source identifier
[screen_sharing_audio_source_id] :: GroupCallParticipant -> Maybe Int

-- | User's audio channel synchronization source identifier
[audio_source_id] :: GroupCallParticipant -> Maybe Int

-- | Identifier of the group call participant
[participant_id] :: GroupCallParticipant -> Maybe MessageSender
instance GHC.Classes.Eq TD.Data.GroupCallParticipant.GroupCallParticipant
instance GHC.Show.Show TD.Data.GroupCallParticipant.GroupCallParticipant
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.GroupCallParticipant.GroupCallParticipant
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.GroupCallParticipant.GroupCallParticipant


module TD.Data.GroupCallId

data GroupCallId

-- | Contains the group call identifier @id Group call identifier
GroupCallId :: Maybe Int -> GroupCallId

[_id] :: GroupCallId -> Maybe Int
instance GHC.Classes.Eq TD.Data.GroupCallId.GroupCallId
instance GHC.Show.Show TD.Data.GroupCallId.GroupCallId
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.GroupCallId.GroupCallId
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.GroupCallId.GroupCallId


module TD.Data.GroupCall

data GroupCall

-- | Describes a group call
GroupCall :: Maybe Int -> Maybe Bool -> Maybe Int -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe [GroupCallRecentSpeaker] -> Maybe Bool -> Maybe Bool -> Maybe Int -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Int -> Maybe String -> Maybe Int -> GroupCall

-- | Call duration, in seconds; for ended calls only
[duration] :: GroupCall -> Maybe Int

-- | True, if a video file is being recorded for the call
[is_video_recorded] :: GroupCall -> Maybe Bool

-- | Duration of the ongoing group call recording, in seconds; 0 if none.
--   An updateGroupCall update is not triggered when value of this field
--   changes, but the same recording goes on
[record_duration] :: GroupCall -> Maybe Int

-- | True, if the current user can enable or disable mute_new_participants
--   setting
[can_toggle_mute_new_participants] :: GroupCall -> Maybe Bool

-- | True, if only group call administrators can unmute new participants
[mute_new_participants] :: GroupCall -> Maybe Bool

-- | True, if the current user can broadcast video or share screen
[can_enable_video] :: GroupCall -> Maybe Bool

-- | True, if the current user's video is paused
[is_my_video_paused] :: GroupCall -> Maybe Bool

-- | True, if the current user's video is enabled
[is_my_video_enabled] :: GroupCall -> Maybe Bool

-- | At most 3 recently speaking users in the group call
[recent_speakers] :: GroupCall -> Maybe [GroupCallRecentSpeaker]

-- | True, if all group call participants are loaded
[loaded_all_participants] :: GroupCall -> Maybe Bool

-- | True, if group call participants, which are muted, aren't returned in
--   participant list
[has_hidden_listeners] :: GroupCall -> Maybe Bool

-- | Number of participants in the group call
[participant_count] :: GroupCall -> Maybe Int

-- | True, if the current user can manage the group call
[can_be_managed] :: GroupCall -> Maybe Bool

-- | True, if user was kicked from the call because of network loss and the
--   call needs to be rejoined
[need_rejoin] :: GroupCall -> Maybe Bool

-- | True, if the call is joined
[is_joined] :: GroupCall -> Maybe Bool

-- | True, if the chat is an RTMP stream instead of an ordinary video chat
[is_rtmp_stream] :: GroupCall -> Maybe Bool

-- | True, if the call is active
[is_active] :: GroupCall -> Maybe Bool

-- | True, if the group call is scheduled and the current user will receive
--   a notification when the group call will start
[enabled_start_notification] :: GroupCall -> Maybe Bool

-- | Point in time (Unix timestamp) when the group call is supposed to be
--   started by an administrator; 0 if it is already active or was ended
[scheduled_start_date] :: GroupCall -> Maybe Int

-- | Group call title
[title] :: GroupCall -> Maybe String

-- | Group call identifier
[_id] :: GroupCall -> Maybe Int
instance GHC.Classes.Eq TD.Data.GroupCall.GroupCall
instance GHC.Show.Show TD.Data.GroupCall.GroupCall
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.GroupCall.GroupCall
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.GroupCall.GroupCall


module TD.Data.GameHighScore

data GameHighScore

-- | Contains one row of the game high score table <tt>position Position in
--   the high score table </tt>user_id User identifier @score User score
GameHighScore :: Maybe Int -> Maybe Int -> Maybe Int -> GameHighScore

[score] :: GameHighScore -> Maybe Int

[user_id] :: GameHighScore -> Maybe Int

[position] :: GameHighScore -> Maybe Int
instance GHC.Classes.Eq TD.Data.GameHighScore.GameHighScore
instance GHC.Show.Show TD.Data.GameHighScore.GameHighScore
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.GameHighScore.GameHighScore
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.GameHighScore.GameHighScore


module TD.Data.GameHighScores

data GameHighScores

-- | Contains a list of game high scores @scores A list of game high scores
GameHighScores :: Maybe [GameHighScore] -> GameHighScores

[scores] :: GameHighScores -> Maybe [GameHighScore]
instance GHC.Classes.Eq TD.Data.GameHighScores.GameHighScores
instance GHC.Show.Show TD.Data.GameHighScores.GameHighScores
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.GameHighScores.GameHighScores
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.GameHighScores.GameHighScores


module TD.Data.FormattedText

data FormattedText

-- | A text with some entities <tt>text The text </tt>entities Entities
--   contained in the text. Entities can be nested, but must not mutually
--   intersect with each other. Pre, Code and PreCode entities can't
--   contain other entities. Bold, Italic, Underline, Strikethrough, and
--   Spoiler entities can contain and to be contained in all other
--   entities. All other entities can't contain each other
FormattedText :: Maybe [TextEntity] -> Maybe String -> FormattedText

[entities] :: FormattedText -> Maybe [TextEntity]

[text] :: FormattedText -> Maybe String
instance GHC.Classes.Eq TD.Data.FormattedText.FormattedText
instance GHC.Show.Show TD.Data.FormattedText.FormattedText
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.FormattedText.FormattedText
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.FormattedText.FormattedText


module TD.Query.ParseMarkdown

-- | Parses Markdown entities in a human-friendly format, ignoring markup
--   errors. Can be called synchronously
data ParseMarkdown
ParseMarkdown :: Maybe FormattedText -> ParseMarkdown

-- | The text to parse. For example, "<b>italic</b> ~~strikethrough~~
--   ||spoiler|| **bold** <tt>code</tt> `<tt>`pre`</tt>` <b>[italic</b>
--   text_url](telegram.org) <b>italic**bold italic</b>bold**"
[text] :: ParseMarkdown -> Maybe FormattedText
instance GHC.Classes.Eq TD.Query.ParseMarkdown.ParseMarkdown
instance GHC.Show.Show TD.Query.ParseMarkdown.ParseMarkdown
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ParseMarkdown.ParseMarkdown


module TD.Query.GetWebPagePreview

-- | Returns a web page preview by the text of the message. Do not call
--   this function too often. Returns a 404 error if the web page has no
--   preview @text Message text with formatting
data GetWebPagePreview
GetWebPagePreview :: Maybe FormattedText -> GetWebPagePreview

[text] :: GetWebPagePreview -> Maybe FormattedText
instance GHC.Classes.Eq TD.Query.GetWebPagePreview.GetWebPagePreview
instance GHC.Show.Show TD.Query.GetWebPagePreview.GetWebPagePreview
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetWebPagePreview.GetWebPagePreview


module TD.Query.GetMarkdownText

-- | Replaces text entities with Markdown formatting in a human-friendly
--   format. Entities that can't be represented in Markdown unambiguously
--   are kept as is. Can be called synchronously @text The text
data GetMarkdownText
GetMarkdownText :: Maybe FormattedText -> GetMarkdownText

[text] :: GetMarkdownText -> Maybe FormattedText
instance GHC.Classes.Eq TD.Query.GetMarkdownText.GetMarkdownText
instance GHC.Show.Show TD.Query.GetMarkdownText.GetMarkdownText
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetMarkdownText.GetMarkdownText


module TD.Query.EditMessageCaption

-- | Edits the message content caption. Returns the edited message after
--   the edit is completed on the server side
data EditMessageCaption
EditMessageCaption :: Maybe FormattedText -> Maybe ReplyMarkup -> Maybe Int -> Maybe Int -> EditMessageCaption

-- | New message content caption; 0-GetOption("message_caption_length_max")
--   characters; pass null to remove caption
[caption] :: EditMessageCaption -> Maybe FormattedText

-- | The new message reply markup; pass null if none; for bots only
[reply_markup] :: EditMessageCaption -> Maybe ReplyMarkup

-- | Identifier of the message
[message_id] :: EditMessageCaption -> Maybe Int

-- | The chat the message belongs to
[chat_id] :: EditMessageCaption -> Maybe Int
instance GHC.Classes.Eq TD.Query.EditMessageCaption.EditMessageCaption
instance GHC.Show.Show TD.Query.EditMessageCaption.EditMessageCaption
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.EditMessageCaption.EditMessageCaption


module TD.Query.EditInlineMessageCaption

-- | Edits the caption of an inline message sent via a bot; for bots only
data EditInlineMessageCaption
EditInlineMessageCaption :: Maybe FormattedText -> Maybe ReplyMarkup -> Maybe String -> EditInlineMessageCaption

-- | New message content caption; pass null to remove caption;
--   0-GetOption("message_caption_length_max") characters
[caption] :: EditInlineMessageCaption -> Maybe FormattedText

-- | The new message reply markup; pass null if none
[reply_markup] :: EditInlineMessageCaption -> Maybe ReplyMarkup

-- | Inline message identifier
[inline_message_id] :: EditInlineMessageCaption -> Maybe String
instance GHC.Classes.Eq TD.Query.EditInlineMessageCaption.EditInlineMessageCaption
instance GHC.Show.Show TD.Query.EditInlineMessageCaption.EditInlineMessageCaption
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.EditInlineMessageCaption.EditInlineMessageCaption


module TD.Data.TermsOfService

data TermsOfService

-- | Contains Telegram terms of service <tt>text Text of the terms of
--   service </tt>min_user_age The minimum age of a user to be able to
--   accept the terms; 0 if age isn't restricted @show_popup True, if a
--   blocking popup with terms of service must be shown to the user
TermsOfService :: Maybe Bool -> Maybe Int -> Maybe FormattedText -> TermsOfService

[show_popup] :: TermsOfService -> Maybe Bool

[min_user_age] :: TermsOfService -> Maybe Int

[text] :: TermsOfService -> Maybe FormattedText
instance GHC.Classes.Eq TD.Data.TermsOfService.TermsOfService
instance GHC.Show.Show TD.Data.TermsOfService.TermsOfService
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.TermsOfService.TermsOfService
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.TermsOfService.TermsOfService


module TD.Data.PollType

-- | Describes the type of a poll
data PollType

-- | A regular poll @allow_multiple_answers True, if multiple answer
--   options can be chosen simultaneously
PollTypeRegular :: Maybe Bool -> PollType

[allow_multiple_answers] :: PollType -> Maybe Bool

-- | A poll in quiz mode, which has exactly one correct answer option and
--   can be answered only once
PollTypeQuiz :: Maybe FormattedText -> Maybe Int -> PollType

-- | Text that is shown when the user chooses an incorrect answer or taps
--   on the lamp icon; 0-200 characters with at most 2 line feeds; empty
--   for a yet unanswered poll
[explanation] :: PollType -> Maybe FormattedText

-- | 0-based identifier of the correct answer option; -1 for a yet
--   unanswered poll
[correct_option_id] :: PollType -> Maybe Int
instance GHC.Classes.Eq TD.Data.PollType.PollType
instance GHC.Show.Show TD.Data.PollType.PollType
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.PollType.PollType
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.PollType.PollType


module TD.Data.Poll

data Poll

-- | Describes a poll <tt>id Unique poll identifier </tt>question Poll
--   question; 1-300 characters @options List of poll answer options
Poll :: Maybe Bool -> Maybe Int -> Maybe Int -> Maybe PollType -> Maybe Bool -> Maybe [Int] -> Maybe Int -> Maybe [PollOption] -> Maybe String -> Maybe Int -> Poll

[is_closed] :: Poll -> Maybe Bool

[close_date] :: Poll -> Maybe Int

-- | Amount of time the poll will be active after creation, in seconds
--   <tt>close_date Point in time (Unix timestamp) when the poll will
--   automatically be closed </tt>is_closed True, if the poll is closed
[open_period] :: Poll -> Maybe Int

[_type] :: Poll -> Maybe PollType

-- | True, if the poll is anonymous @type Type of the poll
[is_anonymous] :: Poll -> Maybe Bool

[recent_voter_user_ids] :: Poll -> Maybe [Int]

-- | Total number of voters, participating in the poll
--   @recent_voter_user_ids User identifiers of recent voters, if the poll
--   is non-anonymous
[total_voter_count] :: Poll -> Maybe Int

[options] :: Poll -> Maybe [PollOption]

[question] :: Poll -> Maybe String

[_id] :: Poll -> Maybe Int
instance GHC.Classes.Eq TD.Data.Poll.Poll
instance GHC.Show.Show TD.Data.Poll.Poll
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.Poll.Poll
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.Poll.Poll


module TD.Data.MessageCopyOptions

data MessageCopyOptions

-- | Options to be used when a message content is copied without reference
--   to the original sender. Service messages and messageInvoice can't be
--   copied
MessageCopyOptions :: Maybe FormattedText -> Maybe Bool -> Maybe Bool -> MessageCopyOptions

-- | New message caption; pass null to copy message without caption.
--   Ignored if replace_caption is false
[new_caption] :: MessageCopyOptions -> Maybe FormattedText

-- | True, if media caption of the message copy needs to be replaced.
--   Ignored if send_copy is false
[replace_caption] :: MessageCopyOptions -> Maybe Bool

-- | True, if content of the message needs to be copied without reference
--   to the original sender. Always true if the message is forwarded to a
--   secret chat or is local
[send_copy] :: MessageCopyOptions -> Maybe Bool
instance GHC.Classes.Eq TD.Data.MessageCopyOptions.MessageCopyOptions
instance GHC.Show.Show TD.Data.MessageCopyOptions.MessageCopyOptions
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.MessageCopyOptions.MessageCopyOptions
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.MessageCopyOptions.MessageCopyOptions


module TD.Data.FileType

-- | Represents the type of a file
data FileType

-- | The data is not a file
FileTypeNone :: FileType

-- | The file is an animation
FileTypeAnimation :: FileType

-- | The file is an audio file
FileTypeAudio :: FileType

-- | The file is a document
FileTypeDocument :: FileType

-- | The file is a notification sound
FileTypeNotificationSound :: FileType

-- | The file is a photo
FileTypePhoto :: FileType

-- | The file is a profile photo
FileTypeProfilePhoto :: FileType

-- | The file was sent to a secret chat (the file type is not known to the
--   server)
FileTypeSecret :: FileType

-- | The file is a thumbnail of a file from a secret chat
FileTypeSecretThumbnail :: FileType

-- | The file is a file from Secure storage used for storing Telegram
--   Passport files
FileTypeSecure :: FileType

-- | The file is a sticker
FileTypeSticker :: FileType

-- | The file is a thumbnail of another file
FileTypeThumbnail :: FileType

-- | The file type is not yet known
FileTypeUnknown :: FileType

-- | The file is a video
FileTypeVideo :: FileType

-- | The file is a video note
FileTypeVideoNote :: FileType

-- | The file is a voice note
FileTypeVoiceNote :: FileType

-- | The file is a wallpaper or a background pattern
FileTypeWallpaper :: FileType
instance GHC.Classes.Eq TD.Data.FileType.FileType
instance GHC.Show.Show TD.Data.FileType.FileType
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.FileType.FileType
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.FileType.FileType


module TD.Query.UploadFile

-- | Asynchronously uploads a file to the cloud without sending it in a
--   message. updateFile will be used to notify about upload progress and
--   successful completion of the upload. The file will not have a
--   persistent remote identifier until it will be sent in a message
data UploadFile
UploadFile :: Maybe Int -> Maybe FileType -> Maybe InputFile -> UploadFile

-- | Priority of the upload (1-32). The higher the priority, the earlier
--   the file will be uploaded. If the priorities of two files are equal,
--   then the first one for which uploadFile was called will be uploaded
--   first
[priority] :: UploadFile -> Maybe Int

-- | File type; pass null if unknown
[file_type] :: UploadFile -> Maybe FileType

-- | File to upload
[file] :: UploadFile -> Maybe InputFile
instance GHC.Classes.Eq TD.Query.UploadFile.UploadFile
instance GHC.Show.Show TD.Query.UploadFile.UploadFile
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.UploadFile.UploadFile


module TD.Query.OptimizeStorage

-- | Optimizes storage usage, i.e. deletes some files and returns new
--   storage usage statistics. Secret thumbnails can't be deleted
data OptimizeStorage
OptimizeStorage :: Maybe Int -> Maybe Bool -> Maybe [Int] -> Maybe [Int] -> Maybe [FileType] -> Maybe Int -> Maybe Int -> Maybe Int -> Maybe Int -> OptimizeStorage

-- | Same as in getStorageStatistics. Affects only returned statistics
[chat_limit] :: OptimizeStorage -> Maybe Int

-- | Pass true if statistics about the files that were deleted must be
--   returned instead of the whole storage usage statistics. Affects only
--   returned statistics
[return_deleted_file_statistics] :: OptimizeStorage -> Maybe Bool

-- | If non-empty, files from the given chats are excluded. Use 0 as chat
--   identifier to exclude all files not belonging to any chat (e.g.,
--   profile photos)
[exclude_chat_ids] :: OptimizeStorage -> Maybe [Int]

-- | If non-empty, only files from the given chats are considered. Use 0 as
--   chat identifier to delete files not belonging to any chat (e.g.,
--   profile photos)
[chat_ids] :: OptimizeStorage -> Maybe [Int]

-- | If non-empty, only files with the given types are considered. By
--   default, all types except thumbnails, profile photos, stickers and
--   wallpapers are deleted
[file_types] :: OptimizeStorage -> Maybe [FileType]

-- | The amount of time after the creation of a file during which it can't
--   be deleted, in seconds. Pass -1 to use the default value
[immunity_delay] :: OptimizeStorage -> Maybe Int

-- | Limit on the total number of files after deletion. Pass -1 to use the
--   default limit
[count] :: OptimizeStorage -> Maybe Int

-- | Limit on the time that has passed since the last time a file was
--   accessed (or creation time for some filesystems). Pass -1 to use the
--   default limit
[ttl] :: OptimizeStorage -> Maybe Int

-- | Limit on the total size of files after deletion, in bytes. Pass -1 to
--   use the default limit
[size] :: OptimizeStorage -> Maybe Int
instance GHC.Classes.Eq TD.Query.OptimizeStorage.OptimizeStorage
instance GHC.Show.Show TD.Query.OptimizeStorage.OptimizeStorage
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.OptimizeStorage.OptimizeStorage


module TD.Query.GetRemoteFile

-- | Returns information about a file by its remote ID; this is an offline
--   request. Can be used to register a URL as a file for further
--   uploading, or sending as a message. Even the request succeeds, the
--   file can be used only if it is still accessible to the user. For
--   example, if the file is from a message, then the message must be not
--   deleted and accessible to the user. If the file database is disabled,
--   then the corresponding object with the file must be preloaded by the
--   application
data GetRemoteFile
GetRemoteFile :: Maybe FileType -> Maybe String -> GetRemoteFile

[file_type] :: GetRemoteFile -> Maybe FileType

-- | Remote identifier of the file to get @file_type File type; pass null
--   if unknown
[remote_file_id] :: GetRemoteFile -> Maybe String
instance GHC.Classes.Eq TD.Query.GetRemoteFile.GetRemoteFile
instance GHC.Show.Show TD.Query.GetRemoteFile.GetRemoteFile
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetRemoteFile.GetRemoteFile


module TD.Data.StorageStatisticsByFileType

data StorageStatisticsByFileType

-- | Contains the storage usage statistics for a specific file type
--   <tt>file_type File type </tt>size Total size of the files, in bytes
--   @count Total number of files
StorageStatisticsByFileType :: Maybe Int -> Maybe Int -> Maybe FileType -> StorageStatisticsByFileType

[count] :: StorageStatisticsByFileType -> Maybe Int

[size] :: StorageStatisticsByFileType -> Maybe Int

[file_type] :: StorageStatisticsByFileType -> Maybe FileType
instance GHC.Classes.Eq TD.Data.StorageStatisticsByFileType.StorageStatisticsByFileType
instance GHC.Show.Show TD.Data.StorageStatisticsByFileType.StorageStatisticsByFileType
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.StorageStatisticsByFileType.StorageStatisticsByFileType
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.StorageStatisticsByFileType.StorageStatisticsByFileType


module TD.Data.StorageStatisticsByChat

data StorageStatisticsByChat

-- | Contains the storage usage statistics for a specific chat <tt>chat_id
--   Chat identifier; 0 if none </tt>size Total size of the files in the
--   chat, in bytes <tt>count Total number of files in the chat
--   </tt>by_file_type Statistics split by file types
StorageStatisticsByChat :: Maybe [StorageStatisticsByFileType] -> Maybe Int -> Maybe Int -> Maybe Int -> StorageStatisticsByChat

[by_file_type] :: StorageStatisticsByChat -> Maybe [StorageStatisticsByFileType]

[count] :: StorageStatisticsByChat -> Maybe Int

[size] :: StorageStatisticsByChat -> Maybe Int

[chat_id] :: StorageStatisticsByChat -> Maybe Int
instance GHC.Classes.Eq TD.Data.StorageStatisticsByChat.StorageStatisticsByChat
instance GHC.Show.Show TD.Data.StorageStatisticsByChat.StorageStatisticsByChat
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.StorageStatisticsByChat.StorageStatisticsByChat
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.StorageStatisticsByChat.StorageStatisticsByChat


module TD.Data.StorageStatistics

data StorageStatistics

-- | Contains the exact storage usage statistics split by chats and file
--   type <tt>size Total size of files, in bytes </tt>count Total number of
--   files @by_chat Statistics split by chats
StorageStatistics :: Maybe [StorageStatisticsByChat] -> Maybe Int -> Maybe Int -> StorageStatistics

[by_chat] :: StorageStatistics -> Maybe [StorageStatisticsByChat]

[count] :: StorageStatistics -> Maybe Int

[size] :: StorageStatistics -> Maybe Int
instance GHC.Classes.Eq TD.Data.StorageStatistics.StorageStatistics
instance GHC.Show.Show TD.Data.StorageStatistics.StorageStatistics
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.StorageStatistics.StorageStatistics
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.StorageStatistics.StorageStatistics


module TD.Data.NetworkStatisticsEntry

-- | Contains statistics about network usage
data NetworkStatisticsEntry

-- | Contains information about the total amount of data that was used to
--   send and receive files
NetworkStatisticsEntryFile :: Maybe Int -> Maybe Int -> Maybe NetworkType -> Maybe FileType -> NetworkStatisticsEntry

[received_bytes] :: NetworkStatisticsEntry -> Maybe Int

-- | Total number of bytes sent @received_bytes Total number of bytes
--   received
[sent_bytes] :: NetworkStatisticsEntry -> Maybe Int

-- | Type of the network the data was sent through. Call setNetworkType to
--   maintain the actual network type
[network_type] :: NetworkStatisticsEntry -> Maybe NetworkType

-- | Type of the file the data is part of; pass null if the data isn't
--   related to files
[file_type] :: NetworkStatisticsEntry -> Maybe FileType

-- | Contains information about the total amount of data that was used for
--   calls
NetworkStatisticsEntryCall :: Maybe Float -> Maybe Int -> Maybe Int -> Maybe NetworkType -> NetworkStatisticsEntry

-- | Total call duration, in seconds
[duration] :: NetworkStatisticsEntry -> Maybe Float

[received_bytes] :: NetworkStatisticsEntry -> Maybe Int

-- | Total number of bytes sent @received_bytes Total number of bytes
--   received
[sent_bytes] :: NetworkStatisticsEntry -> Maybe Int

-- | Type of the network the data was sent through. Call setNetworkType to
--   maintain the actual network type
[network_type] :: NetworkStatisticsEntry -> Maybe NetworkType
instance GHC.Classes.Eq TD.Data.NetworkStatisticsEntry.NetworkStatisticsEntry
instance GHC.Show.Show TD.Data.NetworkStatisticsEntry.NetworkStatisticsEntry
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.NetworkStatisticsEntry.NetworkStatisticsEntry
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.NetworkStatisticsEntry.NetworkStatisticsEntry


module TD.Query.AddNetworkStatistics

-- | Adds the specified data to data usage statistics. Can be called before
--   authorization @entry The network statistics entry with the data to be
--   added to statistics
data AddNetworkStatistics
AddNetworkStatistics :: Maybe NetworkStatisticsEntry -> AddNetworkStatistics

[entry] :: AddNetworkStatistics -> Maybe NetworkStatisticsEntry
instance GHC.Classes.Eq TD.Query.AddNetworkStatistics.AddNetworkStatistics
instance GHC.Show.Show TD.Query.AddNetworkStatistics.AddNetworkStatistics
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.AddNetworkStatistics.AddNetworkStatistics


module TD.Data.NetworkStatistics

data NetworkStatistics

-- | A full list of available network statistic entries <tt>since_date
--   Point in time (Unix timestamp) from which the statistics are collected
--   </tt>entries Network statistics entries
NetworkStatistics :: Maybe [NetworkStatisticsEntry] -> Maybe Int -> NetworkStatistics

[entries] :: NetworkStatistics -> Maybe [NetworkStatisticsEntry]

[since_date] :: NetworkStatistics -> Maybe Int
instance GHC.Classes.Eq TD.Data.NetworkStatistics.NetworkStatistics
instance GHC.Show.Show TD.Data.NetworkStatistics.NetworkStatistics
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.NetworkStatistics.NetworkStatistics
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.NetworkStatistics.NetworkStatistics


module TD.Data.FilePart

data FilePart

-- | Contains a part of a file @data File bytes
FilePart :: Maybe String -> FilePart

[_data] :: FilePart -> Maybe String
instance GHC.Classes.Eq TD.Data.FilePart.FilePart
instance GHC.Show.Show TD.Data.FilePart.FilePart
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.FilePart.FilePart
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.FilePart.FilePart


module TD.Data.FileDownloadedPrefixSize

data FileDownloadedPrefixSize

-- | Contains size of downloaded prefix of a file @size The prefix size, in
--   bytes
FileDownloadedPrefixSize :: Maybe Int -> FileDownloadedPrefixSize

[size] :: FileDownloadedPrefixSize -> Maybe Int
instance GHC.Classes.Eq TD.Data.FileDownloadedPrefixSize.FileDownloadedPrefixSize
instance GHC.Show.Show TD.Data.FileDownloadedPrefixSize.FileDownloadedPrefixSize
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.FileDownloadedPrefixSize.FileDownloadedPrefixSize
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.FileDownloadedPrefixSize.FileDownloadedPrefixSize


module TD.Data.File

data File

-- | Represents a file
File :: Maybe RemoteFile -> Maybe LocalFile -> Maybe Int -> Maybe Int -> Maybe Int -> File

-- | Information about the remote copy of the file
[remote] :: File -> Maybe RemoteFile

-- | Information about the local copy of the file
[local] :: File -> Maybe LocalFile

-- | Approximate file size in bytes in case the exact file size is unknown.
--   Can be used to show download/upload progress
[expected_size] :: File -> Maybe Int

-- | File size, in bytes; 0 if unknown
[size] :: File -> Maybe Int

-- | Unique file identifier
[_id] :: File -> Maybe Int
instance GHC.Classes.Eq TD.Data.File.File
instance GHC.Show.Show TD.Data.File.File
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.File.File
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.File.File


module TD.Data.VoiceNote

data VoiceNote

-- | Describes a voice note. The voice note must be encoded with the Opus
--   codec, and stored inside an OGG container. Voice notes can have only a
--   single audio channel
VoiceNote :: Maybe File -> Maybe String -> Maybe Bool -> Maybe String -> Maybe String -> Maybe Int -> VoiceNote

[voice] :: VoiceNote -> Maybe File

-- | Recognized text of the voice note; Premium users only. Call
--   recognizeSpeech to get recognized text of the voice note @voice File
--   containing the voice note
[recognized_text] :: VoiceNote -> Maybe String

[is_recognized] :: VoiceNote -> Maybe Bool

-- | MIME type of the file; as defined by the sender @is_recognized True,
--   if speech recognition is completed; Premium users only
[mime_type] :: VoiceNote -> Maybe String

[waveform] :: VoiceNote -> Maybe String

-- | Duration of the voice note, in seconds; as defined by the sender
--   @waveform A waveform representation of the voice note in 5-bit format
[duration] :: VoiceNote -> Maybe Int
instance GHC.Classes.Eq TD.Data.VoiceNote.VoiceNote
instance GHC.Show.Show TD.Data.VoiceNote.VoiceNote
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.VoiceNote.VoiceNote
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.VoiceNote.VoiceNote


module TD.Data.Thumbnail

data Thumbnail

-- | Represents a thumbnail <tt>format Thumbnail format </tt>width
--   Thumbnail width <tt>height Thumbnail height </tt>file The thumbnail
Thumbnail :: Maybe File -> Maybe Int -> Maybe Int -> Maybe ThumbnailFormat -> Thumbnail

[file] :: Thumbnail -> Maybe File

[height] :: Thumbnail -> Maybe Int

[width] :: Thumbnail -> Maybe Int

[format] :: Thumbnail -> Maybe ThumbnailFormat
instance GHC.Classes.Eq TD.Data.Thumbnail.Thumbnail
instance GHC.Show.Show TD.Data.Thumbnail.Thumbnail
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.Thumbnail.Thumbnail
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.Thumbnail.Thumbnail


module TD.Data.VideoNote

data VideoNote

-- | Describes a video note. The video must be equal in width and height,
--   cropped to a circle, and stored in MPEG4 format @duration Duration of
--   the video, in seconds; as defined by the sender
VideoNote :: Maybe File -> Maybe Thumbnail -> Maybe Minithumbnail -> Maybe Int -> Maybe Int -> VideoNote

[video] :: VideoNote -> Maybe File

-- | Video thumbnail in JPEG format; as defined by the sender; may be null
--   @video File containing the video
[thumbnail] :: VideoNote -> Maybe Thumbnail

[minithumbnail] :: VideoNote -> Maybe Minithumbnail

-- | Video width and height; as defined by the sender @minithumbnail Video
--   minithumbnail; may be null
[_length] :: VideoNote -> Maybe Int

[duration] :: VideoNote -> Maybe Int
instance GHC.Classes.Eq TD.Data.VideoNote.VideoNote
instance GHC.Show.Show TD.Data.VideoNote.VideoNote
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.VideoNote.VideoNote
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.VideoNote.VideoNote


module TD.Data.Video

data Video

-- | Describes a video file <tt>duration Duration of the video, in seconds;
--   as defined by the sender </tt>width Video width; as defined by the
--   sender @height Video height; as defined by the sender
Video :: Maybe File -> Maybe Thumbnail -> Maybe Minithumbnail -> Maybe Bool -> Maybe Bool -> Maybe String -> Maybe String -> Maybe Int -> Maybe Int -> Maybe Int -> Video

[video] :: Video -> Maybe File

-- | Video thumbnail in JPEG or MPEG4 format; as defined by the sender; may
--   be null @video File containing the video
[thumbnail] :: Video -> Maybe Thumbnail

[minithumbnail] :: Video -> Maybe Minithumbnail

-- | True, if the video is supposed to be streamed @minithumbnail Video
--   minithumbnail; may be null
[supports_streaming] :: Video -> Maybe Bool

-- | True, if stickers were added to the video. The list of corresponding
--   sticker sets can be received using getAttachedStickerSets
[has_stickers] :: Video -> Maybe Bool

[mime_type] :: Video -> Maybe String

-- | Original name of the file; as defined by the sender @mime_type MIME
--   type of the file; as defined by the sender
[file_name] :: Video -> Maybe String

[height] :: Video -> Maybe Int

[width] :: Video -> Maybe Int

[duration] :: Video -> Maybe Int
instance GHC.Classes.Eq TD.Data.Video.Video
instance GHC.Show.Show TD.Data.Video.Video
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.Video.Video
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.Video.Video


module TD.Data.ProfilePhoto

data ProfilePhoto

-- | Describes a user profile photo @id Photo identifier; 0 for an empty
--   photo. Can be used to find a photo in a list of user profile photos
ProfilePhoto :: Maybe Bool -> Maybe Minithumbnail -> Maybe File -> Maybe File -> Maybe Int -> ProfilePhoto

-- | True, if the photo has animated variant
[has_animation] :: ProfilePhoto -> Maybe Bool

-- | User profile photo minithumbnail; may be null
[minithumbnail] :: ProfilePhoto -> Maybe Minithumbnail

-- | A big (640x640) user profile photo. The file can be downloaded only
--   before the photo is changed
[big] :: ProfilePhoto -> Maybe File

-- | A small (160x160) user profile photo. The file can be downloaded only
--   before the photo is changed
[small] :: ProfilePhoto -> Maybe File

[_id] :: ProfilePhoto -> Maybe Int
instance GHC.Classes.Eq TD.Data.ProfilePhoto.ProfilePhoto
instance GHC.Show.Show TD.Data.ProfilePhoto.ProfilePhoto
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.ProfilePhoto.ProfilePhoto
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.ProfilePhoto.ProfilePhoto


module TD.Data.User

data User

-- | Represents a user
User :: Maybe Bool -> Maybe String -> Maybe UserType -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe String -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe ProfilePhoto -> Maybe UserStatus -> Maybe String -> Maybe String -> Maybe String -> Maybe String -> Maybe Int -> User

-- | True, if the user added the current bot to attachment menu; only
--   available to bots
[added_to_attachment_menu] :: User -> Maybe Bool

-- | IETF language tag of the user's language; only available to bots
[language_code] :: User -> Maybe String

-- | Type of the user
[_type] :: User -> Maybe UserType

-- | If false, the user is inaccessible, and the only information known
--   about the user is inside this class. Identifier of the user can't be
--   passed to any method except GetUser
[have_access] :: User -> Maybe Bool

-- | True, if many users reported this user as a fake account
[is_fake] :: User -> Maybe Bool

-- | True, if many users reported this user as a scam
[is_scam] :: User -> Maybe Bool

-- | If non-empty, it contains a human-readable description of the reason
--   why access to this user must be restricted
[restriction_reason] :: User -> Maybe String

-- | True, if the user is Telegram support account
[is_support] :: User -> Maybe Bool

-- | True, if the user is a Telegram Premium user
[is_premium] :: User -> Maybe Bool

-- | True, if the user is verified
[is_verified] :: User -> Maybe Bool

-- | The user is a contact of the current user and the current user is a
--   contact of the user
[is_mutual_contact] :: User -> Maybe Bool

-- | The user is a contact of the current user
[is_contact] :: User -> Maybe Bool

-- | Profile photo of the user; may be null
[profile_photo] :: User -> Maybe ProfilePhoto

-- | Current online status of the user
[status] :: User -> Maybe UserStatus

-- | Phone number of the user
[phone_number] :: User -> Maybe String

-- | Username of the user
[username] :: User -> Maybe String

-- | Last name of the user
[last_name] :: User -> Maybe String

-- | First name of the user
[first_name] :: User -> Maybe String

-- | User identifier
[_id] :: User -> Maybe Int
instance GHC.Classes.Eq TD.Data.User.User
instance GHC.Show.Show TD.Data.User.User
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.User.User
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.User.User


module TD.Data.PhotoSize

data PhotoSize

-- | Describes an image in JPEG format @type Image type (see
--   <a>https://core.telegram.org/constructor/photoSize)</a>
PhotoSize :: Maybe [Int] -> Maybe Int -> Maybe Int -> Maybe File -> Maybe String -> PhotoSize

-- | Sizes of progressive JPEG file prefixes, which can be used to
--   preliminarily show the image; in bytes
[progressive_sizes] :: PhotoSize -> Maybe [Int]

[height] :: PhotoSize -> Maybe Int

[width] :: PhotoSize -> Maybe Int

-- | Information about the image file <tt>width Image width </tt>height
--   Image height
[photo] :: PhotoSize -> Maybe File

[_type] :: PhotoSize -> Maybe String
instance GHC.Classes.Eq TD.Data.PhotoSize.PhotoSize
instance GHC.Show.Show TD.Data.PhotoSize.PhotoSize
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.PhotoSize.PhotoSize
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.PhotoSize.PhotoSize


module TD.Data.Photo

data Photo

-- | Describes a photo @has_stickers True, if stickers were added to the
--   photo. The list of corresponding sticker sets can be received using
--   getAttachedStickerSets
Photo :: Maybe [PhotoSize] -> Maybe Minithumbnail -> Maybe Bool -> Photo

[sizes] :: Photo -> Maybe [PhotoSize]

-- | Photo minithumbnail; may be null @sizes Available variants of the
--   photo, in different sizes
[minithumbnail] :: Photo -> Maybe Minithumbnail

[has_stickers] :: Photo -> Maybe Bool
instance GHC.Classes.Eq TD.Data.Photo.Photo
instance GHC.Show.Show TD.Data.Photo.Photo
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.Photo.Photo
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.Photo.Photo


module TD.Data.PageBlockRelatedArticle

data PageBlockRelatedArticle

-- | Contains information about a related article <tt>url Related article
--   URL </tt>title Article title; may be empty @param_description Article
--   description; may be empty
PageBlockRelatedArticle :: Maybe Int -> Maybe String -> Maybe Photo -> Maybe String -> Maybe String -> Maybe String -> PageBlockRelatedArticle

[publish_date] :: PageBlockRelatedArticle -> Maybe Int

[author] :: PageBlockRelatedArticle -> Maybe String

-- | Article photo; may be null <tt>author Article author; may be empty
--   </tt>publish_date Point in time (Unix timestamp) when the article was
--   published; 0 if unknown
[photo] :: PageBlockRelatedArticle -> Maybe Photo

[description] :: PageBlockRelatedArticle -> Maybe String

[title] :: PageBlockRelatedArticle -> Maybe String

[url] :: PageBlockRelatedArticle -> Maybe String
instance GHC.Classes.Eq TD.Data.PageBlockRelatedArticle.PageBlockRelatedArticle
instance GHC.Show.Show TD.Data.PageBlockRelatedArticle.PageBlockRelatedArticle
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.PageBlockRelatedArticle.PageBlockRelatedArticle
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.PageBlockRelatedArticle.PageBlockRelatedArticle


module TD.Data.NotificationSound

data NotificationSound

-- | Describes a notification sound in MP3 format
NotificationSound :: Maybe File -> Maybe String -> Maybe String -> Maybe Int -> Maybe Int -> Maybe Int -> NotificationSound

-- | File containing the sound
[sound] :: NotificationSound -> Maybe File

-- | Arbitrary data, defined while the sound was uploaded
[_data] :: NotificationSound -> Maybe String

-- | Title of the notification sound
[title] :: NotificationSound -> Maybe String

-- | Point in time (Unix timestamp) when the sound was created
[date] :: NotificationSound -> Maybe Int

-- | Duration of the sound, in seconds
[duration] :: NotificationSound -> Maybe Int

-- | Unique identifier of the notification sound
[_id] :: NotificationSound -> Maybe Int
instance GHC.Classes.Eq TD.Data.NotificationSound.NotificationSound
instance GHC.Show.Show TD.Data.NotificationSound.NotificationSound
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.NotificationSound.NotificationSound
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.NotificationSound.NotificationSound


module TD.Data.NotificationSounds

data NotificationSounds

-- | Contains a list of notification sounds @notification_sounds A list of
--   notification sounds
NotificationSounds :: Maybe [NotificationSound] -> NotificationSounds

[notification_sounds] :: NotificationSounds -> Maybe [NotificationSound]
instance GHC.Classes.Eq TD.Data.NotificationSounds.NotificationSounds
instance GHC.Show.Show TD.Data.NotificationSounds.NotificationSounds
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.NotificationSounds.NotificationSounds
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.NotificationSounds.NotificationSounds


module TD.Data.Error

data Error

-- | An object of this type can be returned on every function call, in case
--   of an error
Error :: Maybe String -> Maybe Int -> Error

-- | Error message; subject to future changes
[message] :: Error -> Maybe String

-- | Error code; subject to future changes. If the error code is 406, the
--   error message must not be processed in any way and must not be
--   displayed to the user
[code] :: Error -> Maybe Int
instance GHC.Classes.Eq TD.Data.Error.Error
instance GHC.Show.Show TD.Data.Error.Error
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.Error.Error
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.Error.Error


module TD.Query.TestReturnError

-- | Returns the specified error and ensures that the Error object is used;
--   for testing only. Can be called synchronously @error The error to be
--   returned
data TestReturnError
TestReturnError :: Maybe Error -> TestReturnError

[_error] :: TestReturnError -> Maybe Error
instance GHC.Classes.Eq TD.Query.TestReturnError.TestReturnError
instance GHC.Show.Show TD.Query.TestReturnError.TestReturnError
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.TestReturnError.TestReturnError


module TD.Query.FinishFileGeneration

-- | Finishes the file generation
data FinishFileGeneration
FinishFileGeneration :: Maybe Error -> Maybe Int -> FinishFileGeneration

-- | If passed, the file generation has failed and must be terminated; pass
--   null if the file generation succeeded
[_error] :: FinishFileGeneration -> Maybe Error

-- | The identifier of the generation process
[generation_id] :: FinishFileGeneration -> Maybe Int
instance GHC.Classes.Eq TD.Query.FinishFileGeneration.FinishFileGeneration
instance GHC.Show.Show TD.Query.FinishFileGeneration.FinishFileGeneration
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.FinishFileGeneration.FinishFileGeneration


module TD.Data.EncryptedCredentials

data EncryptedCredentials

-- | Contains encrypted Telegram Passport data credentials <tt>data The
--   encrypted credentials </tt>hash The decrypted data hash @secret Secret
--   for data decryption, encrypted with the service's public key
EncryptedCredentials :: Maybe String -> Maybe String -> Maybe String -> EncryptedCredentials

[secret] :: EncryptedCredentials -> Maybe String

[hash] :: EncryptedCredentials -> Maybe String

[_data] :: EncryptedCredentials -> Maybe String
instance GHC.Classes.Eq TD.Data.EncryptedCredentials.EncryptedCredentials
instance GHC.Show.Show TD.Data.EncryptedCredentials.EncryptedCredentials
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.EncryptedCredentials.EncryptedCredentials
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.EncryptedCredentials.EncryptedCredentials


module TD.Data.Emojis

data Emojis

-- | Represents a list of emoji @emojis List of emojis
Emojis :: Maybe [String] -> Emojis

[emojis] :: Emojis -> Maybe [String]
instance GHC.Classes.Eq TD.Data.Emojis.Emojis
instance GHC.Show.Show TD.Data.Emojis.Emojis
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.Emojis.Emojis
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.Emojis.Emojis


module TD.Data.EmailAddressAuthenticationCodeInfo

data EmailAddressAuthenticationCodeInfo

-- | Information about the email address authentication code that was sent
--   <tt>email_address_pattern Pattern of the email address to which an
--   authentication code was sent </tt>length Length of the code; 0 if
--   unknown
EmailAddressAuthenticationCodeInfo :: Maybe Int -> Maybe String -> EmailAddressAuthenticationCodeInfo

[_length] :: EmailAddressAuthenticationCodeInfo -> Maybe Int

[email_address_pattern] :: EmailAddressAuthenticationCodeInfo -> Maybe String
instance GHC.Classes.Eq TD.Data.EmailAddressAuthenticationCodeInfo.EmailAddressAuthenticationCodeInfo
instance GHC.Show.Show TD.Data.EmailAddressAuthenticationCodeInfo.EmailAddressAuthenticationCodeInfo
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.EmailAddressAuthenticationCodeInfo.EmailAddressAuthenticationCodeInfo
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.EmailAddressAuthenticationCodeInfo.EmailAddressAuthenticationCodeInfo


module TD.Data.PasswordState

data PasswordState

-- | Represents the current state of 2-step verification <tt>has_password
--   True, if a 2-step verification password is set </tt>password_hint Hint
--   for the password; may be empty
PasswordState :: Maybe Int -> Maybe EmailAddressAuthenticationCodeInfo -> Maybe Bool -> Maybe Bool -> Maybe String -> Maybe Bool -> PasswordState

-- | If not 0, point in time (Unix timestamp) after which the password can
--   be reset immediately using resetPassword
[pending_reset_date] :: PasswordState -> Maybe Int

-- | Information about the recovery email address to which the confirmation
--   email was sent; may be null
[recovery_email_address_code_info] :: PasswordState -> Maybe EmailAddressAuthenticationCodeInfo

[has_passport_data] :: PasswordState -> Maybe Bool

-- | True, if a recovery email is set @has_passport_data True, if some
--   Telegram Passport elements were saved
[has_recovery_email_address] :: PasswordState -> Maybe Bool

[password_hint] :: PasswordState -> Maybe String

[has_password] :: PasswordState -> Maybe Bool
instance GHC.Classes.Eq TD.Data.PasswordState.PasswordState
instance GHC.Show.Show TD.Data.PasswordState.PasswordState
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.PasswordState.PasswordState
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.PasswordState.PasswordState


module TD.Data.DownloadedFileCounts

data DownloadedFileCounts

-- | Contains number of being downloaded and recently downloaded files
--   found
DownloadedFileCounts :: Maybe Int -> Maybe Int -> Maybe Int -> DownloadedFileCounts

-- | Number of completed file downloads found
[completed_count] :: DownloadedFileCounts -> Maybe Int

-- | Number of paused file downloads found
[paused_count] :: DownloadedFileCounts -> Maybe Int

-- | Number of active file downloads found, including paused
[active_count] :: DownloadedFileCounts -> Maybe Int
instance GHC.Classes.Eq TD.Data.DownloadedFileCounts.DownloadedFileCounts
instance GHC.Show.Show TD.Data.DownloadedFileCounts.DownloadedFileCounts
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.DownloadedFileCounts.DownloadedFileCounts
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.DownloadedFileCounts.DownloadedFileCounts


module TD.Data.Document

data Document

-- | Describes a document of any type <tt>file_name Original name of the
--   file; as defined by the sender </tt>mime_type MIME type of the file;
--   as defined by the sender
Document :: Maybe File -> Maybe Thumbnail -> Maybe Minithumbnail -> Maybe String -> Maybe String -> Document

[document] :: Document -> Maybe File

[thumbnail] :: Document -> Maybe Thumbnail

-- | Document minithumbnail; may be null <tt>thumbnail Document thumbnail
--   in JPEG or PNG format (PNG will be used only for background patterns);
--   as defined by the sender; may be null </tt>document File containing
--   the document
[minithumbnail] :: Document -> Maybe Minithumbnail

[mime_type] :: Document -> Maybe String

[file_name] :: Document -> Maybe String
instance GHC.Classes.Eq TD.Data.Document.Document
instance GHC.Show.Show TD.Data.Document.Document
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.Document.Document
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.Document.Document


module TD.Data.RichText

-- | Describes a text object inside an instant-view web page
data RichText

-- | A plain text @text Text
RichTextPlain :: Maybe String -> RichText

[text] :: RichText -> Maybe String

-- | A bold rich text @text Text
RichTextBold :: Maybe RichText -> RichText

[_text] :: RichText -> Maybe RichText

-- | An italicized rich text @text Text
RichTextItalic :: Maybe RichText -> RichText

[_text] :: RichText -> Maybe RichText

-- | An underlined rich text @text Text
RichTextUnderline :: Maybe RichText -> RichText

[_text] :: RichText -> Maybe RichText

-- | A strikethrough rich text @text Text
RichTextStrikethrough :: Maybe RichText -> RichText

[_text] :: RichText -> Maybe RichText

-- | A fixed-width rich text @text Text
RichTextFixed :: Maybe RichText -> RichText

[_text] :: RichText -> Maybe RichText

-- | A rich text URL link <tt>text Text </tt>url URL @is_cached True, if
--   the URL has cached instant view server-side
RichTextUrl :: Maybe Bool -> Maybe String -> Maybe RichText -> RichText

[is_cached] :: RichText -> Maybe Bool

[url] :: RichText -> Maybe String

[_text] :: RichText -> Maybe RichText

-- | A rich text email link <tt>text Text </tt>email_address Email address
RichTextEmailAddress :: Maybe String -> Maybe RichText -> RichText

[email_address] :: RichText -> Maybe String

[_text] :: RichText -> Maybe RichText

-- | A subscript rich text @text Text
RichTextSubscript :: Maybe RichText -> RichText

[_text] :: RichText -> Maybe RichText

-- | A superscript rich text @text Text
RichTextSuperscript :: Maybe RichText -> RichText

[_text] :: RichText -> Maybe RichText

-- | A marked rich text @text Text
RichTextMarked :: Maybe RichText -> RichText

[_text] :: RichText -> Maybe RichText

-- | A rich text phone number <tt>text Text </tt>phone_number Phone number
RichTextPhoneNumber :: Maybe String -> Maybe RichText -> RichText

[phone_number] :: RichText -> Maybe String

[_text] :: RichText -> Maybe RichText

-- | A small image inside the text @document The image represented as a
--   document. The image can be in GIF, JPEG or PNG format
RichTextIcon :: Maybe Int -> Maybe Int -> Maybe Document -> RichText

-- | Height of a bounding box in which the image must be shown; 0 if
--   unknown
[height] :: RichText -> Maybe Int

-- | Width of a bounding box in which the image must be shown; 0 if unknown
[width] :: RichText -> Maybe Int

[document] :: RichText -> Maybe Document

-- | A reference to a richTexts object on the same web page <tt>text The
--   text </tt>anchor_name The name of a richTextAnchor object, which is
--   the first element of the target richTexts object @url An HTTP URL,
--   opening the reference
RichTextReference :: Maybe String -> Maybe String -> Maybe RichText -> RichText

[url] :: RichText -> Maybe String

[anchor_name] :: RichText -> Maybe String

[_text] :: RichText -> Maybe RichText

-- | An anchor @name Anchor name
RichTextAnchor :: Maybe String -> RichText

[name] :: RichText -> Maybe String

-- | A link to an anchor on the same web page <tt>text The link text
--   </tt>anchor_name The anchor name. If the name is empty, the link must
--   bring back to top @url An HTTP URL, opening the anchor
RichTextAnchorLink :: Maybe String -> Maybe String -> Maybe RichText -> RichText

[url] :: RichText -> Maybe String

[anchor_name] :: RichText -> Maybe String

[_text] :: RichText -> Maybe RichText

-- | A concatenation of rich texts @texts Texts
RichTexts :: Maybe [RichText] -> RichText

[texts] :: RichText -> Maybe [RichText]
instance GHC.Classes.Eq TD.Data.RichText.RichText
instance GHC.Show.Show TD.Data.RichText.RichText
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.RichText.RichText
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.RichText.RichText


module TD.Data.PageBlockTableCell

data PageBlockTableCell

-- | Represents a cell of a table <tt>text Cell text; may be null. If the
--   text is null, then the cell must be invisible </tt>is_header True, if
--   it is a header cell
PageBlockTableCell :: Maybe PageBlockVerticalAlignment -> Maybe PageBlockHorizontalAlignment -> Maybe Int -> Maybe Int -> Maybe Bool -> Maybe RichText -> PageBlockTableCell

[valign] :: PageBlockTableCell -> Maybe PageBlockVerticalAlignment

-- | Horizontal cell content alignment @valign Vertical cell content
--   alignment
[align] :: PageBlockTableCell -> Maybe PageBlockHorizontalAlignment

[rowspan] :: PageBlockTableCell -> Maybe Int

-- | The number of columns the cell spans @rowspan The number of rows the
--   cell spans
[colspan] :: PageBlockTableCell -> Maybe Int

[is_header] :: PageBlockTableCell -> Maybe Bool

[text] :: PageBlockTableCell -> Maybe RichText
instance GHC.Classes.Eq TD.Data.PageBlockTableCell.PageBlockTableCell
instance GHC.Show.Show TD.Data.PageBlockTableCell.PageBlockTableCell
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.PageBlockTableCell.PageBlockTableCell
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.PageBlockTableCell.PageBlockTableCell


module TD.Data.PageBlockCaption

data PageBlockCaption

-- | Contains a caption of an instant view web page block, consisting of a
--   text and a trailing credit <tt>text Content of the caption </tt>credit
--   Block credit (like HTML tag <a>cite</a>)
PageBlockCaption :: Maybe RichText -> Maybe RichText -> PageBlockCaption

[credit] :: PageBlockCaption -> Maybe RichText

[text] :: PageBlockCaption -> Maybe RichText
instance GHC.Classes.Eq TD.Data.PageBlockCaption.PageBlockCaption
instance GHC.Show.Show TD.Data.PageBlockCaption.PageBlockCaption
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.PageBlockCaption.PageBlockCaption
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.PageBlockCaption.PageBlockCaption


module TD.Data.DeviceToken

-- | Represents a data needed to subscribe for push notifications through
--   registerDevice method. To use specific push notification service, the
--   correct application platform must be specified and a valid server
--   authentication data must be uploaded at <a>https://my.telegram.org</a>
data DeviceToken

-- | A token for Firebase Cloud Messaging <tt>token Device registration
--   token; may be empty to deregister a device </tt>encrypt True, if push
--   notifications must be additionally encrypted
DeviceTokenFirebaseCloudMessaging :: Maybe Bool -> Maybe String -> DeviceToken

[encrypt] :: DeviceToken -> Maybe Bool

[token] :: DeviceToken -> Maybe String

-- | A token for Apple Push Notification service <tt>device_token Device
--   token; may be empty to deregister a device </tt>is_app_sandbox True,
--   if App Sandbox is enabled
DeviceTokenApplePush :: Maybe Bool -> Maybe String -> DeviceToken

[is_app_sandbox] :: DeviceToken -> Maybe Bool

[device_token] :: DeviceToken -> Maybe String

-- | A token for Apple Push Notification service VoIP notifications
--   <tt>device_token Device token; may be empty to deregister a device
--   </tt>is_app_sandbox True, if App Sandbox is enabled @encrypt True, if
--   push notifications must be additionally encrypted
DeviceTokenApplePushVoIP :: Maybe Bool -> Maybe Bool -> Maybe String -> DeviceToken

[encrypt] :: DeviceToken -> Maybe Bool

[is_app_sandbox] :: DeviceToken -> Maybe Bool

[device_token] :: DeviceToken -> Maybe String

-- | A token for Windows Push Notification Services @access_token The
--   access token that will be used to send notifications; may be empty to
--   deregister a device
DeviceTokenWindowsPush :: Maybe String -> DeviceToken

[access_token] :: DeviceToken -> Maybe String

-- | A token for Microsoft Push Notification Service @channel_uri Push
--   notification channel URI; may be empty to deregister a device
DeviceTokenMicrosoftPush :: Maybe String -> DeviceToken

[channel_uri] :: DeviceToken -> Maybe String

-- | A token for Microsoft Push Notification Service VoIP channel
--   @channel_uri Push notification channel URI; may be empty to deregister
--   a device
DeviceTokenMicrosoftPushVoIP :: Maybe String -> DeviceToken

[channel_uri] :: DeviceToken -> Maybe String

-- | A token for web Push API @endpoint Absolute URL exposed by the push
--   service where the application server can send push messages; may be
--   empty to deregister a device
DeviceTokenWebPush :: Maybe String -> Maybe String -> Maybe String -> DeviceToken

[auth_base64url] :: DeviceToken -> Maybe String

-- | Base64url-encoded P-256 elliptic curve Diffie-Hellman public key
--   @auth_base64url Base64url-encoded authentication secret
[p256dh_base64url] :: DeviceToken -> Maybe String

[endpoint] :: DeviceToken -> Maybe String

-- | A token for Simple Push API for Firefox OS @endpoint Absolute URL
--   exposed by the push service where the application server can send push
--   messages; may be empty to deregister a device
DeviceTokenSimplePush :: Maybe String -> DeviceToken

[endpoint] :: DeviceToken -> Maybe String

-- | A token for Ubuntu Push Client service @token Token; may be empty to
--   deregister a device
DeviceTokenUbuntuPush :: Maybe String -> DeviceToken

[token] :: DeviceToken -> Maybe String

-- | A token for BlackBerry Push Service @token Token; may be empty to
--   deregister a device
DeviceTokenBlackBerryPush :: Maybe String -> DeviceToken

[token] :: DeviceToken -> Maybe String

-- | A token for Tizen Push Service @reg_id Push service registration
--   identifier; may be empty to deregister a device
DeviceTokenTizenPush :: Maybe String -> DeviceToken

[reg_id] :: DeviceToken -> Maybe String
instance GHC.Classes.Eq TD.Data.DeviceToken.DeviceToken
instance GHC.Show.Show TD.Data.DeviceToken.DeviceToken
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.DeviceToken.DeviceToken
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.DeviceToken.DeviceToken


module TD.Query.RegisterDevice

-- | Registers the currently used device for receiving push notifications.
--   Returns a globally unique identifier of the push notification
--   subscription <tt>device_token Device token </tt>other_user_ids List of
--   user identifiers of other users currently using the application
data RegisterDevice
RegisterDevice :: Maybe [Int] -> Maybe DeviceToken -> RegisterDevice

[other_user_ids] :: RegisterDevice -> Maybe [Int]

[device_token] :: RegisterDevice -> Maybe DeviceToken
instance GHC.Classes.Eq TD.Query.RegisterDevice.RegisterDevice
instance GHC.Show.Show TD.Query.RegisterDevice.RegisterDevice
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.RegisterDevice.RegisterDevice


module TD.Data.DeepLinkInfo

data DeepLinkInfo

-- | Contains information about a tg: deep link <tt>text Text to be shown
--   to the user </tt>need_update_application True, if the user must be
--   asked to update the application
DeepLinkInfo :: Maybe Bool -> Maybe FormattedText -> DeepLinkInfo

[need_update_application] :: DeepLinkInfo -> Maybe Bool

[text] :: DeepLinkInfo -> Maybe FormattedText
instance GHC.Classes.Eq TD.Data.DeepLinkInfo.DeepLinkInfo
instance GHC.Show.Show TD.Data.DeepLinkInfo.DeepLinkInfo
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.DeepLinkInfo.DeepLinkInfo
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.DeepLinkInfo.DeepLinkInfo


module TD.Data.DatedFile

data DatedFile

-- | File with the date it was uploaded <tt>file The file </tt>date Point
--   in time (Unix timestamp) when the file was uploaded
DatedFile :: Maybe Int -> Maybe File -> DatedFile

[date] :: DatedFile -> Maybe Int

[file] :: DatedFile -> Maybe File
instance GHC.Classes.Eq TD.Data.DatedFile.DatedFile
instance GHC.Show.Show TD.Data.DatedFile.DatedFile
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.DatedFile.DatedFile
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.DatedFile.DatedFile


module TD.Data.PersonalDocument

data PersonalDocument

-- | A personal document, containing some information about a user
--   <tt>files List of files containing the pages of the document
--   </tt>translation List of files containing a certified English
--   translation of the document
PersonalDocument :: Maybe [DatedFile] -> Maybe [DatedFile] -> PersonalDocument

[translation] :: PersonalDocument -> Maybe [DatedFile]

[files] :: PersonalDocument -> Maybe [DatedFile]
instance GHC.Classes.Eq TD.Data.PersonalDocument.PersonalDocument
instance GHC.Show.Show TD.Data.PersonalDocument.PersonalDocument
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.PersonalDocument.PersonalDocument
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.PersonalDocument.PersonalDocument


module TD.Data.EncryptedPassportElement

data EncryptedPassportElement

-- | Contains information about an encrypted Telegram Passport element; for
--   bots only <tt>type Type of Telegram Passport element </tt>data
--   Encrypted JSON-encoded data about the user <tt>front_side The front
--   side of an identity document </tt>reverse_side The reverse side of an
--   identity document; may be null <tt>selfie Selfie with the document;
--   may be null </tt>translation List of files containing a certified
--   English translation of the document <tt>files List of attached files
--   </tt>value Unencrypted data, phone number or email address @hash Hash
--   of the entire element
EncryptedPassportElement :: Maybe String -> Maybe String -> Maybe [DatedFile] -> Maybe [DatedFile] -> Maybe DatedFile -> Maybe DatedFile -> Maybe DatedFile -> Maybe String -> Maybe PassportElementType -> EncryptedPassportElement

[hash] :: EncryptedPassportElement -> Maybe String

[value] :: EncryptedPassportElement -> Maybe String

[files] :: EncryptedPassportElement -> Maybe [DatedFile]

[translation] :: EncryptedPassportElement -> Maybe [DatedFile]

[selfie] :: EncryptedPassportElement -> Maybe DatedFile

[reverse_side] :: EncryptedPassportElement -> Maybe DatedFile

[front_side] :: EncryptedPassportElement -> Maybe DatedFile

[_data] :: EncryptedPassportElement -> Maybe String

[_type] :: EncryptedPassportElement -> Maybe PassportElementType
instance GHC.Classes.Eq TD.Data.EncryptedPassportElement.EncryptedPassportElement
instance GHC.Show.Show TD.Data.EncryptedPassportElement.EncryptedPassportElement
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.EncryptedPassportElement.EncryptedPassportElement
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.EncryptedPassportElement.EncryptedPassportElement


module TD.Data.DateRange

data DateRange

-- | Represents a date range <tt>start_date Point in time (Unix timestamp)
--   at which the date range begins </tt>end_date Point in time (Unix
--   timestamp) at which the date range ends
DateRange :: Maybe Int -> Maybe Int -> DateRange

[end_date] :: DateRange -> Maybe Int

[start_date] :: DateRange -> Maybe Int
instance GHC.Classes.Eq TD.Data.DateRange.DateRange
instance GHC.Show.Show TD.Data.DateRange.DateRange
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.DateRange.DateRange
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.DateRange.DateRange


module TD.Data.Date

data Date

-- | Represents a date according to the Gregorian calendar <tt>day Day of
--   the month; 1-31 </tt>month Month; 1-12 @year Year; 1-9999
Date :: Maybe Int -> Maybe Int -> Maybe Int -> Date

[year] :: Date -> Maybe Int

[month] :: Date -> Maybe Int

[day] :: Date -> Maybe Int
instance GHC.Classes.Eq TD.Data.Date.Date
instance GHC.Show.Show TD.Data.Date.Date
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.Date.Date
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.Date.Date


module TD.Data.PersonalDetails

data PersonalDetails

-- | Contains the user's personal details
PersonalDetails :: Maybe String -> Maybe String -> Maybe String -> Maybe Date -> Maybe String -> Maybe String -> Maybe String -> Maybe String -> Maybe String -> Maybe String -> PersonalDetails

[residence_country_code] :: PersonalDetails -> Maybe String

[country_code] :: PersonalDetails -> Maybe String

[gender] :: PersonalDetails -> Maybe String

-- | Birthdate of the user <tt>gender Gender of the user, "male" or
--   "female" </tt>country_code A two-letter ISO 3166-1 alpha-2 country
--   code of the user's country @residence_country_code A two-letter ISO
--   3166-1 alpha-2 country code of the user's residence country
[birthdate] :: PersonalDetails -> Maybe Date

[native_last_name] :: PersonalDetails -> Maybe String

[native_middle_name] :: PersonalDetails -> Maybe String

-- | Native first name of the user; 1-255 characters <tt>native_middle_name
--   Native middle name of the user; 0-255 characters </tt>native_last_name
--   Native last name of the user; 1-255 characters
[native_first_name] :: PersonalDetails -> Maybe String

[last_name] :: PersonalDetails -> Maybe String

[middle_name] :: PersonalDetails -> Maybe String

-- | First name of the user written in English; 1-255 characters
--   <tt>middle_name Middle name of the user written in English; 0-255
--   characters </tt>last_name Last name of the user written in English;
--   1-255 characters
[first_name] :: PersonalDetails -> Maybe String
instance GHC.Classes.Eq TD.Data.PersonalDetails.PersonalDetails
instance GHC.Show.Show TD.Data.PersonalDetails.PersonalDetails
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.PersonalDetails.PersonalDetails
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.PersonalDetails.PersonalDetails


module TD.Data.InputIdentityDocument

data InputIdentityDocument

-- | An identity document to be saved to Telegram Passport <tt>number
--   Document number; 1-24 characters </tt>expiry_date Document expiry
--   date; pass null if not applicable @front_side Front side of the
--   document
InputIdentityDocument :: Maybe [InputFile] -> Maybe InputFile -> Maybe InputFile -> Maybe InputFile -> Maybe Date -> Maybe String -> InputIdentityDocument

[translation] :: InputIdentityDocument -> Maybe [InputFile]

[selfie] :: InputIdentityDocument -> Maybe InputFile

-- | Reverse side of the document; only for driver license and identity
--   card; pass null otherwise <tt>selfie Selfie with the document; pass
--   null if unavailable </tt>translation List of files containing a
--   certified English translation of the document
[reverse_side] :: InputIdentityDocument -> Maybe InputFile

[front_side] :: InputIdentityDocument -> Maybe InputFile

[expiry_date] :: InputIdentityDocument -> Maybe Date

[number] :: InputIdentityDocument -> Maybe String
instance GHC.Classes.Eq TD.Data.InputIdentityDocument.InputIdentityDocument
instance GHC.Show.Show TD.Data.InputIdentityDocument.InputIdentityDocument
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.InputIdentityDocument.InputIdentityDocument
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.InputIdentityDocument.InputIdentityDocument


module TD.Data.IdentityDocument

data IdentityDocument

-- | An identity document <tt>number Document number; 1-24 characters
--   </tt>expiry_date Document expiry date; may be null if not applicable
--   @front_side Front side of the document
IdentityDocument :: Maybe [DatedFile] -> Maybe DatedFile -> Maybe DatedFile -> Maybe DatedFile -> Maybe Date -> Maybe String -> IdentityDocument

[translation] :: IdentityDocument -> Maybe [DatedFile]

[selfie] :: IdentityDocument -> Maybe DatedFile

-- | Reverse side of the document; only for driver license and identity
--   card; may be null <tt>selfie Selfie with the document; may be null
--   </tt>translation List of files containing a certified English
--   translation of the document
[reverse_side] :: IdentityDocument -> Maybe DatedFile

[front_side] :: IdentityDocument -> Maybe DatedFile

[expiry_date] :: IdentityDocument -> Maybe Date

[number] :: IdentityDocument -> Maybe String
instance GHC.Classes.Eq TD.Data.IdentityDocument.IdentityDocument
instance GHC.Show.Show TD.Data.IdentityDocument.IdentityDocument
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.IdentityDocument.IdentityDocument
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.IdentityDocument.IdentityDocument


module TD.Data.DatabaseStatistics

data DatabaseStatistics

-- | Contains database statistics
DatabaseStatistics :: Maybe String -> DatabaseStatistics

-- | Database statistics in an unspecified human-readable format
[statistics] :: DatabaseStatistics -> Maybe String
instance GHC.Classes.Eq TD.Data.DatabaseStatistics.DatabaseStatistics
instance GHC.Show.Show TD.Data.DatabaseStatistics.DatabaseStatistics
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.DatabaseStatistics.DatabaseStatistics
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.DatabaseStatistics.DatabaseStatistics


module TD.Data.CustomRequestResult

data CustomRequestResult

-- | Contains the result of a custom request @result A JSON-serialized
--   result
CustomRequestResult :: Maybe String -> CustomRequestResult

[result] :: CustomRequestResult -> Maybe String
instance GHC.Classes.Eq TD.Data.CustomRequestResult.CustomRequestResult
instance GHC.Show.Show TD.Data.CustomRequestResult.CustomRequestResult
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.CustomRequestResult.CustomRequestResult
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.CustomRequestResult.CustomRequestResult


module TD.Data.CountryInfo

data CountryInfo

-- | Contains information about a country
CountryInfo :: Maybe [String] -> Maybe Bool -> Maybe String -> Maybe String -> Maybe String -> CountryInfo

-- | List of country calling codes
[calling_codes] :: CountryInfo -> Maybe [String]

-- | True, if the country must be hidden from the list of all countries
[is_hidden] :: CountryInfo -> Maybe Bool

-- | English name of the country
[english_name] :: CountryInfo -> Maybe String

-- | Native name of the country
[name] :: CountryInfo -> Maybe String

-- | A two-letter ISO 3166-1 alpha-2 country code
[country_code] :: CountryInfo -> Maybe String
instance GHC.Classes.Eq TD.Data.CountryInfo.CountryInfo
instance GHC.Show.Show TD.Data.CountryInfo.CountryInfo
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.CountryInfo.CountryInfo
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.CountryInfo.CountryInfo


module TD.Data.PhoneNumberInfo

data PhoneNumberInfo

-- | Contains information about a phone number
PhoneNumberInfo :: Maybe String -> Maybe String -> Maybe CountryInfo -> PhoneNumberInfo

-- | The phone number without country calling code formatted accordingly to
--   local rules. Expected digits are returned as <a>-</a>, but even more
--   digits might be entered by the user
[formatted_phone_number] :: PhoneNumberInfo -> Maybe String

-- | The part of the phone number denoting country calling code or its part
[country_calling_code] :: PhoneNumberInfo -> Maybe String

-- | Information about the country to which the phone number belongs; may
--   be null
[country] :: PhoneNumberInfo -> Maybe CountryInfo
instance GHC.Classes.Eq TD.Data.PhoneNumberInfo.PhoneNumberInfo
instance GHC.Show.Show TD.Data.PhoneNumberInfo.PhoneNumberInfo
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.PhoneNumberInfo.PhoneNumberInfo
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.PhoneNumberInfo.PhoneNumberInfo


module TD.Data.Countries

data Countries

-- | Contains information about countries @countries The list of countries
Countries :: Maybe [CountryInfo] -> Countries

[countries] :: Countries -> Maybe [CountryInfo]
instance GHC.Classes.Eq TD.Data.Countries.Countries
instance GHC.Show.Show TD.Data.Countries.Countries
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.Countries.Countries
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.Countries.Countries


module TD.Data.Count

data Count

-- | Contains a counter @count Count
Count :: Maybe Int -> Count

[count] :: Count -> Maybe Int
instance GHC.Classes.Eq TD.Data.Count.Count
instance GHC.Show.Show TD.Data.Count.Count
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.Count.Count
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.Count.Count


module TD.Data.Contact

data Contact

-- | Describes a user contact <tt>phone_number Phone number of the user
--   </tt>first_name First name of the user; 1-255 characters in length
--   <tt>last_name Last name of the user </tt>vcard Additional data about
--   the user in a form of vCard; 0-2048 bytes in length @user_id
--   Identifier of the user, if known; otherwise 0
Contact :: Maybe Int -> Maybe String -> Maybe String -> Maybe String -> Maybe String -> Contact

[user_id] :: Contact -> Maybe Int

[vcard] :: Contact -> Maybe String

[last_name] :: Contact -> Maybe String

[first_name] :: Contact -> Maybe String

[phone_number] :: Contact -> Maybe String
instance GHC.Classes.Eq TD.Data.Contact.Contact
instance GHC.Show.Show TD.Data.Contact.Contact
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.Contact.Contact
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.Contact.Contact


module TD.Query.ImportContacts

-- | Adds new contacts or edits existing contacts by their phone numbers;
--   contacts' user identifiers are ignored @contacts The list of contacts
--   to import or edit; contacts' vCard are ignored and are not imported
data ImportContacts
ImportContacts :: Maybe [Contact] -> ImportContacts

[contacts] :: ImportContacts -> Maybe [Contact]
instance GHC.Classes.Eq TD.Query.ImportContacts.ImportContacts
instance GHC.Show.Show TD.Query.ImportContacts.ImportContacts
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ImportContacts.ImportContacts


module TD.Query.ChangeImportedContacts

-- | Changes imported contacts using the list of contacts saved on the
--   device. Imports newly added contacts and, if at least the file
--   database is enabled, deletes recently deleted contacts. Query result
--   depends on the result of the previous query, so only one query is
--   possible at the same time @contacts The new list of contacts,
--   contact's vCard are ignored and are not imported
data ChangeImportedContacts
ChangeImportedContacts :: Maybe [Contact] -> ChangeImportedContacts

[contacts] :: ChangeImportedContacts -> Maybe [Contact]
instance GHC.Classes.Eq TD.Query.ChangeImportedContacts.ChangeImportedContacts
instance GHC.Show.Show TD.Query.ChangeImportedContacts.ChangeImportedContacts
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ChangeImportedContacts.ChangeImportedContacts


module TD.Query.AddContact

-- | Adds a user to the contact list or edits an existing contact by their
--   user identifier @contact The contact to add or edit; phone number may
--   be empty and needs to be specified only if known, vCard is ignored
data AddContact
AddContact :: Maybe Bool -> Maybe Contact -> AddContact

-- | Pass true to share the current user's phone number with the new
--   contact. A corresponding rule to userPrivacySettingShowPhoneNumber
--   will be added if needed. Use the field
--   userFullInfo.need_phone_number_privacy_exception to check whether the
--   current user needs to be asked to share their phone number
[share_phone_number] :: AddContact -> Maybe Bool

[contact] :: AddContact -> Maybe Contact
instance GHC.Classes.Eq TD.Query.AddContact.AddContact
instance GHC.Show.Show TD.Query.AddContact.AddContact
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.AddContact.AddContact


module TD.Data.InputMessageContent

-- | The content of a message to send
data InputMessageContent

-- | A text message @text Formatted text to be sent;
--   1-GetOption("message_text_length_max") characters. Only Bold, Italic,
--   Underline, Strikethrough, Spoiler, Code, Pre, PreCode, TextUrl and
--   MentionName entities are allowed to be specified manually
InputMessageText :: Maybe Bool -> Maybe Bool -> Maybe FormattedText -> InputMessageContent

[clear_draft] :: InputMessageContent -> Maybe Bool

-- | True, if rich web page previews for URLs in the message text must be
--   disabled @clear_draft True, if a chat message draft must be deleted
[disable_web_page_preview] :: InputMessageContent -> Maybe Bool

[text] :: InputMessageContent -> Maybe FormattedText

-- | An animation message (GIF-style). <tt>animation Animation file to be
--   sent </tt>thumbnail Animation thumbnail; pass null to skip thumbnail
--   uploading @added_sticker_file_ids File identifiers of the stickers
--   added to the animation, if applicable
InputMessageAnimation :: Maybe FormattedText -> Maybe Int -> Maybe Int -> Maybe Int -> Maybe [Int] -> Maybe InputThumbnail -> Maybe InputFile -> InputMessageContent

[caption] :: InputMessageContent -> Maybe FormattedText

[height] :: InputMessageContent -> Maybe Int

[width] :: InputMessageContent -> Maybe Int

-- | Duration of the animation, in seconds <tt>width Width of the
--   animation; may be replaced by the server </tt>height Height of the
--   animation; may be replaced by the server @caption Animation caption;
--   pass null to use an empty caption;
--   0-GetOption("message_caption_length_max") characters
[duration] :: InputMessageContent -> Maybe Int

[added_sticker_file_ids] :: InputMessageContent -> Maybe [Int]

[thumbnail] :: InputMessageContent -> Maybe InputThumbnail

[animation] :: InputMessageContent -> Maybe InputFile

-- | An audio message <tt>audio Audio file to be sent
--   </tt>album_cover_thumbnail Thumbnail of the cover for the album; pass
--   null to skip thumbnail uploading <tt>duration Duration of the audio,
--   in seconds; may be replaced by the server </tt>title Title of the
--   audio; 0-64 characters; may be replaced by the server
InputMessageAudio :: Maybe FormattedText -> Maybe String -> Maybe String -> Maybe Int -> Maybe InputThumbnail -> Maybe InputFile -> InputMessageContent

[caption] :: InputMessageContent -> Maybe FormattedText

-- | Performer of the audio; 0-64 characters, may be replaced by the server
--   @caption Audio caption; pass null to use an empty caption;
--   0-GetOption("message_caption_length_max") characters
[performer] :: InputMessageContent -> Maybe String

[title] :: InputMessageContent -> Maybe String

-- | Duration of the animation, in seconds <tt>width Width of the
--   animation; may be replaced by the server </tt>height Height of the
--   animation; may be replaced by the server @caption Animation caption;
--   pass null to use an empty caption;
--   0-GetOption("message_caption_length_max") characters
[duration] :: InputMessageContent -> Maybe Int

[album_cover_thumbnail] :: InputMessageContent -> Maybe InputThumbnail

[audio] :: InputMessageContent -> Maybe InputFile

-- | A document message (general file) <tt>document Document to be sent
--   </tt>thumbnail Document thumbnail; pass null to skip thumbnail
--   uploading <tt>disable_content_type_detection If true, automatic file
--   type detection will be disabled and the document will be always sent
--   as file. Always true for files sent to secret chats </tt>caption
--   Document caption; pass null to use an empty caption;
--   0-GetOption("message_caption_length_max") characters
InputMessageDocument :: Maybe FormattedText -> Maybe Bool -> Maybe InputThumbnail -> Maybe InputFile -> InputMessageContent

[caption] :: InputMessageContent -> Maybe FormattedText

[disable_content_type_detection] :: InputMessageContent -> Maybe Bool

[thumbnail] :: InputMessageContent -> Maybe InputThumbnail

[document] :: InputMessageContent -> Maybe InputFile

-- | A photo message <tt>photo Photo to send. The photo must be at most 10
--   MB in size. The photo's width and height must not exceed 10000 in
--   total. Width and height ratio must be at most 20 </tt>thumbnail Photo
--   thumbnail to be sent; pass null to skip thumbnail uploading. The
--   thumbnail is sent to the other party only in secret chats
--   <tt>added_sticker_file_ids File identifiers of the stickers added to
--   the photo, if applicable </tt>width Photo width <tt>height Photo
--   height </tt>caption Photo caption; pass null to use an empty caption;
--   0-GetOption("message_caption_length_max") characters
InputMessagePhoto :: Maybe Int -> Maybe FormattedText -> Maybe Int -> Maybe Int -> Maybe [Int] -> Maybe InputThumbnail -> Maybe InputFile -> InputMessageContent

-- | Photo TTL (Time To Live), in seconds (0-60). A non-zero TTL can be
--   specified only in private chats
[ttl] :: InputMessageContent -> Maybe Int

[caption] :: InputMessageContent -> Maybe FormattedText

[height] :: InputMessageContent -> Maybe Int

[width] :: InputMessageContent -> Maybe Int

[added_sticker_file_ids] :: InputMessageContent -> Maybe [Int]

[thumbnail] :: InputMessageContent -> Maybe InputThumbnail

[photo] :: InputMessageContent -> Maybe InputFile

-- | A sticker message <tt>sticker Sticker to be sent </tt>thumbnail
--   Sticker thumbnail; pass null to skip thumbnail uploading <tt>width
--   Sticker width </tt>height Sticker height @emoji Emoji used to choose
--   the sticker
InputMessageSticker :: Maybe String -> Maybe Int -> Maybe Int -> Maybe InputThumbnail -> Maybe InputFile -> InputMessageContent

[emoji] :: InputMessageContent -> Maybe String

[height] :: InputMessageContent -> Maybe Int

[width] :: InputMessageContent -> Maybe Int

[thumbnail] :: InputMessageContent -> Maybe InputThumbnail

[sticker] :: InputMessageContent -> Maybe InputFile

-- | A video message <tt>video Video to be sent </tt>thumbnail Video
--   thumbnail; pass null to skip thumbnail uploading
--   @added_sticker_file_ids File identifiers of the stickers added to the
--   video, if applicable
InputMessageVideo :: Maybe Int -> Maybe FormattedText -> Maybe Bool -> Maybe Int -> Maybe Int -> Maybe Int -> Maybe [Int] -> Maybe InputThumbnail -> Maybe InputFile -> InputMessageContent

-- | Photo TTL (Time To Live), in seconds (0-60). A non-zero TTL can be
--   specified only in private chats
[ttl] :: InputMessageContent -> Maybe Int

[caption] :: InputMessageContent -> Maybe FormattedText

[supports_streaming] :: InputMessageContent -> Maybe Bool

[height] :: InputMessageContent -> Maybe Int

[width] :: InputMessageContent -> Maybe Int

-- | Duration of the animation, in seconds <tt>width Width of the
--   animation; may be replaced by the server </tt>height Height of the
--   animation; may be replaced by the server @caption Animation caption;
--   pass null to use an empty caption;
--   0-GetOption("message_caption_length_max") characters
[duration] :: InputMessageContent -> Maybe Int

[added_sticker_file_ids] :: InputMessageContent -> Maybe [Int]

[thumbnail] :: InputMessageContent -> Maybe InputThumbnail

[video] :: InputMessageContent -> Maybe InputFile

-- | A video note message <tt>video_note Video note to be sent
--   </tt>thumbnail Video thumbnail; pass null to skip thumbnail uploading
--   <tt>duration Duration of the video, in seconds </tt>length Video width
--   and height; must be positive and not greater than 640
InputMessageVideoNote :: Maybe Int -> Maybe Int -> Maybe InputThumbnail -> Maybe InputFile -> InputMessageContent

[_length] :: InputMessageContent -> Maybe Int

-- | Duration of the animation, in seconds <tt>width Width of the
--   animation; may be replaced by the server </tt>height Height of the
--   animation; may be replaced by the server @caption Animation caption;
--   pass null to use an empty caption;
--   0-GetOption("message_caption_length_max") characters
[duration] :: InputMessageContent -> Maybe Int

[thumbnail] :: InputMessageContent -> Maybe InputThumbnail

[video_note] :: InputMessageContent -> Maybe InputFile

-- | A voice note message <tt>voice_note Voice note to be sent
--   </tt>duration Duration of the voice note, in seconds <tt>waveform
--   Waveform representation of the voice note, in 5-bit format
--   </tt>caption Voice note caption; pass null to use an empty caption;
--   0-GetOption("message_caption_length_max") characters
InputMessageVoiceNote :: Maybe FormattedText -> Maybe String -> Maybe Int -> Maybe InputFile -> InputMessageContent

[caption] :: InputMessageContent -> Maybe FormattedText

[waveform] :: InputMessageContent -> Maybe String

-- | Duration of the animation, in seconds <tt>width Width of the
--   animation; may be replaced by the server </tt>height Height of the
--   animation; may be replaced by the server @caption Animation caption;
--   pass null to use an empty caption;
--   0-GetOption("message_caption_length_max") characters
[duration] :: InputMessageContent -> Maybe Int

[voice_note] :: InputMessageContent -> Maybe InputFile

-- | A message with a location <tt>location Location to be sent
--   </tt>live_period Period for which the location can be updated, in
--   seconds; must be between 60 and 86400 for a live location and 0
--   otherwise
InputMessageLocation :: Maybe Int -> Maybe Int -> Maybe Int -> Maybe Location -> InputMessageContent

-- | For live locations, a maximum distance to another chat member for
--   proximity alerts, in meters (0-100000). Pass 0 if the notification is
--   disabled. Can't be enabled in channels and Saved Messages
[proximity_alert_radius] :: InputMessageContent -> Maybe Int

-- | For live locations, a direction in which the location moves, in
--   degrees; 1-360. Pass 0 if unknown
[heading] :: InputMessageContent -> Maybe Int

[live_period] :: InputMessageContent -> Maybe Int

[location] :: InputMessageContent -> Maybe Location

-- | A message with information about a venue @venue Venue to send
InputMessageVenue :: Maybe Venue -> InputMessageContent

[venue] :: InputMessageContent -> Maybe Venue

-- | A message containing a user contact @contact Contact to send
InputMessageContact :: Maybe Contact -> InputMessageContent

[contact] :: InputMessageContent -> Maybe Contact

-- | A dice message <tt>emoji Emoji on which the dice throw animation is
--   based </tt>clear_draft True, if the chat message draft must be deleted
InputMessageDice :: Maybe Bool -> Maybe String -> InputMessageContent

[clear_draft] :: InputMessageContent -> Maybe Bool

[emoji] :: InputMessageContent -> Maybe String

-- | A message with a game; not supported for channels or secret chats
--   <tt>bot_user_id User identifier of the bot that owns the game
--   </tt>game_short_name Short name of the game
InputMessageGame :: Maybe String -> Maybe Int -> InputMessageContent

[game_short_name] :: InputMessageContent -> Maybe String

[bot_user_id] :: InputMessageContent -> Maybe Int

-- | A message with an invoice; can be used only by bots <tt>invoice
--   Invoice </tt>title Product title; 1-32 characters @param_description
--   Product description; 0-255 characters
InputMessageInvoice :: Maybe String -> Maybe String -> Maybe String -> Maybe String -> Maybe Int -> Maybe Int -> Maybe Int -> Maybe String -> Maybe String -> Maybe String -> Maybe Invoice -> InputMessageContent

-- | Unique invoice bot deep link parameter for the generation of this
--   invoice. If empty, it would be possible to pay directly from forwards
--   of the invoice message
[start_parameter] :: InputMessageContent -> Maybe String

[provider_data] :: InputMessageContent -> Maybe String

[provider_token] :: InputMessageContent -> Maybe String

-- | The invoice payload <tt>provider_token Payment provider token
--   </tt>provider_data JSON-encoded data about the invoice, which will be
--   shared with the payment provider
[payload] :: InputMessageContent -> Maybe String

[photo_height] :: InputMessageContent -> Maybe Int

[photo_width] :: InputMessageContent -> Maybe Int

[photo_size] :: InputMessageContent -> Maybe Int

-- | Product photo URL; optional <tt>photo_size Product photo size
--   </tt>photo_width Product photo width @photo_height Product photo
--   height
[photo_url] :: InputMessageContent -> Maybe String

[description] :: InputMessageContent -> Maybe String

[title] :: InputMessageContent -> Maybe String

[invoice] :: InputMessageContent -> Maybe Invoice

-- | A message with a poll. Polls can't be sent to secret chats. Polls can
--   be sent only to a private chat with a bot <tt>question Poll question;
--   1-255 characters (up to 300 characters for bots) </tt>options List of
--   poll answer options, 2-10 strings 1-100 characters each
InputMessagePoll :: Maybe Bool -> Maybe Int -> Maybe Int -> Maybe PollType -> Maybe Bool -> Maybe [String] -> Maybe String -> InputMessageContent

-- | True, if the poll needs to be sent already closed; for bots only
[is_closed] :: InputMessageContent -> Maybe Bool

-- | Point in time (Unix timestamp) when the poll will automatically be
--   closed; for bots only
[close_date] :: InputMessageContent -> Maybe Int

-- | Amount of time the poll will be active after creation, in seconds; for
--   bots only
[open_period] :: InputMessageContent -> Maybe Int

[_type] :: InputMessageContent -> Maybe PollType

-- | True, if the poll voters are anonymous. Non-anonymous polls can't be
--   sent or forwarded to channels @type Type of the poll
[is_anonymous] :: InputMessageContent -> Maybe Bool

[options] :: InputMessageContent -> Maybe [String]

[question] :: InputMessageContent -> Maybe String

-- | A forwarded message <tt>from_chat_id Identifier for the chat this
--   forwarded message came from </tt>message_id Identifier of the message
--   to forward
InputMessageForwarded :: Maybe MessageCopyOptions -> Maybe Bool -> Maybe Int -> Maybe Int -> InputMessageContent

-- | Options to be used to copy content of the message without reference to
--   the original sender; pass null to forward the message as usual
[copy_options] :: InputMessageContent -> Maybe MessageCopyOptions

-- | True, if a game message is being shared from a launched game; applies
--   only to game messages
[in_game_share] :: InputMessageContent -> Maybe Bool

[message_id] :: InputMessageContent -> Maybe Int

[from_chat_id] :: InputMessageContent -> Maybe Int
instance GHC.Classes.Eq TD.Data.InputMessageContent.InputMessageContent
instance GHC.Show.Show TD.Data.InputMessageContent.InputMessageContent
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.InputMessageContent.InputMessageContent
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.InputMessageContent.InputMessageContent


module TD.Query.SendMessageAlbum

-- | Sends 2-10 messages grouped together into an album. Currently, only
--   audio, document, photo and video messages can be grouped into an
--   album. Documents and audio files can be only grouped in an album with
--   messages of the same type. Returns sent messages
data SendMessageAlbum
SendMessageAlbum :: Maybe Bool -> Maybe [InputMessageContent] -> Maybe MessageSendOptions -> Maybe Int -> Maybe Int -> Maybe Int -> SendMessageAlbum

-- | Pass true to get fake messages instead of actually sending them
[only_preview] :: SendMessageAlbum -> Maybe Bool

-- | Contents of messages to be sent. At most 10 messages can be added to
--   an album
[input_message_contents] :: SendMessageAlbum -> Maybe [InputMessageContent]

-- | Options to be used to send the messages; pass null to use default
--   options
[options] :: SendMessageAlbum -> Maybe MessageSendOptions

-- | Identifier of a replied message; 0 if none
[reply_to_message_id] :: SendMessageAlbum -> Maybe Int

-- | If not 0, a message thread identifier in which the messages will be
--   sent
[message_thread_id] :: SendMessageAlbum -> Maybe Int

-- | Target chat
[chat_id] :: SendMessageAlbum -> Maybe Int
instance GHC.Classes.Eq TD.Query.SendMessageAlbum.SendMessageAlbum
instance GHC.Show.Show TD.Query.SendMessageAlbum.SendMessageAlbum
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SendMessageAlbum.SendMessageAlbum


module TD.Query.SendMessage

-- | Sends a message. Returns the sent message
data SendMessage
SendMessage :: Maybe InputMessageContent -> Maybe ReplyMarkup -> Maybe MessageSendOptions -> Maybe Int -> Maybe Int -> Maybe Int -> SendMessage

-- | The content of the message to be sent
[input_message_content] :: SendMessage -> Maybe InputMessageContent

-- | Markup for replying to the message; pass null if none; for bots only
[reply_markup] :: SendMessage -> Maybe ReplyMarkup

-- | Options to be used to send the message; pass null to use default
--   options
[options] :: SendMessage -> Maybe MessageSendOptions

-- | Identifier of the replied message; 0 if none
[reply_to_message_id] :: SendMessage -> Maybe Int

-- | If not 0, a message thread identifier in which the message will be
--   sent
[message_thread_id] :: SendMessage -> Maybe Int

-- | Target chat
[chat_id] :: SendMessage -> Maybe Int
instance GHC.Classes.Eq TD.Query.SendMessage.SendMessage
instance GHC.Show.Show TD.Query.SendMessage.SendMessage
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SendMessage.SendMessage


module TD.Query.EditMessageText

-- | Edits the text of a message (or a text of a game message). Returns the
--   edited message after the edit is completed on the server side
data EditMessageText
EditMessageText :: Maybe InputMessageContent -> Maybe ReplyMarkup -> Maybe Int -> Maybe Int -> EditMessageText

-- | New text content of the message. Must be of type inputMessageText
[input_message_content] :: EditMessageText -> Maybe InputMessageContent

-- | The new message reply markup; pass null if none; for bots only
[reply_markup] :: EditMessageText -> Maybe ReplyMarkup

-- | Identifier of the message
[message_id] :: EditMessageText -> Maybe Int

-- | The chat the message belongs to
[chat_id] :: EditMessageText -> Maybe Int
instance GHC.Classes.Eq TD.Query.EditMessageText.EditMessageText
instance GHC.Show.Show TD.Query.EditMessageText.EditMessageText
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.EditMessageText.EditMessageText


module TD.Query.EditMessageMedia

-- | Edits the content of a message with an animation, an audio, a
--   document, a photo or a video, including message caption. If only the
--   caption needs to be edited, use editMessageCaption instead. The media
--   can't be edited if the message was set to self-destruct or to a
--   self-destructing media. The type of message content in an album can't
--   be changed with exception of replacing a photo with a video or vice
--   versa. Returns the edited message after the edit is completed on the
--   server side
data EditMessageMedia
EditMessageMedia :: Maybe InputMessageContent -> Maybe ReplyMarkup -> Maybe Int -> Maybe Int -> EditMessageMedia

-- | New content of the message. Must be one of the following types:
--   inputMessageAnimation, inputMessageAudio, inputMessageDocument,
--   inputMessagePhoto or inputMessageVideo
[input_message_content] :: EditMessageMedia -> Maybe InputMessageContent

-- | The new message reply markup; pass null if none; for bots only
[reply_markup] :: EditMessageMedia -> Maybe ReplyMarkup

-- | Identifier of the message
[message_id] :: EditMessageMedia -> Maybe Int

-- | The chat the message belongs to
[chat_id] :: EditMessageMedia -> Maybe Int
instance GHC.Classes.Eq TD.Query.EditMessageMedia.EditMessageMedia
instance GHC.Show.Show TD.Query.EditMessageMedia.EditMessageMedia
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.EditMessageMedia.EditMessageMedia


module TD.Query.EditInlineMessageText

-- | Edits the text of an inline text or game message sent via a bot; for
--   bots only
data EditInlineMessageText
EditInlineMessageText :: Maybe InputMessageContent -> Maybe ReplyMarkup -> Maybe String -> EditInlineMessageText

-- | New text content of the message. Must be of type inputMessageText
[input_message_content] :: EditInlineMessageText -> Maybe InputMessageContent

-- | The new message reply markup; pass null if none
[reply_markup] :: EditInlineMessageText -> Maybe ReplyMarkup

-- | Inline message identifier
[inline_message_id] :: EditInlineMessageText -> Maybe String
instance GHC.Classes.Eq TD.Query.EditInlineMessageText.EditInlineMessageText
instance GHC.Show.Show TD.Query.EditInlineMessageText.EditInlineMessageText
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.EditInlineMessageText.EditInlineMessageText


module TD.Query.EditInlineMessageMedia

-- | Edits the content of a message with an animation, an audio, a
--   document, a photo or a video in an inline message sent via a bot; for
--   bots only
data EditInlineMessageMedia
EditInlineMessageMedia :: Maybe InputMessageContent -> Maybe ReplyMarkup -> Maybe String -> EditInlineMessageMedia

-- | New content of the message. Must be one of the following types:
--   inputMessageAnimation, inputMessageAudio, inputMessageDocument,
--   inputMessagePhoto or inputMessageVideo
[input_message_content] :: EditInlineMessageMedia -> Maybe InputMessageContent

-- | The new message reply markup; pass null if none; for bots only
[reply_markup] :: EditInlineMessageMedia -> Maybe ReplyMarkup

-- | Inline message identifier
[inline_message_id] :: EditInlineMessageMedia -> Maybe String
instance GHC.Classes.Eq TD.Query.EditInlineMessageMedia.EditInlineMessageMedia
instance GHC.Show.Show TD.Query.EditInlineMessageMedia.EditInlineMessageMedia
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.EditInlineMessageMedia.EditInlineMessageMedia


module TD.Query.CreateInvoiceLink

-- | Creates a link for the given invoice; for bots only @invoice
--   Information about the invoice of the type inputMessageInvoice
data CreateInvoiceLink
CreateInvoiceLink :: Maybe InputMessageContent -> CreateInvoiceLink

[invoice] :: CreateInvoiceLink -> Maybe InputMessageContent
instance GHC.Classes.Eq TD.Query.CreateInvoiceLink.CreateInvoiceLink
instance GHC.Show.Show TD.Query.CreateInvoiceLink.CreateInvoiceLink
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.CreateInvoiceLink.CreateInvoiceLink


module TD.Query.AddLocalMessage

-- | Adds a local message to a chat. The message is persistent across
--   application restarts only if the message database is used. Returns the
--   added message
data AddLocalMessage
AddLocalMessage :: Maybe InputMessageContent -> Maybe Bool -> Maybe Int -> Maybe MessageSender -> Maybe Int -> AddLocalMessage

-- | The content of the message to be added
[input_message_content] :: AddLocalMessage -> Maybe InputMessageContent

-- | Pass true to disable notification for the message
[disable_notification] :: AddLocalMessage -> Maybe Bool

-- | Identifier of the replied message; 0 if none
[reply_to_message_id] :: AddLocalMessage -> Maybe Int

-- | Identifier of the sender of the message
[sender_id] :: AddLocalMessage -> Maybe MessageSender

-- | Target chat
[chat_id] :: AddLocalMessage -> Maybe Int
instance GHC.Classes.Eq TD.Query.AddLocalMessage.AddLocalMessage
instance GHC.Show.Show TD.Query.AddLocalMessage.AddLocalMessage
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.AddLocalMessage.AddLocalMessage


module TD.Data.DraftMessage

data DraftMessage

-- | Contains information about a message draft
DraftMessage :: Maybe InputMessageContent -> Maybe Int -> Maybe Int -> DraftMessage

-- | Content of the message draft; must be of the type inputMessageText
[input_message_text] :: DraftMessage -> Maybe InputMessageContent

-- | Point in time (Unix timestamp) when the draft was created
[date] :: DraftMessage -> Maybe Int

-- | Identifier of the replied message; 0 if none
[reply_to_message_id] :: DraftMessage -> Maybe Int
instance GHC.Classes.Eq TD.Data.DraftMessage.DraftMessage
instance GHC.Show.Show TD.Data.DraftMessage.DraftMessage
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.DraftMessage.DraftMessage
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.DraftMessage.DraftMessage


module TD.Query.SetChatDraftMessage

-- | Changes the draft message in a chat <tt>chat_id Chat identifier
--   </tt>message_thread_id If not 0, a message thread identifier in which
--   the draft was changed @draft_message New draft message; pass null to
--   remove the draft
data SetChatDraftMessage
SetChatDraftMessage :: Maybe DraftMessage -> Maybe Int -> Maybe Int -> SetChatDraftMessage

[draft_message] :: SetChatDraftMessage -> Maybe DraftMessage

[message_thread_id] :: SetChatDraftMessage -> Maybe Int

[chat_id] :: SetChatDraftMessage -> Maybe Int
instance GHC.Classes.Eq TD.Query.SetChatDraftMessage.SetChatDraftMessage
instance GHC.Show.Show TD.Query.SetChatDraftMessage.SetChatDraftMessage
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SetChatDraftMessage.SetChatDraftMessage


module TD.Data.InputInlineQueryResult

-- | Represents a single result of an inline query; for bots only
data InputInlineQueryResult

-- | Represents a link to an animated GIF or an animated (i.e., without
--   sound) H.264/MPEG-4 AVC video
InputInlineQueryResultAnimation :: Maybe InputMessageContent -> Maybe ReplyMarkup -> Maybe Int -> Maybe Int -> Maybe Int -> Maybe String -> Maybe String -> Maybe String -> Maybe String -> Maybe String -> Maybe String -> InputInlineQueryResult

-- | The content of the message to be sent. Must be one of the following
--   types: inputMessageText, inputMessageAnimation, inputMessageInvoice,
--   inputMessageLocation, inputMessageVenue or inputMessageContact
[input_message_content] :: InputInlineQueryResult -> Maybe InputMessageContent

-- | The message reply markup; pass null if none. Must be of type
--   replyMarkupInlineKeyboard or null
[reply_markup] :: InputInlineQueryResult -> Maybe ReplyMarkup

[video_height] :: InputInlineQueryResult -> Maybe Int

[video_width] :: InputInlineQueryResult -> Maybe Int

-- | Duration of the video, in seconds <tt>video_width Width of the video
--   </tt>video_height Height of the video
[video_duration] :: InputInlineQueryResult -> Maybe Int

[video_mime_type] :: InputInlineQueryResult -> Maybe String

-- | The URL of the video file (file size must not exceed 1MB)
--   @video_mime_type MIME type of the video file. Must be one of
--   "image<i>gif" and "video</i>mp4"
[video_url] :: InputInlineQueryResult -> Maybe String

[thumbnail_mime_type] :: InputInlineQueryResult -> Maybe String

-- | URL of the result thumbnail (JPEG, GIF, or MPEG4), if it exists
--   @thumbnail_mime_type MIME type of the video thumbnail. If non-empty,
--   must be one of "image<i>jpeg", "image</i>gif" and "video/mp4"
[thumbnail_url] :: InputInlineQueryResult -> Maybe String

[title] :: InputInlineQueryResult -> Maybe String

-- | Unique identifier of the query result @title Title of the query result
[_id] :: InputInlineQueryResult -> Maybe String

-- | Represents a link to an article or web page <tt>id Unique identifier
--   of the query result </tt>url URL of the result, if it exists
--   <tt>hide_url True, if the URL must be not shown </tt>title Title of
--   the result
InputInlineQueryResultArticle :: Maybe InputMessageContent -> Maybe ReplyMarkup -> Maybe Int -> Maybe Int -> Maybe String -> Maybe String -> Maybe String -> Maybe Bool -> Maybe String -> Maybe String -> InputInlineQueryResult

-- | The content of the message to be sent. Must be one of the following
--   types: inputMessageText, inputMessageAnimation, inputMessageInvoice,
--   inputMessageLocation, inputMessageVenue or inputMessageContact
[input_message_content] :: InputInlineQueryResult -> Maybe InputMessageContent

-- | The message reply markup; pass null if none. Must be of type
--   replyMarkupInlineKeyboard or null
[reply_markup] :: InputInlineQueryResult -> Maybe ReplyMarkup

[thumbnail_height] :: InputInlineQueryResult -> Maybe Int

[thumbnail_width] :: InputInlineQueryResult -> Maybe Int

-- | URL of the result thumbnail (JPEG, GIF, or MPEG4), if it exists
--   @thumbnail_mime_type MIME type of the video thumbnail. If non-empty,
--   must be one of "image<i>jpeg", "image</i>gif" and "video/mp4"
[thumbnail_url] :: InputInlineQueryResult -> Maybe String

[description] :: InputInlineQueryResult -> Maybe String

[title] :: InputInlineQueryResult -> Maybe String

[hide_url] :: InputInlineQueryResult -> Maybe Bool

[url] :: InputInlineQueryResult -> Maybe String

-- | Unique identifier of the query result @title Title of the query result
[_id] :: InputInlineQueryResult -> Maybe String

-- | Represents a link to an MP3 audio file <tt>id Unique identifier of the
--   query result </tt>title Title of the audio file @performer Performer
--   of the audio file
InputInlineQueryResultAudio :: Maybe InputMessageContent -> Maybe ReplyMarkup -> Maybe Int -> Maybe String -> Maybe String -> Maybe String -> Maybe String -> InputInlineQueryResult

-- | The content of the message to be sent. Must be one of the following
--   types: inputMessageText, inputMessageAnimation, inputMessageInvoice,
--   inputMessageLocation, inputMessageVenue or inputMessageContact
[input_message_content] :: InputInlineQueryResult -> Maybe InputMessageContent

-- | The message reply markup; pass null if none. Must be of type
--   replyMarkupInlineKeyboard or null
[reply_markup] :: InputInlineQueryResult -> Maybe ReplyMarkup

[audio_duration] :: InputInlineQueryResult -> Maybe Int

-- | The URL of the audio file @audio_duration Audio file duration, in
--   seconds
[audio_url] :: InputInlineQueryResult -> Maybe String

[performer] :: InputInlineQueryResult -> Maybe String

[title] :: InputInlineQueryResult -> Maybe String

-- | Unique identifier of the query result @title Title of the query result
[_id] :: InputInlineQueryResult -> Maybe String

-- | Represents a user contact <tt>id Unique identifier of the query result
--   </tt>contact User contact <tt>thumbnail_url URL of the result
--   thumbnail, if it exists </tt>thumbnail_width Thumbnail width, if known
--   @thumbnail_height Thumbnail height, if known
InputInlineQueryResultContact :: Maybe InputMessageContent -> Maybe ReplyMarkup -> Maybe Int -> Maybe Int -> Maybe String -> Maybe Contact -> Maybe String -> InputInlineQueryResult

-- | The content of the message to be sent. Must be one of the following
--   types: inputMessageText, inputMessageAnimation, inputMessageInvoice,
--   inputMessageLocation, inputMessageVenue or inputMessageContact
[input_message_content] :: InputInlineQueryResult -> Maybe InputMessageContent

-- | The message reply markup; pass null if none. Must be of type
--   replyMarkupInlineKeyboard or null
[reply_markup] :: InputInlineQueryResult -> Maybe ReplyMarkup

[thumbnail_height] :: InputInlineQueryResult -> Maybe Int

[thumbnail_width] :: InputInlineQueryResult -> Maybe Int

-- | URL of the result thumbnail (JPEG, GIF, or MPEG4), if it exists
--   @thumbnail_mime_type MIME type of the video thumbnail. If non-empty,
--   must be one of "image<i>jpeg", "image</i>gif" and "video/mp4"
[thumbnail_url] :: InputInlineQueryResult -> Maybe String

[contact] :: InputInlineQueryResult -> Maybe Contact

-- | Unique identifier of the query result @title Title of the query result
[_id] :: InputInlineQueryResult -> Maybe String

-- | Represents a link to a file <tt>id Unique identifier of the query
--   result </tt>title Title of the resulting file <tt>param_description
--   Short description of the result, if known </tt>document_url URL of the
--   file @mime_type MIME type of the file content; only
--   "application<i>pdf" and "application</i>zip" are currently allowed
InputInlineQueryResultDocument :: Maybe InputMessageContent -> Maybe ReplyMarkup -> Maybe Int -> Maybe Int -> Maybe String -> Maybe String -> Maybe String -> Maybe String -> Maybe String -> Maybe String -> InputInlineQueryResult

-- | The content of the message to be sent. Must be one of the following
--   types: inputMessageText, inputMessageAnimation, inputMessageInvoice,
--   inputMessageLocation, inputMessageVenue or inputMessageContact
[input_message_content] :: InputInlineQueryResult -> Maybe InputMessageContent

-- | The message reply markup; pass null if none. Must be of type
--   replyMarkupInlineKeyboard or null
[reply_markup] :: InputInlineQueryResult -> Maybe ReplyMarkup

[thumbnail_height] :: InputInlineQueryResult -> Maybe Int

[thumbnail_width] :: InputInlineQueryResult -> Maybe Int

-- | URL of the result thumbnail (JPEG, GIF, or MPEG4), if it exists
--   @thumbnail_mime_type MIME type of the video thumbnail. If non-empty,
--   must be one of "image<i>jpeg", "image</i>gif" and "video/mp4"
[thumbnail_url] :: InputInlineQueryResult -> Maybe String

[mime_type] :: InputInlineQueryResult -> Maybe String

[document_url] :: InputInlineQueryResult -> Maybe String

[description] :: InputInlineQueryResult -> Maybe String

[title] :: InputInlineQueryResult -> Maybe String

-- | Unique identifier of the query result @title Title of the query result
[_id] :: InputInlineQueryResult -> Maybe String

-- | Represents a game <tt>id Unique identifier of the query result
--   </tt>game_short_name Short name of the game @reply_markup The message
--   reply markup; pass null if none. Must be of type
--   replyMarkupInlineKeyboard or null
InputInlineQueryResultGame :: Maybe ReplyMarkup -> Maybe String -> Maybe String -> InputInlineQueryResult

-- | The message reply markup; pass null if none. Must be of type
--   replyMarkupInlineKeyboard or null
[reply_markup] :: InputInlineQueryResult -> Maybe ReplyMarkup

[game_short_name] :: InputInlineQueryResult -> Maybe String

-- | Unique identifier of the query result @title Title of the query result
[_id] :: InputInlineQueryResult -> Maybe String

-- | Represents a point on the map <tt>id Unique identifier of the query
--   result </tt>location Location result
InputInlineQueryResultLocation :: Maybe InputMessageContent -> Maybe ReplyMarkup -> Maybe Int -> Maybe Int -> Maybe String -> Maybe String -> Maybe Int -> Maybe Location -> Maybe String -> InputInlineQueryResult

-- | The content of the message to be sent. Must be one of the following
--   types: inputMessageText, inputMessageAnimation, inputMessageInvoice,
--   inputMessageLocation, inputMessageVenue or inputMessageContact
[input_message_content] :: InputInlineQueryResult -> Maybe InputMessageContent

-- | The message reply markup; pass null if none. Must be of type
--   replyMarkupInlineKeyboard or null
[reply_markup] :: InputInlineQueryResult -> Maybe ReplyMarkup

[thumbnail_height] :: InputInlineQueryResult -> Maybe Int

[thumbnail_width] :: InputInlineQueryResult -> Maybe Int

-- | URL of the result thumbnail (JPEG, GIF, or MPEG4), if it exists
--   @thumbnail_mime_type MIME type of the video thumbnail. If non-empty,
--   must be one of "image<i>jpeg", "image</i>gif" and "video/mp4"
[thumbnail_url] :: InputInlineQueryResult -> Maybe String

[title] :: InputInlineQueryResult -> Maybe String

-- | Amount of time relative to the message sent time until the location
--   can be updated, in seconds
[live_period] :: InputInlineQueryResult -> Maybe Int

[location] :: InputInlineQueryResult -> Maybe Location

-- | Unique identifier of the query result @title Title of the query result
[_id] :: InputInlineQueryResult -> Maybe String

-- | Represents link to a JPEG image <tt>id Unique identifier of the query
--   result </tt>title Title of the result, if known <tt>param_description
--   A short description of the result, if known </tt>thumbnail_url URL of
--   the photo thumbnail, if it exists
InputInlineQueryResultPhoto :: Maybe InputMessageContent -> Maybe ReplyMarkup -> Maybe Int -> Maybe Int -> Maybe String -> Maybe String -> Maybe String -> Maybe String -> Maybe String -> InputInlineQueryResult

-- | The content of the message to be sent. Must be one of the following
--   types: inputMessageText, inputMessageAnimation, inputMessageInvoice,
--   inputMessageLocation, inputMessageVenue or inputMessageContact
[input_message_content] :: InputInlineQueryResult -> Maybe InputMessageContent

-- | The message reply markup; pass null if none. Must be of type
--   replyMarkupInlineKeyboard or null
[reply_markup] :: InputInlineQueryResult -> Maybe ReplyMarkup

[photo_height] :: InputInlineQueryResult -> Maybe Int

[photo_width] :: InputInlineQueryResult -> Maybe Int

-- | The URL of the JPEG photo (photo size must not exceed 5MB)
--   <tt>photo_width Width of the photo </tt>photo_height Height of the
--   photo
[photo_url] :: InputInlineQueryResult -> Maybe String

-- | URL of the result thumbnail (JPEG, GIF, or MPEG4), if it exists
--   @thumbnail_mime_type MIME type of the video thumbnail. If non-empty,
--   must be one of "image<i>jpeg", "image</i>gif" and "video/mp4"
[thumbnail_url] :: InputInlineQueryResult -> Maybe String

[description] :: InputInlineQueryResult -> Maybe String

[title] :: InputInlineQueryResult -> Maybe String

-- | Unique identifier of the query result @title Title of the query result
[_id] :: InputInlineQueryResult -> Maybe String

-- | Represents a link to a WEBP, TGS, or WEBM sticker <tt>id Unique
--   identifier of the query result </tt>thumbnail_url URL of the sticker
--   thumbnail, if it exists
InputInlineQueryResultSticker :: Maybe InputMessageContent -> Maybe ReplyMarkup -> Maybe Int -> Maybe Int -> Maybe String -> Maybe String -> Maybe String -> InputInlineQueryResult

-- | The content of the message to be sent. Must be one of the following
--   types: inputMessageText, inputMessageAnimation, inputMessageInvoice,
--   inputMessageLocation, inputMessageVenue or inputMessageContact
[input_message_content] :: InputInlineQueryResult -> Maybe InputMessageContent

-- | The message reply markup; pass null if none. Must be of type
--   replyMarkupInlineKeyboard or null
[reply_markup] :: InputInlineQueryResult -> Maybe ReplyMarkup

[sticker_height] :: InputInlineQueryResult -> Maybe Int

[sticker_width] :: InputInlineQueryResult -> Maybe Int

-- | The URL of the WEBP, TGS, or WEBM sticker (sticker file size must not
--   exceed 5MB) <tt>sticker_width Width of the sticker </tt>sticker_height
--   Height of the sticker
[sticker_url] :: InputInlineQueryResult -> Maybe String

-- | URL of the result thumbnail (JPEG, GIF, or MPEG4), if it exists
--   @thumbnail_mime_type MIME type of the video thumbnail. If non-empty,
--   must be one of "image<i>jpeg", "image</i>gif" and "video/mp4"
[thumbnail_url] :: InputInlineQueryResult -> Maybe String

-- | Unique identifier of the query result @title Title of the query result
[_id] :: InputInlineQueryResult -> Maybe String

-- | Represents information about a venue <tt>id Unique identifier of the
--   query result </tt>venue Venue result <tt>thumbnail_url URL of the
--   result thumbnail, if it exists </tt>thumbnail_width Thumbnail width,
--   if known @thumbnail_height Thumbnail height, if known
InputInlineQueryResultVenue :: Maybe InputMessageContent -> Maybe ReplyMarkup -> Maybe Int -> Maybe Int -> Maybe String -> Maybe Venue -> Maybe String -> InputInlineQueryResult

-- | The content of the message to be sent. Must be one of the following
--   types: inputMessageText, inputMessageAnimation, inputMessageInvoice,
--   inputMessageLocation, inputMessageVenue or inputMessageContact
[input_message_content] :: InputInlineQueryResult -> Maybe InputMessageContent

-- | The message reply markup; pass null if none. Must be of type
--   replyMarkupInlineKeyboard or null
[reply_markup] :: InputInlineQueryResult -> Maybe ReplyMarkup

[thumbnail_height] :: InputInlineQueryResult -> Maybe Int

[thumbnail_width] :: InputInlineQueryResult -> Maybe Int

-- | URL of the result thumbnail (JPEG, GIF, or MPEG4), if it exists
--   @thumbnail_mime_type MIME type of the video thumbnail. If non-empty,
--   must be one of "image<i>jpeg", "image</i>gif" and "video/mp4"
[thumbnail_url] :: InputInlineQueryResult -> Maybe String

[venue] :: InputInlineQueryResult -> Maybe Venue

-- | Unique identifier of the query result @title Title of the query result
[_id] :: InputInlineQueryResult -> Maybe String

-- | Represents a link to a page containing an embedded video player or a
--   video file <tt>id Unique identifier of the query result </tt>title
--   Title of the result @param_description A short description of the
--   result, if known
InputInlineQueryResultVideo :: Maybe InputMessageContent -> Maybe ReplyMarkup -> Maybe Int -> Maybe Int -> Maybe Int -> Maybe String -> Maybe String -> Maybe String -> Maybe String -> Maybe String -> Maybe String -> InputInlineQueryResult

-- | The content of the message to be sent. Must be one of the following
--   types: inputMessageText, inputMessageAnimation, inputMessageInvoice,
--   inputMessageLocation, inputMessageVenue or inputMessageContact
[input_message_content] :: InputInlineQueryResult -> Maybe InputMessageContent

-- | The message reply markup; pass null if none. Must be of type
--   replyMarkupInlineKeyboard or null
[reply_markup] :: InputInlineQueryResult -> Maybe ReplyMarkup

-- | Duration of the video, in seconds <tt>video_width Width of the video
--   </tt>video_height Height of the video
[video_duration] :: InputInlineQueryResult -> Maybe Int

[video_height] :: InputInlineQueryResult -> Maybe Int

[video_width] :: InputInlineQueryResult -> Maybe Int

[mime_type] :: InputInlineQueryResult -> Maybe String

-- | The URL of the video file (file size must not exceed 1MB)
--   @video_mime_type MIME type of the video file. Must be one of
--   "image<i>gif" and "video</i>mp4"
[video_url] :: InputInlineQueryResult -> Maybe String

-- | URL of the result thumbnail (JPEG, GIF, or MPEG4), if it exists
--   @thumbnail_mime_type MIME type of the video thumbnail. If non-empty,
--   must be one of "image<i>jpeg", "image</i>gif" and "video/mp4"
[thumbnail_url] :: InputInlineQueryResult -> Maybe String

[description] :: InputInlineQueryResult -> Maybe String

[title] :: InputInlineQueryResult -> Maybe String

-- | Unique identifier of the query result @title Title of the query result
[_id] :: InputInlineQueryResult -> Maybe String

-- | Represents a link to an opus-encoded audio file within an OGG
--   container, single channel audio <tt>id Unique identifier of the query
--   result </tt>title Title of the voice note
InputInlineQueryResultVoiceNote :: Maybe InputMessageContent -> Maybe ReplyMarkup -> Maybe Int -> Maybe String -> Maybe String -> Maybe String -> InputInlineQueryResult

-- | The content of the message to be sent. Must be one of the following
--   types: inputMessageText, inputMessageAnimation, inputMessageInvoice,
--   inputMessageLocation, inputMessageVenue or inputMessageContact
[input_message_content] :: InputInlineQueryResult -> Maybe InputMessageContent

-- | The message reply markup; pass null if none. Must be of type
--   replyMarkupInlineKeyboard or null
[reply_markup] :: InputInlineQueryResult -> Maybe ReplyMarkup

[voice_note_duration] :: InputInlineQueryResult -> Maybe Int

-- | The URL of the voice note file @voice_note_duration Duration of the
--   voice note, in seconds
[voice_note_url] :: InputInlineQueryResult -> Maybe String

[title] :: InputInlineQueryResult -> Maybe String

-- | Unique identifier of the query result @title Title of the query result
[_id] :: InputInlineQueryResult -> Maybe String
instance GHC.Classes.Eq TD.Data.InputInlineQueryResult.InputInlineQueryResult
instance GHC.Show.Show TD.Data.InputInlineQueryResult.InputInlineQueryResult
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.InputInlineQueryResult.InputInlineQueryResult
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.InputInlineQueryResult.InputInlineQueryResult


module TD.Query.AnswerWebAppQuery

-- | Sets the result of interaction with a Web App and sends corresponding
--   message on behalf of the user to the chat from which the query
--   originated; for bots only
data AnswerWebAppQuery
AnswerWebAppQuery :: Maybe InputInlineQueryResult -> Maybe String -> AnswerWebAppQuery

-- | The result of the query
[result] :: AnswerWebAppQuery -> Maybe InputInlineQueryResult

-- | Identifier of the Web App query
[web_app_query_id] :: AnswerWebAppQuery -> Maybe String
instance GHC.Classes.Eq TD.Query.AnswerWebAppQuery.AnswerWebAppQuery
instance GHC.Show.Show TD.Query.AnswerWebAppQuery.AnswerWebAppQuery
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.AnswerWebAppQuery.AnswerWebAppQuery


module TD.Query.AnswerInlineQuery

-- | Sets the result of an inline query; for bots only
data AnswerInlineQuery
AnswerInlineQuery :: Maybe String -> Maybe String -> Maybe String -> Maybe Int -> Maybe [InputInlineQueryResult] -> Maybe Bool -> Maybe Int -> AnswerInlineQuery

-- | The parameter for the bot start message
[switch_pm_parameter] :: AnswerInlineQuery -> Maybe String

-- | If non-empty, this text must be shown on the button that opens a
--   private chat with the bot and sends a start message to the bot with
--   the parameter switch_pm_parameter
[switch_pm_text] :: AnswerInlineQuery -> Maybe String

-- | Offset for the next inline query; pass an empty string if there are no
--   more results
[next_offset] :: AnswerInlineQuery -> Maybe String

-- | Allowed time to cache the results of the query, in seconds
[cache_time] :: AnswerInlineQuery -> Maybe Int

-- | The results of the query
[results] :: AnswerInlineQuery -> Maybe [InputInlineQueryResult]

-- | Pass true if results may be cached and returned only for the user that
--   sent the query. By default, results may be returned to any user who
--   sends the same query
[is_personal] :: AnswerInlineQuery -> Maybe Bool

-- | Identifier of the inline query
[inline_query_id] :: AnswerInlineQuery -> Maybe Int
instance GHC.Classes.Eq TD.Query.AnswerInlineQuery.AnswerInlineQuery
instance GHC.Show.Show TD.Query.AnswerInlineQuery.AnswerInlineQuery
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.AnswerInlineQuery.AnswerInlineQuery


module TD.Data.ConnectionState

-- | Describes the current state of the connection to Telegram servers
data ConnectionState

-- | Currently waiting for the network to become available. Use
--   setNetworkType to change the available network type
ConnectionStateWaitingForNetwork :: ConnectionState

-- | Currently establishing a connection with a proxy server
ConnectionStateConnectingToProxy :: ConnectionState

-- | Currently establishing a connection to the Telegram servers
ConnectionStateConnecting :: ConnectionState

-- | Downloading data received while the application was offline
ConnectionStateUpdating :: ConnectionState

-- | There is a working connection to the Telegram servers
ConnectionStateReady :: ConnectionState
instance GHC.Classes.Eq TD.Data.ConnectionState.ConnectionState
instance GHC.Show.Show TD.Data.ConnectionState.ConnectionState
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.ConnectionState.ConnectionState
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.ConnectionState.ConnectionState


module TD.Data.ConnectedWebsite

data ConnectedWebsite

-- | Contains information about one website the current user is logged in
--   with Telegram
ConnectedWebsite :: Maybe String -> Maybe String -> Maybe Int -> Maybe Int -> Maybe String -> Maybe String -> Maybe Int -> Maybe String -> Maybe Int -> ConnectedWebsite

-- | Human-readable description of a country and a region from which the
--   user was logged in, based on the IP address
[location] :: ConnectedWebsite -> Maybe String

-- | IP address from which the user was logged in, in human-readable format
[ip] :: ConnectedWebsite -> Maybe String

-- | Point in time (Unix timestamp) when obtained authorization was last
--   used
[last_active_date] :: ConnectedWebsite -> Maybe Int

-- | Point in time (Unix timestamp) when the user was logged in
[log_in_date] :: ConnectedWebsite -> Maybe Int

-- | Operating system the browser is running on
[platform] :: ConnectedWebsite -> Maybe String

-- | The version of a browser used to log in
[browser] :: ConnectedWebsite -> Maybe String

-- | User identifier of a bot linked with the website
[bot_user_id] :: ConnectedWebsite -> Maybe Int

-- | The domain name of the website
[domain_name] :: ConnectedWebsite -> Maybe String

-- | Website identifier
[_id] :: ConnectedWebsite -> Maybe Int
instance GHC.Classes.Eq TD.Data.ConnectedWebsite.ConnectedWebsite
instance GHC.Show.Show TD.Data.ConnectedWebsite.ConnectedWebsite
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.ConnectedWebsite.ConnectedWebsite
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.ConnectedWebsite.ConnectedWebsite


module TD.Data.ConnectedWebsites

data ConnectedWebsites

-- | Contains a list of websites the current user is logged in with
--   Telegram @websites List of connected websites
ConnectedWebsites :: Maybe [ConnectedWebsite] -> ConnectedWebsites

[websites] :: ConnectedWebsites -> Maybe [ConnectedWebsite]
instance GHC.Classes.Eq TD.Data.ConnectedWebsites.ConnectedWebsites
instance GHC.Show.Show TD.Data.ConnectedWebsites.ConnectedWebsites
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.ConnectedWebsites.ConnectedWebsites
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.ConnectedWebsites.ConnectedWebsites


module TD.Data.ClosedVectorPath

data ClosedVectorPath

-- | Represents a closed vector path. The path begins at the end point of
--   the last command @commands List of vector path commands
ClosedVectorPath :: Maybe [VectorPathCommand] -> ClosedVectorPath

[commands] :: ClosedVectorPath -> Maybe [VectorPathCommand]
instance GHC.Classes.Eq TD.Data.ClosedVectorPath.ClosedVectorPath
instance GHC.Show.Show TD.Data.ClosedVectorPath.ClosedVectorPath
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.ClosedVectorPath.ClosedVectorPath
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.ClosedVectorPath.ClosedVectorPath


module TD.Data.Sticker

data Sticker

-- | Describes a sticker <tt>set_id The identifier of the sticker set to
--   which the sticker belongs; 0 if none </tt>width Sticker width; as
--   defined by the sender @height Sticker height; as defined by the sender
Sticker :: Maybe File -> Maybe File -> Maybe Thumbnail -> Maybe [ClosedVectorPath] -> Maybe StickerType -> Maybe String -> Maybe Int -> Maybe Int -> Maybe Int -> Sticker

[sticker] :: Sticker -> Maybe File

[premium_animation] :: Sticker -> Maybe File

-- | Sticker thumbnail in WEBP or JPEG format; may be null
--   <tt>premium_animation Premium animation of the sticker; may be null.
--   If present, only Premium users can send the sticker </tt>sticker File
--   containing the sticker
[thumbnail] :: Sticker -> Maybe Thumbnail

[outline] :: Sticker -> Maybe [ClosedVectorPath]

[_type] :: Sticker -> Maybe StickerType

-- | Emoji corresponding to the sticker <tt>type Sticker type </tt>outline
--   Sticker's outline represented as a list of closed vector paths; may be
--   empty. The coordinate system origin is in the upper-left corner
[emoji] :: Sticker -> Maybe String

[height] :: Sticker -> Maybe Int

[width] :: Sticker -> Maybe Int

[set_id] :: Sticker -> Maybe Int
instance GHC.Classes.Eq TD.Data.Sticker.Sticker
instance GHC.Show.Show TD.Data.Sticker.Sticker
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.Sticker.Sticker
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.Sticker.Sticker


module TD.Data.Stickers

data Stickers

-- | Represents a list of stickers @stickers List of stickers
Stickers :: Maybe [Sticker] -> Stickers

[stickers] :: Stickers -> Maybe [Sticker]
instance GHC.Classes.Eq TD.Data.Stickers.Stickers
instance GHC.Show.Show TD.Data.Stickers.Stickers
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.Stickers.Stickers
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.Stickers.Stickers


module TD.Data.StickerSetInfo

data StickerSetInfo

-- | Represents short information about a sticker set
StickerSetInfo :: Maybe [Sticker] -> Maybe Int -> Maybe Bool -> Maybe StickerType -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe [ClosedVectorPath] -> Maybe Thumbnail -> Maybe String -> Maybe String -> Maybe Int -> StickerSetInfo

[covers] :: StickerSetInfo -> Maybe [Sticker]

-- | Total number of stickers in the set @covers Up to the first 5 stickers
--   from the set, depending on the context. If the application needs more
--   stickers the full sticker set needs to be requested
[size] :: StickerSetInfo -> Maybe Int

[is_viewed] :: StickerSetInfo -> Maybe Bool

[sticker_type] :: StickerSetInfo -> Maybe StickerType

-- | True, if the sticker set is official <tt>sticker_type Type of the
--   stickers in the set </tt>is_viewed True for already viewed trending
--   sticker sets
[is_official] :: StickerSetInfo -> Maybe Bool

[is_archived] :: StickerSetInfo -> Maybe Bool

-- | True, if the sticker set has been installed by the current user
--   @is_archived True, if the sticker set has been archived. A sticker set
--   can't be installed and archived simultaneously
[is_installed] :: StickerSetInfo -> Maybe Bool

-- | Sticker set thumbnail's outline represented as a list of closed vector
--   paths; may be empty. The coordinate system origin is in the upper-left
--   corner
[thumbnail_outline] :: StickerSetInfo -> Maybe [ClosedVectorPath]

[thumbnail] :: StickerSetInfo -> Maybe Thumbnail

[name] :: StickerSetInfo -> Maybe String

[title] :: StickerSetInfo -> Maybe String

-- | Identifier of the sticker set <tt>title Title of the sticker set
--   </tt>name Name of the sticker set @thumbnail Sticker set thumbnail in
--   WEBP, TGS, or WEBM format with width and height 100; may be null
[_id] :: StickerSetInfo -> Maybe Int
instance GHC.Classes.Eq TD.Data.StickerSetInfo.StickerSetInfo
instance GHC.Show.Show TD.Data.StickerSetInfo.StickerSetInfo
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.StickerSetInfo.StickerSetInfo
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.StickerSetInfo.StickerSetInfo


module TD.Data.TrendingStickerSets

data TrendingStickerSets

-- | Represents a list of trending sticker sets <tt>total_count Approximate
--   total number of trending sticker sets </tt>sets List of trending
--   sticker sets @is_premium True, if the list contains sticker sets with
--   premium stickers
TrendingStickerSets :: Maybe Bool -> Maybe [StickerSetInfo] -> Maybe Int -> TrendingStickerSets

[is_premium] :: TrendingStickerSets -> Maybe Bool

[sets] :: TrendingStickerSets -> Maybe [StickerSetInfo]

[total_count] :: TrendingStickerSets -> Maybe Int
instance GHC.Classes.Eq TD.Data.TrendingStickerSets.TrendingStickerSets
instance GHC.Show.Show TD.Data.TrendingStickerSets.TrendingStickerSets
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.TrendingStickerSets.TrendingStickerSets
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.TrendingStickerSets.TrendingStickerSets


module TD.Data.StickerSets

data StickerSets

-- | Represents a list of sticker sets <tt>total_count Approximate total
--   number of sticker sets found </tt>sets List of sticker sets
StickerSets :: Maybe [StickerSetInfo] -> Maybe Int -> StickerSets

[sets] :: StickerSets -> Maybe [StickerSetInfo]

[total_count] :: StickerSets -> Maybe Int
instance GHC.Classes.Eq TD.Data.StickerSets.StickerSets
instance GHC.Show.Show TD.Data.StickerSets.StickerSets
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.StickerSets.StickerSets
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.StickerSets.StickerSets


module TD.Data.StickerSet

data StickerSet

-- | Represents a sticker set
StickerSet :: Maybe [Emojis] -> Maybe [Sticker] -> Maybe Bool -> Maybe StickerType -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe [ClosedVectorPath] -> Maybe Thumbnail -> Maybe String -> Maybe String -> Maybe Int -> StickerSet

[emojis] :: StickerSet -> Maybe [Emojis]

-- | List of stickers in this set @emojis A list of emoji corresponding to
--   the stickers in the same order. The list is only for informational
--   purposes, because a sticker is always sent with a fixed emoji from the
--   corresponding Sticker object
[stickers] :: StickerSet -> Maybe [Sticker]

[is_viewed] :: StickerSet -> Maybe Bool

[sticker_type] :: StickerSet -> Maybe StickerType

-- | True, if the sticker set is official <tt>sticker_type Type of the
--   stickers in the set </tt>is_viewed True for already viewed trending
--   sticker sets
[is_official] :: StickerSet -> Maybe Bool

[is_archived] :: StickerSet -> Maybe Bool

-- | True, if the sticker set has been installed by the current user
--   @is_archived True, if the sticker set has been archived. A sticker set
--   can't be installed and archived simultaneously
[is_installed] :: StickerSet -> Maybe Bool

-- | Sticker set thumbnail's outline represented as a list of closed vector
--   paths; may be empty. The coordinate system origin is in the upper-left
--   corner
[thumbnail_outline] :: StickerSet -> Maybe [ClosedVectorPath]

[thumbnail] :: StickerSet -> Maybe Thumbnail

[name] :: StickerSet -> Maybe String

[title] :: StickerSet -> Maybe String

-- | Identifier of the sticker set <tt>title Title of the sticker set
--   </tt>name Name of the sticker set @thumbnail Sticker set thumbnail in
--   WEBP, TGS, or WEBM format with width and height 100; may be null. The
--   file can be downloaded only before the thumbnail is changed
[_id] :: StickerSet -> Maybe Int
instance GHC.Classes.Eq TD.Data.StickerSet.StickerSet
instance GHC.Show.Show TD.Data.StickerSet.StickerSet
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.StickerSet.StickerSet
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.StickerSet.StickerSet


module TD.Data.Reaction

data Reaction

-- | Contains stickers which must be used for reaction animation rendering
Reaction :: Maybe Sticker -> Maybe Sticker -> Maybe Sticker -> Maybe Sticker -> Maybe Sticker -> Maybe Sticker -> Maybe Sticker -> Maybe Bool -> Maybe Bool -> Maybe String -> Maybe String -> Reaction

-- | Center animation for the reaction; may be null
[center_animation] :: Reaction -> Maybe Sticker

-- | Around animation for the reaction; may be null
[around_animation] :: Reaction -> Maybe Sticker

-- | Effect animation for the reaction
[effect_animation] :: Reaction -> Maybe Sticker

-- | Activate animation for the reaction
[activate_animation] :: Reaction -> Maybe Sticker

-- | Select animation for the reaction
[select_animation] :: Reaction -> Maybe Sticker

-- | Appear animation for the reaction
[appear_animation] :: Reaction -> Maybe Sticker

-- | Static icon for the reaction
[static_icon] :: Reaction -> Maybe Sticker

-- | True, if the reaction is available only for Premium users
[is_premium] :: Reaction -> Maybe Bool

-- | True, if the reaction can be added to new messages and enabled in
--   chats
[is_active] :: Reaction -> Maybe Bool

-- | Reaction title
[title] :: Reaction -> Maybe String

-- | Text representation of the reaction
[reaction] :: Reaction -> Maybe String
instance GHC.Classes.Eq TD.Data.Reaction.Reaction
instance GHC.Show.Show TD.Data.Reaction.Reaction
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.Reaction.Reaction
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.Reaction.Reaction


module TD.Data.DiceStickers

-- | Contains animated stickers which must be used for dice animation
--   rendering
data DiceStickers

-- | A regular animated sticker @sticker The animated sticker with the dice
--   animation
DiceStickersRegular :: Maybe Sticker -> DiceStickers

[sticker] :: DiceStickers -> Maybe Sticker

-- | Animated stickers to be combined into a slot machine
DiceStickersSlotMachine :: Maybe Sticker -> Maybe Sticker -> Maybe Sticker -> Maybe Sticker -> Maybe Sticker -> DiceStickers

-- | The animated sticker with the right reel
[right_reel] :: DiceStickers -> Maybe Sticker

-- | The animated sticker with the center reel
[center_reel] :: DiceStickers -> Maybe Sticker

-- | The animated sticker with the left reel
[left_reel] :: DiceStickers -> Maybe Sticker

-- | The animated sticker with the lever animation. The lever animation
--   must play once in the initial dice state
[lever] :: DiceStickers -> Maybe Sticker

-- | The animated sticker with the slot machine background. The background
--   animation must start playing after all reel animations finish
[background] :: DiceStickers -> Maybe Sticker
instance GHC.Classes.Eq TD.Data.DiceStickers.DiceStickers
instance GHC.Show.Show TD.Data.DiceStickers.DiceStickers
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.DiceStickers.DiceStickers
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.DiceStickers.DiceStickers


module TD.Data.CheckStickerSetNameResult

-- | Represents result of checking whether a name can be used for a new
--   sticker set
data CheckStickerSetNameResult

-- | The name can be set
CheckStickerSetNameResultOk :: CheckStickerSetNameResult

-- | The name is invalid
CheckStickerSetNameResultNameInvalid :: CheckStickerSetNameResult

-- | The name is occupied
CheckStickerSetNameResultNameOccupied :: CheckStickerSetNameResult
instance GHC.Classes.Eq TD.Data.CheckStickerSetNameResult.CheckStickerSetNameResult
instance GHC.Show.Show TD.Data.CheckStickerSetNameResult.CheckStickerSetNameResult
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.CheckStickerSetNameResult.CheckStickerSetNameResult
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.CheckStickerSetNameResult.CheckStickerSetNameResult


module TD.Data.CheckChatUsernameResult

-- | Represents result of checking whether a username can be set for a chat
data CheckChatUsernameResult

-- | The username can be set
CheckChatUsernameResultOk :: CheckChatUsernameResult

-- | The username is invalid
CheckChatUsernameResultUsernameInvalid :: CheckChatUsernameResult

-- | The username is occupied
CheckChatUsernameResultUsernameOccupied :: CheckChatUsernameResult

-- | The user has too many chats with username, one of them must be made
--   private first
CheckChatUsernameResultPublicChatsTooMuch :: CheckChatUsernameResult

-- | The user can't be a member of a public supergroup
CheckChatUsernameResultPublicGroupsUnavailable :: CheckChatUsernameResult
instance GHC.Classes.Eq TD.Data.CheckChatUsernameResult.CheckChatUsernameResult
instance GHC.Show.Show TD.Data.CheckChatUsernameResult.CheckChatUsernameResult
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.CheckChatUsernameResult.CheckChatUsernameResult
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.CheckChatUsernameResult.CheckChatUsernameResult


module TD.Data.Chats

data Chats

-- | Represents a list of chats <tt>total_count Approximate total number of
--   chats found </tt>chat_ids List of chat identifiers
Chats :: Maybe [Int] -> Maybe Int -> Chats

[chat_ids] :: Chats -> Maybe [Int]

[total_count] :: Chats -> Maybe Int
instance GHC.Classes.Eq TD.Data.Chats.Chats
instance GHC.Show.Show TD.Data.Chats.Chats
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.Chats.Chats
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.Chats.Chats


module TD.Data.ChatType

-- | Describes the type of a chat
data ChatType

-- | An ordinary chat with a user @user_id User identifier
ChatTypePrivate :: Maybe Int -> ChatType

[user_id] :: ChatType -> Maybe Int

-- | A basic group (a chat with 0-200 other users) @basic_group_id Basic
--   group identifier
ChatTypeBasicGroup :: Maybe Int -> ChatType

[basic_group_id] :: ChatType -> Maybe Int

-- | A supergroup or channel (with unlimited members) <tt>supergroup_id
--   Supergroup or channel identifier </tt>is_channel True, if the
--   supergroup is a channel
ChatTypeSupergroup :: Maybe Bool -> Maybe Int -> ChatType

[is_channel] :: ChatType -> Maybe Bool

[supergroup_id] :: ChatType -> Maybe Int

-- | A secret chat with a user <tt>secret_chat_id Secret chat identifier
--   </tt>user_id User identifier of the secret chat peer
ChatTypeSecret :: Maybe Int -> Maybe Int -> ChatType

[user_id] :: ChatType -> Maybe Int

[secret_chat_id] :: ChatType -> Maybe Int
instance GHC.Classes.Eq TD.Data.ChatType.ChatType
instance GHC.Show.Show TD.Data.ChatType.ChatType
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.ChatType.ChatType
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.ChatType.ChatType


module TD.Data.ChatStatisticsMessageSenderInfo

data ChatStatisticsMessageSenderInfo

-- | Contains statistics about messages sent by a user
ChatStatisticsMessageSenderInfo :: Maybe Int -> Maybe Int -> Maybe Int -> ChatStatisticsMessageSenderInfo

-- | Average number of characters in sent messages; 0 if unknown
[average_character_count] :: ChatStatisticsMessageSenderInfo -> Maybe Int

-- | Number of sent messages
[sent_message_count] :: ChatStatisticsMessageSenderInfo -> Maybe Int

-- | User identifier
[user_id] :: ChatStatisticsMessageSenderInfo -> Maybe Int
instance GHC.Classes.Eq TD.Data.ChatStatisticsMessageSenderInfo.ChatStatisticsMessageSenderInfo
instance GHC.Show.Show TD.Data.ChatStatisticsMessageSenderInfo.ChatStatisticsMessageSenderInfo
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.ChatStatisticsMessageSenderInfo.ChatStatisticsMessageSenderInfo
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.ChatStatisticsMessageSenderInfo.ChatStatisticsMessageSenderInfo


module TD.Data.ChatStatisticsMessageInteractionInfo

data ChatStatisticsMessageInteractionInfo

-- | Contains statistics about interactions with a message
ChatStatisticsMessageInteractionInfo :: Maybe Int -> Maybe Int -> Maybe Int -> ChatStatisticsMessageInteractionInfo

-- | Number of times the message was forwarded
[forward_count] :: ChatStatisticsMessageInteractionInfo -> Maybe Int

-- | Number of times the message was viewed
[view_count] :: ChatStatisticsMessageInteractionInfo -> Maybe Int

-- | Message identifier
[message_id] :: ChatStatisticsMessageInteractionInfo -> Maybe Int
instance GHC.Classes.Eq TD.Data.ChatStatisticsMessageInteractionInfo.ChatStatisticsMessageInteractionInfo
instance GHC.Show.Show TD.Data.ChatStatisticsMessageInteractionInfo.ChatStatisticsMessageInteractionInfo
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.ChatStatisticsMessageInteractionInfo.ChatStatisticsMessageInteractionInfo
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.ChatStatisticsMessageInteractionInfo.ChatStatisticsMessageInteractionInfo


module TD.Data.ChatStatisticsInviterInfo

data ChatStatisticsInviterInfo

-- | Contains statistics about number of new members invited by a user
ChatStatisticsInviterInfo :: Maybe Int -> Maybe Int -> ChatStatisticsInviterInfo

-- | Number of new members invited by the user
[added_member_count] :: ChatStatisticsInviterInfo -> Maybe Int

-- | User identifier
[user_id] :: ChatStatisticsInviterInfo -> Maybe Int
instance GHC.Classes.Eq TD.Data.ChatStatisticsInviterInfo.ChatStatisticsInviterInfo
instance GHC.Show.Show TD.Data.ChatStatisticsInviterInfo.ChatStatisticsInviterInfo
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.ChatStatisticsInviterInfo.ChatStatisticsInviterInfo
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.ChatStatisticsInviterInfo.ChatStatisticsInviterInfo


module TD.Data.ChatStatisticsAdministratorActionsInfo

data ChatStatisticsAdministratorActionsInfo

-- | Contains statistics about administrator actions done by a user
ChatStatisticsAdministratorActionsInfo :: Maybe Int -> Maybe Int -> Maybe Int -> Maybe Int -> ChatStatisticsAdministratorActionsInfo

-- | Number of users restricted by the administrator
[restricted_user_count] :: ChatStatisticsAdministratorActionsInfo -> Maybe Int

-- | Number of users banned by the administrator
[banned_user_count] :: ChatStatisticsAdministratorActionsInfo -> Maybe Int

-- | Number of messages deleted by the administrator
[deleted_message_count] :: ChatStatisticsAdministratorActionsInfo -> Maybe Int

-- | Administrator user identifier
[user_id] :: ChatStatisticsAdministratorActionsInfo -> Maybe Int
instance GHC.Classes.Eq TD.Data.ChatStatisticsAdministratorActionsInfo.ChatStatisticsAdministratorActionsInfo
instance GHC.Show.Show TD.Data.ChatStatisticsAdministratorActionsInfo.ChatStatisticsAdministratorActionsInfo
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.ChatStatisticsAdministratorActionsInfo.ChatStatisticsAdministratorActionsInfo
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.ChatStatisticsAdministratorActionsInfo.ChatStatisticsAdministratorActionsInfo


module TD.Data.ChatStatistics

-- | Contains a detailed statistics about a chat
data ChatStatistics

-- | A detailed statistics about a supergroup chat
ChatStatisticsSupergroup :: Maybe [ChatStatisticsInviterInfo] -> Maybe [ChatStatisticsAdministratorActionsInfo] -> Maybe [ChatStatisticsMessageSenderInfo] -> Maybe StatisticalGraph -> Maybe StatisticalGraph -> Maybe StatisticalGraph -> Maybe StatisticalGraph -> Maybe StatisticalGraph -> Maybe StatisticalGraph -> Maybe StatisticalGraph -> Maybe StatisticalGraph -> Maybe StatisticalValue -> Maybe StatisticalValue -> Maybe StatisticalValue -> Maybe StatisticalValue -> Maybe DateRange -> ChatStatistics

-- | List of most active inviters of new members in the last week
[top_inviters] :: ChatStatistics -> Maybe [ChatStatisticsInviterInfo]

-- | List of most active administrators in the last week
[top_administrators] :: ChatStatistics -> Maybe [ChatStatisticsAdministratorActionsInfo]

-- | List of users sent most messages in the last week
[top_senders] :: ChatStatistics -> Maybe [ChatStatisticsMessageSenderInfo]

-- | A graph containing distribution of message views per day of week
[week_graph] :: ChatStatistics -> Maybe StatisticalGraph

-- | A graph containing distribution of message views per hour
[day_graph] :: ChatStatistics -> Maybe StatisticalGraph

-- | A graph containing number of different actions in the chat
[action_graph] :: ChatStatistics -> Maybe StatisticalGraph

-- | A graph containing distribution of sent messages by content type
[message_content_graph] :: ChatStatistics -> Maybe StatisticalGraph

-- | A graph containing distribution of active users per language
[language_graph] :: ChatStatistics -> Maybe StatisticalGraph

-- | A graph containing number of new member joins per source
[join_by_source_graph] :: ChatStatistics -> Maybe StatisticalGraph

-- | A graph containing number of members joined and left the chat
[join_graph] :: ChatStatistics -> Maybe StatisticalGraph

-- | A graph containing number of members in the chat
[member_count_graph] :: ChatStatistics -> Maybe StatisticalGraph

-- | Number of users who sent messages to the chat
[sender_count] :: ChatStatistics -> Maybe StatisticalValue

-- | Number of users who viewed messages in the chat
[viewer_count] :: ChatStatistics -> Maybe StatisticalValue

-- | Number of messages sent to the chat
[message_count] :: ChatStatistics -> Maybe StatisticalValue

-- | Number of members in the chat
[member_count] :: ChatStatistics -> Maybe StatisticalValue

-- | A period to which the statistics applies
[period] :: ChatStatistics -> Maybe DateRange

-- | A detailed statistics about a channel chat
ChatStatisticsChannel :: Maybe [ChatStatisticsMessageInteractionInfo] -> Maybe StatisticalGraph -> Maybe StatisticalGraph -> Maybe StatisticalGraph -> Maybe StatisticalGraph -> Maybe StatisticalGraph -> Maybe StatisticalGraph -> Maybe StatisticalGraph -> Maybe StatisticalGraph -> Maybe StatisticalGraph -> Maybe Float -> Maybe StatisticalValue -> Maybe StatisticalValue -> Maybe StatisticalValue -> Maybe DateRange -> ChatStatistics

-- | Detailed statistics about number of views and shares of recently sent
--   messages
[recent_message_interactions] :: ChatStatistics -> Maybe [ChatStatisticsMessageInteractionInfo]

-- | A graph containing number of views of associated with the chat instant
--   views
[instant_view_interaction_graph] :: ChatStatistics -> Maybe StatisticalGraph

-- | A graph containing number of chat message views and shares
[message_interaction_graph] :: ChatStatistics -> Maybe StatisticalGraph

-- | A graph containing distribution of active users per language
[language_graph] :: ChatStatistics -> Maybe StatisticalGraph

-- | A graph containing number of new member joins per source
[join_by_source_graph] :: ChatStatistics -> Maybe StatisticalGraph

-- | A graph containing number of message views per source
[view_count_by_source_graph] :: ChatStatistics -> Maybe StatisticalGraph

-- | A graph containing number of message views in a given hour in the last
--   two weeks
[view_count_by_hour_graph] :: ChatStatistics -> Maybe StatisticalGraph

-- | A graph containing number of members muted and unmuted the chat
[mute_graph] :: ChatStatistics -> Maybe StatisticalGraph

-- | A graph containing number of members joined and left the chat
[join_graph] :: ChatStatistics -> Maybe StatisticalGraph

-- | A graph containing number of members in the chat
[member_count_graph] :: ChatStatistics -> Maybe StatisticalGraph

-- | A percentage of users with enabled notifications for the chat
[enabled_notifications_percentage] :: ChatStatistics -> Maybe Float

-- | Mean number of times the recently sent messages was shared
[mean_share_count] :: ChatStatistics -> Maybe StatisticalValue

-- | Mean number of times the recently sent messages was viewed
[mean_view_count] :: ChatStatistics -> Maybe StatisticalValue

-- | Number of members in the chat
[member_count] :: ChatStatistics -> Maybe StatisticalValue

-- | A period to which the statistics applies
[period] :: ChatStatistics -> Maybe DateRange
instance GHC.Classes.Eq TD.Data.ChatStatistics.ChatStatistics
instance GHC.Show.Show TD.Data.ChatStatistics.ChatStatistics
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.ChatStatistics.ChatStatistics
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.ChatStatistics.ChatStatistics


module TD.Data.ChatSource

-- | Describes a reason why an external chat is shown in a chat list
data ChatSource

-- | The chat is sponsored by the user's MTProxy server
ChatSourceMtprotoProxy :: ChatSource

-- | The chat contains a public service announcement <tt>type The type of
--   the announcement </tt>text The text of the announcement
ChatSourcePublicServiceAnnouncement :: Maybe String -> Maybe String -> ChatSource

[text] :: ChatSource -> Maybe String

[_type] :: ChatSource -> Maybe String
instance GHC.Classes.Eq TD.Data.ChatSource.ChatSource
instance GHC.Show.Show TD.Data.ChatSource.ChatSource
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.ChatSource.ChatSource
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.ChatSource.ChatSource


module TD.Data.ChatReportReason

-- | Describes the reason why a chat is reported
data ChatReportReason

-- | The chat contains spam messages
ChatReportReasonSpam :: ChatReportReason

-- | The chat promotes violence
ChatReportReasonViolence :: ChatReportReason

-- | The chat contains pornographic messages
ChatReportReasonPornography :: ChatReportReason

-- | The chat has child abuse related content
ChatReportReasonChildAbuse :: ChatReportReason

-- | The chat contains copyrighted content
ChatReportReasonCopyright :: ChatReportReason

-- | The location-based chat is unrelated to its stated location
ChatReportReasonUnrelatedLocation :: ChatReportReason

-- | The chat represents a fake account
ChatReportReasonFake :: ChatReportReason

-- | The chat has illegal drugs related content
ChatReportReasonIllegalDrugs :: ChatReportReason

-- | The chat contains messages with personal details
ChatReportReasonPersonalDetails :: ChatReportReason

-- | A custom reason provided by the user
ChatReportReasonCustom :: ChatReportReason
instance GHC.Classes.Eq TD.Data.ChatReportReason.ChatReportReason
instance GHC.Show.Show TD.Data.ChatReportReason.ChatReportReason
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.ChatReportReason.ChatReportReason
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.ChatReportReason.ChatReportReason


module TD.Query.ReportChatPhoto

-- | Reports a chat photo to the Telegram moderators. A chat photo can be
--   reported only if chat.can_be_reported
data ReportChatPhoto
ReportChatPhoto :: Maybe String -> Maybe ChatReportReason -> Maybe Int -> Maybe Int -> ReportChatPhoto

[text] :: ReportChatPhoto -> Maybe String

[reason] :: ReportChatPhoto -> Maybe ChatReportReason

[file_id] :: ReportChatPhoto -> Maybe Int

-- | Chat identifier <tt>file_id Identifier of the photo to report. Only
--   full photos from chatPhoto can be reported </tt>reason The reason for
--   reporting the chat photo @text Additional report details; 0-1024
--   characters
[chat_id] :: ReportChatPhoto -> Maybe Int
instance GHC.Classes.Eq TD.Query.ReportChatPhoto.ReportChatPhoto
instance GHC.Show.Show TD.Query.ReportChatPhoto.ReportChatPhoto
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ReportChatPhoto.ReportChatPhoto


module TD.Query.ReportChat

-- | Reports a chat to the Telegram moderators. A chat can be reported only
--   from the chat action bar, or if chat.can_be_reported
data ReportChat
ReportChat :: Maybe String -> Maybe ChatReportReason -> Maybe [Int] -> Maybe Int -> ReportChat

[text] :: ReportChat -> Maybe String

[reason] :: ReportChat -> Maybe ChatReportReason

[message_ids] :: ReportChat -> Maybe [Int]

-- | Chat identifier <tt>message_ids Identifiers of reported messages; may
--   be empty to report the whole chat </tt>reason The reason for reporting
--   the chat @text Additional report details; 0-1024 characters
[chat_id] :: ReportChat -> Maybe Int
instance GHC.Classes.Eq TD.Query.ReportChat.ReportChat
instance GHC.Show.Show TD.Query.ReportChat.ReportChat
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ReportChat.ReportChat


module TD.Data.ChatPhotoInfo

data ChatPhotoInfo

-- | Contains basic information about the photo of a chat
ChatPhotoInfo :: Maybe Bool -> Maybe Minithumbnail -> Maybe File -> Maybe File -> ChatPhotoInfo

-- | True, if the photo has animated variant
[has_animation] :: ChatPhotoInfo -> Maybe Bool

-- | Chat photo minithumbnail; may be null
[minithumbnail] :: ChatPhotoInfo -> Maybe Minithumbnail

-- | A big (640x640) chat photo variant in JPEG format. The file can be
--   downloaded only before the photo is changed
[big] :: ChatPhotoInfo -> Maybe File

-- | A small (160x160) chat photo variant in JPEG format. The file can be
--   downloaded only before the photo is changed
[small] :: ChatPhotoInfo -> Maybe File
instance GHC.Classes.Eq TD.Data.ChatPhotoInfo.ChatPhotoInfo
instance GHC.Show.Show TD.Data.ChatPhotoInfo.ChatPhotoInfo
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.ChatPhotoInfo.ChatPhotoInfo
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.ChatPhotoInfo.ChatPhotoInfo


module TD.Data.ChatPermissions

data ChatPermissions

-- | Describes actions that a user is allowed to take in a chat
ChatPermissions :: Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> ChatPermissions

-- | True, if the user can pin messages
[can_pin_messages] :: ChatPermissions -> Maybe Bool

-- | True, if the user can invite new users to the chat
[can_invite_users] :: ChatPermissions -> Maybe Bool

-- | True, if the user can change the chat title, photo, and other settings
[can_change_info] :: ChatPermissions -> Maybe Bool

-- | True, if the user may add a web page preview to their messages.
--   Implies can_send_messages permissions
[can_add_web_page_previews] :: ChatPermissions -> Maybe Bool

-- | True, if the user can send animations, games, stickers, and dice and
--   use inline bots. Implies can_send_messages permissions
[can_send_other_messages] :: ChatPermissions -> Maybe Bool

-- | True, if the user can send polls. Implies can_send_messages
--   permissions
[can_send_polls] :: ChatPermissions -> Maybe Bool

-- | True, if the user can send audio files, documents, photos, videos,
--   video notes, and voice notes. Implies can_send_messages permissions
[can_send_media_messages] :: ChatPermissions -> Maybe Bool

-- | True, if the user can send text messages, contacts, locations, and
--   venues
[can_send_messages] :: ChatPermissions -> Maybe Bool
instance GHC.Classes.Eq TD.Data.ChatPermissions.ChatPermissions
instance GHC.Show.Show TD.Data.ChatPermissions.ChatPermissions
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.ChatPermissions.ChatPermissions
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.ChatPermissions.ChatPermissions


module TD.Query.SetChatPermissions

-- | Changes the chat members permissions. Supported only for basic groups
--   and supergroups. Requires can_restrict_members administrator right
data SetChatPermissions
SetChatPermissions :: Maybe ChatPermissions -> Maybe Int -> SetChatPermissions

[permissions] :: SetChatPermissions -> Maybe ChatPermissions

-- | Chat identifier @permissions New non-administrator members permissions
--   in the chat
[chat_id] :: SetChatPermissions -> Maybe Int
instance GHC.Classes.Eq TD.Query.SetChatPermissions.SetChatPermissions
instance GHC.Show.Show TD.Query.SetChatPermissions.SetChatPermissions
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SetChatPermissions.SetChatPermissions


module TD.Data.ChatNotificationSettings

data ChatNotificationSettings

-- | Contains information about notification settings for a chat
ChatNotificationSettings :: Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Int -> Maybe Bool -> Maybe Int -> Maybe Bool -> ChatNotificationSettings

[disable_mention_notifications] :: ChatNotificationSettings -> Maybe Bool

-- | If true, disable_mention_notifications is ignored and the value for
--   the relevant type of chat is used instead
--   @disable_mention_notifications If true, notifications for messages
--   with mentions will be created as for an ordinary unread message
[use_default_disable_mention_notifications] :: ChatNotificationSettings -> Maybe Bool

[disable_pinned_message_notifications] :: ChatNotificationSettings -> Maybe Bool

-- | If true, disable_pinned_message_notifications is ignored and the value
--   for the relevant type of chat is used instead
--   @disable_pinned_message_notifications If true, notifications for
--   incoming pinned messages will be created as for an ordinary unread
--   message
[use_default_disable_pinned_message_notifications] :: ChatNotificationSettings -> Maybe Bool

[show_preview] :: ChatNotificationSettings -> Maybe Bool

-- | If true, show_preview is ignored and the value for the relevant type
--   of chat is used instead @show_preview True, if message content must be
--   displayed in notifications
[use_default_show_preview] :: ChatNotificationSettings -> Maybe Bool

[sound_id] :: ChatNotificationSettings -> Maybe Int

-- | If true, the value for the relevant type of chat is used instead of
--   sound_id @sound_id Identifier of the notification sound to be played;
--   0 if sound is disabled
[use_default_sound] :: ChatNotificationSettings -> Maybe Bool

[mute_for] :: ChatNotificationSettings -> Maybe Int

-- | If true, mute_for is ignored and the value for the relevant type of
--   chat is used instead @mute_for Time left before notifications will be
--   unmuted, in seconds
[use_default_mute_for] :: ChatNotificationSettings -> Maybe Bool
instance GHC.Classes.Eq TD.Data.ChatNotificationSettings.ChatNotificationSettings
instance GHC.Show.Show TD.Data.ChatNotificationSettings.ChatNotificationSettings
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.ChatNotificationSettings.ChatNotificationSettings
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.ChatNotificationSettings.ChatNotificationSettings


module TD.Query.SetChatNotificationSettings

-- | Changes the notification settings of a chat. Notification settings of
--   a chat with the current user (Saved Messages) can't be changed
data SetChatNotificationSettings
SetChatNotificationSettings :: Maybe ChatNotificationSettings -> Maybe Int -> SetChatNotificationSettings

[notification_settings] :: SetChatNotificationSettings -> Maybe ChatNotificationSettings

-- | Chat identifier @notification_settings New notification settings for
--   the chat. If the chat is muted for more than 1 week, it is considered
--   to be muted forever
[chat_id] :: SetChatNotificationSettings -> Maybe Int
instance GHC.Classes.Eq TD.Query.SetChatNotificationSettings.SetChatNotificationSettings
instance GHC.Show.Show TD.Query.SetChatNotificationSettings.SetChatNotificationSettings
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SetChatNotificationSettings.SetChatNotificationSettings


module TD.Data.ChatNearby

data ChatNearby

-- | Describes a chat located nearby <tt>chat_id Chat identifier
--   </tt>distance Distance to the chat location, in meters
ChatNearby :: Maybe Int -> Maybe Int -> ChatNearby

[distance] :: ChatNearby -> Maybe Int

[chat_id] :: ChatNearby -> Maybe Int
instance GHC.Classes.Eq TD.Data.ChatNearby.ChatNearby
instance GHC.Show.Show TD.Data.ChatNearby.ChatNearby
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.ChatNearby.ChatNearby
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.ChatNearby.ChatNearby


module TD.Data.ChatsNearby

data ChatsNearby

-- | Represents a list of chats located nearby <tt>users_nearby List of
--   users nearby </tt>supergroups_nearby List of location-based
--   supergroups nearby
ChatsNearby :: Maybe [ChatNearby] -> Maybe [ChatNearby] -> ChatsNearby

[supergroups_nearby] :: ChatsNearby -> Maybe [ChatNearby]

[users_nearby] :: ChatsNearby -> Maybe [ChatNearby]
instance GHC.Classes.Eq TD.Data.ChatsNearby.ChatsNearby
instance GHC.Show.Show TD.Data.ChatsNearby.ChatsNearby
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.ChatsNearby.ChatsNearby
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.ChatsNearby.ChatsNearby


module TD.Data.ChatMembersFilter

-- | Specifies the kind of chat members to return in searchChatMembers
data ChatMembersFilter

-- | Returns contacts of the user
ChatMembersFilterContacts :: ChatMembersFilter

-- | Returns the owner and administrators
ChatMembersFilterAdministrators :: ChatMembersFilter

-- | Returns all chat members, including restricted chat members
ChatMembersFilterMembers :: ChatMembersFilter

-- | Returns users which can be mentioned in the chat @message_thread_id If
--   non-zero, the identifier of the current message thread
ChatMembersFilterMention :: Maybe Int -> ChatMembersFilter

[message_thread_id] :: ChatMembersFilter -> Maybe Int

-- | Returns users under certain restrictions in the chat; can be used only
--   by administrators in a supergroup
ChatMembersFilterRestricted :: ChatMembersFilter

-- | Returns users banned from the chat; can be used only by administrators
--   in a supergroup or in a channel
ChatMembersFilterBanned :: ChatMembersFilter

-- | Returns bot members of the chat
ChatMembersFilterBots :: ChatMembersFilter
instance GHC.Classes.Eq TD.Data.ChatMembersFilter.ChatMembersFilter
instance GHC.Show.Show TD.Data.ChatMembersFilter.ChatMembersFilter
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.ChatMembersFilter.ChatMembersFilter
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.ChatMembersFilter.ChatMembersFilter


module TD.Query.SearchChatMembers

-- | Searches for a specified query in the first name, last name and
--   username of the members of a specified chat. Requires administrator
--   rights in channels
data SearchChatMembers
SearchChatMembers :: Maybe ChatMembersFilter -> Maybe Int -> Maybe String -> Maybe Int -> SearchChatMembers

-- | The type of users to search for; pass null to search among all chat
--   members
[_filter] :: SearchChatMembers -> Maybe ChatMembersFilter

-- | The maximum number of users to be returned; up to 200
[limit] :: SearchChatMembers -> Maybe Int

-- | Query to search for
[query] :: SearchChatMembers -> Maybe String

-- | Chat identifier
[chat_id] :: SearchChatMembers -> Maybe Int
instance GHC.Classes.Eq TD.Query.SearchChatMembers.SearchChatMembers
instance GHC.Show.Show TD.Query.SearchChatMembers.SearchChatMembers
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SearchChatMembers.SearchChatMembers


module TD.Data.ChatLocation

data ChatLocation

-- | Represents a location to which a chat is connected <tt>location The
--   location </tt>address Location address; 1-64 characters, as defined by
--   the chat owner
ChatLocation :: Maybe String -> Maybe Location -> ChatLocation

[address] :: ChatLocation -> Maybe String

[location] :: ChatLocation -> Maybe Location
instance GHC.Classes.Eq TD.Data.ChatLocation.ChatLocation
instance GHC.Show.Show TD.Data.ChatLocation.ChatLocation
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.ChatLocation.ChatLocation
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.ChatLocation.ChatLocation


module TD.Query.SetChatLocation

-- | Changes the location of a chat. Available only for some location-based
--   supergroups, use supergroupFullInfo.can_set_location to check whether
--   the method is allowed to use <tt>chat_id Chat identifier </tt>location
--   New location for the chat; must be valid and not null
data SetChatLocation
SetChatLocation :: Maybe ChatLocation -> Maybe Int -> SetChatLocation

[location] :: SetChatLocation -> Maybe ChatLocation

[chat_id] :: SetChatLocation -> Maybe Int
instance GHC.Classes.Eq TD.Query.SetChatLocation.SetChatLocation
instance GHC.Show.Show TD.Query.SetChatLocation.SetChatLocation
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SetChatLocation.SetChatLocation


module TD.Query.CreateNewSupergroupChat

-- | Creates a new supergroup or channel and sends a corresponding
--   messageSupergroupChatCreate. Returns the newly created chat
data CreateNewSupergroupChat
CreateNewSupergroupChat :: Maybe Bool -> Maybe ChatLocation -> Maybe String -> Maybe Bool -> Maybe String -> CreateNewSupergroupChat

-- | Pass true to create a supergroup for importing messages using
--   importMessage
[for_import] :: CreateNewSupergroupChat -> Maybe Bool

-- | Chat location if a location-based supergroup is being created; pass
--   null to create an ordinary supergroup chat
[location] :: CreateNewSupergroupChat -> Maybe ChatLocation

[description] :: CreateNewSupergroupChat -> Maybe String

-- | Pass true to create a channel chat
[is_channel] :: CreateNewSupergroupChat -> Maybe Bool

-- | Title of the new chat; 1-128 characters
[title] :: CreateNewSupergroupChat -> Maybe String
instance GHC.Classes.Eq TD.Query.CreateNewSupergroupChat.CreateNewSupergroupChat
instance GHC.Show.Show TD.Query.CreateNewSupergroupChat.CreateNewSupergroupChat
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.CreateNewSupergroupChat.CreateNewSupergroupChat


module TD.Data.ChatList

-- | Describes a list of chats
data ChatList

-- | A main list of chats
ChatListMain :: ChatList

-- | A list of chats usually located at the top of the main chat list.
--   Unmuted chats are automatically moved from the Archive to the Main
--   chat list when a new message arrives
ChatListArchive :: ChatList

-- | A list of chats belonging to a chat filter @chat_filter_id Chat filter
--   identifier
ChatListFilter :: Maybe Int -> ChatList

[chat_filter_id] :: ChatList -> Maybe Int
instance GHC.Classes.Eq TD.Data.ChatList.ChatList
instance GHC.Show.Show TD.Data.ChatList.ChatList
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.ChatList.ChatList
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.ChatList.ChatList


module TD.Query.ToggleChatIsPinned

-- | Changes the pinned state of a chat. There can be up to
--   GetOption("pinned_chat_count_max")<i>GetOption("pinned_archived_chat_count_max")
--   pinned non-secret chats and the same number of secret chats in the
--   main</i>archive chat list. The limit can be increased with Telegram
--   Premium
data ToggleChatIsPinned
ToggleChatIsPinned :: Maybe Bool -> Maybe Int -> Maybe ChatList -> ToggleChatIsPinned

[is_pinned] :: ToggleChatIsPinned -> Maybe Bool

[chat_id] :: ToggleChatIsPinned -> Maybe Int

-- | Chat list in which to change the pinned state of the chat <tt>chat_id
--   Chat identifier </tt>is_pinned Pass true to pin the chat; pass false
--   to unpin it
[chat_list] :: ToggleChatIsPinned -> Maybe ChatList
instance GHC.Classes.Eq TD.Query.ToggleChatIsPinned.ToggleChatIsPinned
instance GHC.Show.Show TD.Query.ToggleChatIsPinned.ToggleChatIsPinned
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ToggleChatIsPinned.ToggleChatIsPinned


module TD.Query.SetPinnedChats

-- | Changes the order of pinned chats <tt>chat_list Chat list in which to
--   change the order of pinned chats </tt>chat_ids The new list of pinned
--   chats
data SetPinnedChats
SetPinnedChats :: Maybe [Int] -> Maybe ChatList -> SetPinnedChats

[chat_ids] :: SetPinnedChats -> Maybe [Int]

[chat_list] :: SetPinnedChats -> Maybe ChatList
instance GHC.Classes.Eq TD.Query.SetPinnedChats.SetPinnedChats
instance GHC.Show.Show TD.Query.SetPinnedChats.SetPinnedChats
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SetPinnedChats.SetPinnedChats


module TD.Query.SearchMessages

-- | Searches for messages in all chats except secret chats. Returns the
--   results in reverse chronological order (i.e., in order of decreasing
--   (date, chat_id, message_id)). For optimal performance, the number of
--   returned messages is chosen by TDLib and can be smaller than the
--   specified limit
data SearchMessages
SearchMessages :: Maybe Int -> Maybe Int -> Maybe SearchMessagesFilter -> Maybe Int -> Maybe Int -> Maybe Int -> Maybe Int -> Maybe String -> Maybe ChatList -> SearchMessages

-- | If not 0, the maximum date of the messages to return
[max_date] :: SearchMessages -> Maybe Int

-- | If not 0, the minimum date of the messages to return
[min_date] :: SearchMessages -> Maybe Int

-- | Additional filter for messages to search; pass null to search for all
--   messages. Filters searchMessagesFilterMention,
--   searchMessagesFilterUnreadMention, searchMessagesFilterUnreadReaction,
--   searchMessagesFilterFailedToSend, and searchMessagesFilterPinned are
--   unsupported in this function
[_filter] :: SearchMessages -> Maybe SearchMessagesFilter

-- | The maximum number of messages to be returned; up to 100. For optimal
--   performance, the number of returned messages is chosen by TDLib and
--   can be smaller than the specified limit
[limit] :: SearchMessages -> Maybe Int

-- | The message identifier of the last found message, or 0 for the first
--   request
[offset_message_id] :: SearchMessages -> Maybe Int

-- | The chat identifier of the last found message, or 0 for the first
--   request
[offset_chat_id] :: SearchMessages -> Maybe Int

-- | The date of the message starting from which the results need to be
--   fetched. Use 0 or any date in the future to get results from the last
--   message
[offset_date] :: SearchMessages -> Maybe Int

-- | Query to search for
[query] :: SearchMessages -> Maybe String

-- | Chat list in which to search messages; pass null to search in all
--   chats regardless of their chat list. Only Main and Archive chat lists
--   are supported
[chat_list] :: SearchMessages -> Maybe ChatList
instance GHC.Classes.Eq TD.Query.SearchMessages.SearchMessages
instance GHC.Show.Show TD.Query.SearchMessages.SearchMessages
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SearchMessages.SearchMessages


module TD.Query.LoadChats

-- | Loads more chats from a chat list. The loaded chats and their
--   positions in the chat list will be sent through updates. Chats are
--   sorted by the pair (chat.position.order, chat.id) in descending order.
--   Returns a 404 error if all chats have been loaded
data LoadChats
LoadChats :: Maybe Int -> Maybe ChatList -> LoadChats

-- | The maximum number of chats to be loaded. For optimal performance, the
--   number of loaded chats is chosen by TDLib and can be smaller than the
--   specified limit, even if the end of the list is not reached
[limit] :: LoadChats -> Maybe Int

-- | The chat list in which to load chats; pass null to load chats from the
--   main chat list
[chat_list] :: LoadChats -> Maybe ChatList
instance GHC.Classes.Eq TD.Query.LoadChats.LoadChats
instance GHC.Show.Show TD.Query.LoadChats.LoadChats
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.LoadChats.LoadChats


module TD.Query.GetChats

-- | Returns an ordered list of chats from the beginning of a chat list.
--   For informational purposes only. Use loadChats and updates processing
--   instead to maintain chat lists in a consistent state
data GetChats
GetChats :: Maybe Int -> Maybe ChatList -> GetChats

[limit] :: GetChats -> Maybe Int

-- | The chat list in which to return chats; pass null to get chats from
--   the main chat list @limit The maximum number of chats to be returned
[chat_list] :: GetChats -> Maybe ChatList
instance GHC.Classes.Eq TD.Query.GetChats.GetChats
instance GHC.Show.Show TD.Query.GetChats.GetChats
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetChats.GetChats


module TD.Query.AddChatToList

-- | Adds a chat to a chat list. A chat can't be simultaneously in Main and
--   Archive chat lists, so it is automatically removed from another one if
--   needed
data AddChatToList
AddChatToList :: Maybe ChatList -> Maybe Int -> AddChatToList

[chat_list] :: AddChatToList -> Maybe ChatList

-- | Chat identifier @chat_list The chat list. Use getChatListsToAddChat to
--   get suitable chat lists
[chat_id] :: AddChatToList -> Maybe Int
instance GHC.Classes.Eq TD.Query.AddChatToList.AddChatToList
instance GHC.Show.Show TD.Query.AddChatToList.AddChatToList
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.AddChatToList.AddChatToList


module TD.Data.ChatPosition

data ChatPosition

-- | Describes a position of a chat in a chat list
ChatPosition :: Maybe ChatSource -> Maybe Bool -> Maybe Int -> Maybe ChatList -> ChatPosition

-- | Source of the chat in the chat list; may be null
[source] :: ChatPosition -> Maybe ChatSource

-- | True, if the chat is pinned in the chat list
[is_pinned] :: ChatPosition -> Maybe Bool

-- | A parameter used to determine order of the chat in the chat list.
--   Chats must be sorted by the pair (order, chat.id) in descending order
[order] :: ChatPosition -> Maybe Int

-- | The chat list
[list] :: ChatPosition -> Maybe ChatList
instance GHC.Classes.Eq TD.Data.ChatPosition.ChatPosition
instance GHC.Show.Show TD.Data.ChatPosition.ChatPosition
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.ChatPosition.ChatPosition
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.ChatPosition.ChatPosition


module TD.Data.ChatLists

data ChatLists

-- | Contains a list of chat lists @chat_lists List of chat lists
ChatLists :: Maybe [ChatList] -> ChatLists

[chat_lists] :: ChatLists -> Maybe [ChatList]
instance GHC.Classes.Eq TD.Data.ChatLists.ChatLists
instance GHC.Show.Show TD.Data.ChatLists.ChatLists
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.ChatLists.ChatLists
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.ChatLists.ChatLists


module TD.Data.ChatJoinRequestsInfo

data ChatJoinRequestsInfo

-- | Contains information about pending join requests for a chat
--   <tt>total_count Total number of pending join requests </tt>user_ids
--   Identifiers of at most 3 users sent the newest pending join requests
ChatJoinRequestsInfo :: Maybe [Int] -> Maybe Int -> ChatJoinRequestsInfo

[user_ids] :: ChatJoinRequestsInfo -> Maybe [Int]

[total_count] :: ChatJoinRequestsInfo -> Maybe Int
instance GHC.Classes.Eq TD.Data.ChatJoinRequestsInfo.ChatJoinRequestsInfo
instance GHC.Show.Show TD.Data.ChatJoinRequestsInfo.ChatJoinRequestsInfo
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.ChatJoinRequestsInfo.ChatJoinRequestsInfo
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.ChatJoinRequestsInfo.ChatJoinRequestsInfo


module TD.Data.ChatJoinRequest

data ChatJoinRequest

-- | Describes a user that sent a join request and waits for administrator
--   approval <tt>user_id User identifier </tt>date Point in time (Unix
--   timestamp) when the user sent the join request @bio A short bio of the
--   user
ChatJoinRequest :: Maybe String -> Maybe Int -> Maybe Int -> ChatJoinRequest

[bio] :: ChatJoinRequest -> Maybe String

[date] :: ChatJoinRequest -> Maybe Int

[user_id] :: ChatJoinRequest -> Maybe Int
instance GHC.Classes.Eq TD.Data.ChatJoinRequest.ChatJoinRequest
instance GHC.Show.Show TD.Data.ChatJoinRequest.ChatJoinRequest
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.ChatJoinRequest.ChatJoinRequest
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.ChatJoinRequest.ChatJoinRequest


module TD.Query.GetChatJoinRequests

-- | Returns pending join requests in a chat
data GetChatJoinRequests
GetChatJoinRequests :: Maybe Int -> Maybe ChatJoinRequest -> Maybe String -> Maybe String -> Maybe Int -> GetChatJoinRequests

-- | The maximum number of requests to join the chat to return
[limit] :: GetChatJoinRequests -> Maybe Int

-- | A chat join request from which to return next requests; pass null to
--   get results from the beginning
[offset_request] :: GetChatJoinRequests -> Maybe ChatJoinRequest

-- | A query to search for in the first names, last names and usernames of
--   the users to return
[query] :: GetChatJoinRequests -> Maybe String

-- | Invite link for which to return join requests. If empty, all join
--   requests will be returned. Requires administrator privileges and
--   can_invite_users right in the chat for own links and owner privileges
--   for other links
[invite_link] :: GetChatJoinRequests -> Maybe String

-- | Chat identifier
[chat_id] :: GetChatJoinRequests -> Maybe Int
instance GHC.Classes.Eq TD.Query.GetChatJoinRequests.GetChatJoinRequests
instance GHC.Show.Show TD.Query.GetChatJoinRequests.GetChatJoinRequests
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetChatJoinRequests.GetChatJoinRequests


module TD.Data.ChatJoinRequests

data ChatJoinRequests

-- | Contains a list of requests to join a chat <tt>total_count Approximate
--   total number of requests found </tt>requests List of the requests
ChatJoinRequests :: Maybe [ChatJoinRequest] -> Maybe Int -> ChatJoinRequests

[requests] :: ChatJoinRequests -> Maybe [ChatJoinRequest]

[total_count] :: ChatJoinRequests -> Maybe Int
instance GHC.Classes.Eq TD.Data.ChatJoinRequests.ChatJoinRequests
instance GHC.Show.Show TD.Data.ChatJoinRequests.ChatJoinRequests
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.ChatJoinRequests.ChatJoinRequests
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.ChatJoinRequests.ChatJoinRequests


module TD.Data.ChatInviteLinkMember

data ChatInviteLinkMember

-- | Describes a chat member joined a chat via an invite link <tt>user_id
--   User identifier </tt>joined_chat_date Point in time (Unix timestamp)
--   when the user joined the chat @approver_user_id User identifier of the
--   chat administrator, approved user join request
ChatInviteLinkMember :: Maybe Int -> Maybe Int -> Maybe Int -> ChatInviteLinkMember

[approver_user_id] :: ChatInviteLinkMember -> Maybe Int

[joined_chat_date] :: ChatInviteLinkMember -> Maybe Int

[user_id] :: ChatInviteLinkMember -> Maybe Int
instance GHC.Classes.Eq TD.Data.ChatInviteLinkMember.ChatInviteLinkMember
instance GHC.Show.Show TD.Data.ChatInviteLinkMember.ChatInviteLinkMember
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.ChatInviteLinkMember.ChatInviteLinkMember
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.ChatInviteLinkMember.ChatInviteLinkMember


module TD.Query.GetChatInviteLinkMembers

-- | Returns chat members joined a chat via an invite link. Requires
--   administrator privileges and can_invite_users right in the chat for
--   own links and owner privileges for other links <tt>chat_id Chat
--   identifier </tt>invite_link Invite link for which to return chat
--   members
data GetChatInviteLinkMembers
GetChatInviteLinkMembers :: Maybe Int -> Maybe ChatInviteLinkMember -> Maybe String -> Maybe Int -> GetChatInviteLinkMembers

[limit] :: GetChatInviteLinkMembers -> Maybe Int

-- | A chat member from which to return next chat members; pass null to get
--   results from the beginning @limit The maximum number of chat members
--   to return; up to 100
[offset_member] :: GetChatInviteLinkMembers -> Maybe ChatInviteLinkMember

[invite_link] :: GetChatInviteLinkMembers -> Maybe String

[chat_id] :: GetChatInviteLinkMembers -> Maybe Int
instance GHC.Classes.Eq TD.Query.GetChatInviteLinkMembers.GetChatInviteLinkMembers
instance GHC.Show.Show TD.Query.GetChatInviteLinkMembers.GetChatInviteLinkMembers
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetChatInviteLinkMembers.GetChatInviteLinkMembers


module TD.Data.ChatInviteLinkMembers

data ChatInviteLinkMembers

-- | Contains a list of chat members joined a chat via an invite link
--   <tt>total_count Approximate total number of chat members found
--   </tt>members List of chat members, joined a chat via an invite link
ChatInviteLinkMembers :: Maybe [ChatInviteLinkMember] -> Maybe Int -> ChatInviteLinkMembers

[members] :: ChatInviteLinkMembers -> Maybe [ChatInviteLinkMember]

[total_count] :: ChatInviteLinkMembers -> Maybe Int
instance GHC.Classes.Eq TD.Data.ChatInviteLinkMembers.ChatInviteLinkMembers
instance GHC.Show.Show TD.Data.ChatInviteLinkMembers.ChatInviteLinkMembers
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.ChatInviteLinkMembers.ChatInviteLinkMembers
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.ChatInviteLinkMembers.ChatInviteLinkMembers


module TD.Data.ChatInviteLinkInfo

data ChatInviteLinkInfo

-- | Contains information about a chat invite link
ChatInviteLinkInfo :: Maybe Bool -> Maybe Bool -> Maybe [Int] -> Maybe Int -> Maybe String -> Maybe ChatPhotoInfo -> Maybe String -> Maybe ChatType -> Maybe Int -> Maybe Int -> ChatInviteLinkInfo

-- | True, if the chat is a public supergroup or channel, i.e. it has a
--   username or it is a location-based supergroup
[is_public] :: ChatInviteLinkInfo -> Maybe Bool

-- | True, if the link only creates join request
[creates_join_request] :: ChatInviteLinkInfo -> Maybe Bool

-- | User identifiers of some chat members that may be known to the current
--   user
[member_user_ids] :: ChatInviteLinkInfo -> Maybe [Int]

-- | Number of members in the chat
[member_count] :: ChatInviteLinkInfo -> Maybe Int

[description] :: ChatInviteLinkInfo -> Maybe String

-- | Chat photo; may be null
[photo] :: ChatInviteLinkInfo -> Maybe ChatPhotoInfo

-- | Title of the chat
[title] :: ChatInviteLinkInfo -> Maybe String

-- | Type of the chat
[_type] :: ChatInviteLinkInfo -> Maybe ChatType

-- | If non-zero, the amount of time for which read access to the chat will
--   remain available, in seconds
[accessible_for] :: ChatInviteLinkInfo -> Maybe Int

-- | Chat identifier of the invite link; 0 if the user has no access to the
--   chat before joining
[chat_id] :: ChatInviteLinkInfo -> Maybe Int
instance GHC.Classes.Eq TD.Data.ChatInviteLinkInfo.ChatInviteLinkInfo
instance GHC.Show.Show TD.Data.ChatInviteLinkInfo.ChatInviteLinkInfo
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.ChatInviteLinkInfo.ChatInviteLinkInfo
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.ChatInviteLinkInfo.ChatInviteLinkInfo


module TD.Data.TMeUrlType

-- | Describes the type of a URL linking to an internal Telegram entity
data TMeUrlType

-- | A URL linking to a user @user_id Identifier of the user
TMeUrlTypeUser :: Maybe Int -> TMeUrlType

[user_id] :: TMeUrlType -> Maybe Int

-- | A URL linking to a public supergroup or channel @supergroup_id
--   Identifier of the supergroup or channel
TMeUrlTypeSupergroup :: Maybe Int -> TMeUrlType

[supergroup_id] :: TMeUrlType -> Maybe Int

-- | A chat invite link @info Information about the chat invite link
TMeUrlTypeChatInvite :: Maybe ChatInviteLinkInfo -> TMeUrlType

[info] :: TMeUrlType -> Maybe ChatInviteLinkInfo

-- | A URL linking to a sticker set @sticker_set_id Identifier of the
--   sticker set
TMeUrlTypeStickerSet :: Maybe Int -> TMeUrlType

[sticker_set_id] :: TMeUrlType -> Maybe Int
instance GHC.Classes.Eq TD.Data.TMeUrlType.TMeUrlType
instance GHC.Show.Show TD.Data.TMeUrlType.TMeUrlType
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.TMeUrlType.TMeUrlType
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.TMeUrlType.TMeUrlType


module TD.Data.TMeUrl

data TMeUrl

-- | Represents a URL linking to an internal Telegram entity <tt>url URL
--   </tt>type Type of the URL
TMeUrl :: Maybe TMeUrlType -> Maybe String -> TMeUrl

[_type] :: TMeUrl -> Maybe TMeUrlType

[url] :: TMeUrl -> Maybe String
instance GHC.Classes.Eq TD.Data.TMeUrl.TMeUrl
instance GHC.Show.Show TD.Data.TMeUrl.TMeUrl
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.TMeUrl.TMeUrl
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.TMeUrl.TMeUrl


module TD.Data.TMeUrls

data TMeUrls

-- | Contains a list of t.me URLs @urls List of URLs
TMeUrls :: Maybe [TMeUrl] -> TMeUrls

[urls] :: TMeUrls -> Maybe [TMeUrl]
instance GHC.Classes.Eq TD.Data.TMeUrls.TMeUrls
instance GHC.Show.Show TD.Data.TMeUrls.TMeUrls
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.TMeUrls.TMeUrls
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.TMeUrls.TMeUrls


module TD.Data.ChatInviteLinkCount

data ChatInviteLinkCount

-- | Describes a chat administrator with a number of active and revoked
--   chat invite links
ChatInviteLinkCount :: Maybe Int -> Maybe Int -> Maybe Int -> ChatInviteLinkCount

-- | Number of revoked invite links
[revoked_invite_link_count] :: ChatInviteLinkCount -> Maybe Int

-- | Number of active invite links
[invite_link_count] :: ChatInviteLinkCount -> Maybe Int

-- | Administrator's user identifier
[user_id] :: ChatInviteLinkCount -> Maybe Int
instance GHC.Classes.Eq TD.Data.ChatInviteLinkCount.ChatInviteLinkCount
instance GHC.Show.Show TD.Data.ChatInviteLinkCount.ChatInviteLinkCount
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.ChatInviteLinkCount.ChatInviteLinkCount
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.ChatInviteLinkCount.ChatInviteLinkCount


module TD.Data.ChatInviteLinkCounts

data ChatInviteLinkCounts

-- | Contains a list of chat invite link counts @invite_link_counts List of
--   invite link counts
ChatInviteLinkCounts :: Maybe [ChatInviteLinkCount] -> ChatInviteLinkCounts

[invite_link_counts] :: ChatInviteLinkCounts -> Maybe [ChatInviteLinkCount]
instance GHC.Classes.Eq TD.Data.ChatInviteLinkCounts.ChatInviteLinkCounts
instance GHC.Show.Show TD.Data.ChatInviteLinkCounts.ChatInviteLinkCounts
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.ChatInviteLinkCounts.ChatInviteLinkCounts
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.ChatInviteLinkCounts.ChatInviteLinkCounts


module TD.Data.ChatInviteLink

data ChatInviteLink

-- | Contains a chat invite link
ChatInviteLink :: Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Int -> Maybe Int -> Maybe Int -> Maybe Int -> Maybe Int -> Maybe Int -> Maybe Int -> Maybe String -> Maybe String -> ChatInviteLink

-- | True, if the link was revoked
[is_revoked] :: ChatInviteLink -> Maybe Bool

-- | True, if the link is primary. Primary invite link can't have name,
--   expiration date, or usage limit. There is exactly one primary invite
--   link for each administrator with can_invite_users right at a given
--   time
[is_primary] :: ChatInviteLink -> Maybe Bool

-- | True, if the link only creates join request. If true, total number of
--   joining members will be unlimited
[creates_join_request] :: ChatInviteLink -> Maybe Bool

-- | Number of pending join requests created using this link
[pending_join_request_count] :: ChatInviteLink -> Maybe Int

-- | Number of chat members, which joined the chat using the link
[member_count] :: ChatInviteLink -> Maybe Int

-- | The maximum number of members, which can join the chat using the link
--   simultaneously; 0 if not limited. Always 0 if the link requires
--   approval
[member_limit] :: ChatInviteLink -> Maybe Int

-- | Point in time (Unix timestamp) when the link will expire; 0 if never
[expiration_date] :: ChatInviteLink -> Maybe Int

-- | Point in time (Unix timestamp) when the link was last edited; 0 if
--   never or unknown
[edit_date] :: ChatInviteLink -> Maybe Int

-- | Point in time (Unix timestamp) when the link was created
[date] :: ChatInviteLink -> Maybe Int

-- | User identifier of an administrator created the link
[creator_user_id] :: ChatInviteLink -> Maybe Int

-- | Name of the link
[name] :: ChatInviteLink -> Maybe String

-- | Chat invite link
[invite_link] :: ChatInviteLink -> Maybe String
instance GHC.Classes.Eq TD.Data.ChatInviteLink.ChatInviteLink
instance GHC.Show.Show TD.Data.ChatInviteLink.ChatInviteLink
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.ChatInviteLink.ChatInviteLink
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.ChatInviteLink.ChatInviteLink


module TD.Data.ChatInviteLinks

data ChatInviteLinks

-- | Contains a list of chat invite links <tt>total_count Approximate total
--   number of chat invite links found </tt>invite_links List of invite
--   links
ChatInviteLinks :: Maybe [ChatInviteLink] -> Maybe Int -> ChatInviteLinks

[invite_links] :: ChatInviteLinks -> Maybe [ChatInviteLink]

[total_count] :: ChatInviteLinks -> Maybe Int
instance GHC.Classes.Eq TD.Data.ChatInviteLinks.ChatInviteLinks
instance GHC.Show.Show TD.Data.ChatInviteLinks.ChatInviteLinks
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.ChatInviteLinks.ChatInviteLinks
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.ChatInviteLinks.ChatInviteLinks


module TD.Data.ChatFilterInfo

data ChatFilterInfo

-- | Contains basic information about a chat filter
ChatFilterInfo :: Maybe String -> Maybe String -> Maybe Int -> ChatFilterInfo

-- | The chosen or default icon name for short filter representation. One
--   of <a>All</a>, <a>Unread</a>, <a>Unmuted</a>, <a>Bots</a>,
--   <a>Channels</a>, <a>Groups</a>, <a>Private</a>, <a>Custom</a>,
--   <a>Setup</a>, <a>Cat</a>, <a>Crown</a>, <a>Favorite</a>,
--   <a>Flower</a>, <a>Game</a>, <a>Home</a>, <a>Love</a>, <a>Mask</a>,
--   <a>Party</a>, <a>Sport</a>, <a>Study</a>, <a>Trade</a>, <a>Travel</a>,
--   <a>Work</a>, <a>Airplane</a>, <a>Book</a>, <a>Light</a>, <a>Like</a>,
--   <a>Money</a>, <a>Note</a>, <a>Palette</a>
[icon_name] :: ChatFilterInfo -> Maybe String

-- | The title of the filter; 1-12 characters without line feeds
[title] :: ChatFilterInfo -> Maybe String

-- | Unique chat filter identifier
[_id] :: ChatFilterInfo -> Maybe Int
instance GHC.Classes.Eq TD.Data.ChatFilterInfo.ChatFilterInfo
instance GHC.Show.Show TD.Data.ChatFilterInfo.ChatFilterInfo
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.ChatFilterInfo.ChatFilterInfo
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.ChatFilterInfo.ChatFilterInfo


module TD.Data.ChatFilter

data ChatFilter

-- | Represents a filter of user chats
ChatFilter :: Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe [Int] -> Maybe [Int] -> Maybe [Int] -> Maybe String -> Maybe String -> ChatFilter

-- | True, if channels need to be included
[include_channels] :: ChatFilter -> Maybe Bool

-- | True, if basic groups and supergroups need to be included
[include_groups] :: ChatFilter -> Maybe Bool

-- | True, if bots need to be included
[include_bots] :: ChatFilter -> Maybe Bool

-- | True, if non-contact users need to be included
[include_non_contacts] :: ChatFilter -> Maybe Bool

-- | True, if contacts need to be included
[include_contacts] :: ChatFilter -> Maybe Bool

-- | True, if archived chats need to be excluded
[exclude_archived] :: ChatFilter -> Maybe Bool

-- | True, if read chats need to be excluded
[exclude_read] :: ChatFilter -> Maybe Bool

-- | True, if muted chats need to be excluded
[exclude_muted] :: ChatFilter -> Maybe Bool

-- | The chat identifiers of always excluded chats in the filtered chat
--   list. There can be up to
--   GetOption("chat_filter_chosen_chat_count_max") always excluded
--   non-secret chats and the same number of secret chats, but the limit
--   can be increased with Telegram Premium
[excluded_chat_ids] :: ChatFilter -> Maybe [Int]

-- | The chat identifiers of always included chats in the filtered chat
--   list. There can be up to
--   GetOption("chat_filter_chosen_chat_count_max") pinned and always
--   included non-secret chats and the same number of secret chats, but the
--   limit can be increased with Telegram Premium
[included_chat_ids] :: ChatFilter -> Maybe [Int]

-- | The chat identifiers of pinned chats in the filtered chat list. There
--   can be up to GetOption("chat_filter_chosen_chat_count_max") pinned and
--   always included non-secret chats and the same number of secret chats,
--   but the limit can be increased with Telegram Premium
[pinned_chat_ids] :: ChatFilter -> Maybe [Int]

-- | The chosen icon name for short filter representation. If non-empty,
--   must be one of <a>All</a>, <a>Unread</a>, <a>Unmuted</a>, <a>Bots</a>,
--   <a>Channels</a>, <a>Groups</a>, <a>Private</a>, <a>Custom</a>,
--   <a>Setup</a>, <a>Cat</a>, <a>Crown</a>, <a>Favorite</a>,
--   <a>Flower</a>, <a>Game</a>, <a>Home</a>, <a>Love</a>, <a>Mask</a>,
--   <a>Party</a>, <a>Sport</a>, <a>Study</a>, <a>Trade</a>, <a>Travel</a>,
--   <a>Work</a>, <a>Airplane</a>, <a>Book</a>, <a>Light</a>, <a>Like</a>,
--   <a>Money</a>, <a>Note</a>, <a>Palette</a>. If empty, use
--   getChatFilterDefaultIconName to get default icon name for the filter
[icon_name] :: ChatFilter -> Maybe String

-- | The title of the filter; 1-12 characters without line feeds
[title] :: ChatFilter -> Maybe String
instance GHC.Classes.Eq TD.Data.ChatFilter.ChatFilter
instance GHC.Show.Show TD.Data.ChatFilter.ChatFilter
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.ChatFilter.ChatFilter
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.ChatFilter.ChatFilter


module TD.Query.GetChatFilterDefaultIconName

-- | Returns default icon name for a filter. Can be called synchronously
--   @filter Chat filter
data GetChatFilterDefaultIconName
GetChatFilterDefaultIconName :: Maybe ChatFilter -> GetChatFilterDefaultIconName

[_filter] :: GetChatFilterDefaultIconName -> Maybe ChatFilter
instance GHC.Classes.Eq TD.Query.GetChatFilterDefaultIconName.GetChatFilterDefaultIconName
instance GHC.Show.Show TD.Query.GetChatFilterDefaultIconName.GetChatFilterDefaultIconName
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetChatFilterDefaultIconName.GetChatFilterDefaultIconName


module TD.Query.EditChatFilter

-- | Edits existing chat filter. Returns information about the edited chat
--   filter <tt>chat_filter_id Chat filter identifier </tt>filter The
--   edited chat filter
data EditChatFilter
EditChatFilter :: Maybe ChatFilter -> Maybe Int -> EditChatFilter

[_filter] :: EditChatFilter -> Maybe ChatFilter

[chat_filter_id] :: EditChatFilter -> Maybe Int
instance GHC.Classes.Eq TD.Query.EditChatFilter.EditChatFilter
instance GHC.Show.Show TD.Query.EditChatFilter.EditChatFilter
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.EditChatFilter.EditChatFilter


module TD.Query.CreateChatFilter

-- | Creates new chat filter. Returns information about the created chat
--   filter. There can be up to GetOption("chat_filter_count_max") chat
--   filters, but the limit can be increased with Telegram Premium @filter
--   Chat filter
data CreateChatFilter
CreateChatFilter :: Maybe ChatFilter -> CreateChatFilter

[_filter] :: CreateChatFilter -> Maybe ChatFilter
instance GHC.Classes.Eq TD.Query.CreateChatFilter.CreateChatFilter
instance GHC.Show.Show TD.Query.CreateChatFilter.CreateChatFilter
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.CreateChatFilter.CreateChatFilter


module TD.Data.RecommendedChatFilter

data RecommendedChatFilter

-- | Describes a recommended chat filter <tt>filter The chat filter
--   </tt>param_description Chat filter description
RecommendedChatFilter :: Maybe String -> Maybe ChatFilter -> RecommendedChatFilter

[description] :: RecommendedChatFilter -> Maybe String

[_filter] :: RecommendedChatFilter -> Maybe ChatFilter
instance GHC.Classes.Eq TD.Data.RecommendedChatFilter.RecommendedChatFilter
instance GHC.Show.Show TD.Data.RecommendedChatFilter.RecommendedChatFilter
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.RecommendedChatFilter.RecommendedChatFilter
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.RecommendedChatFilter.RecommendedChatFilter


module TD.Data.RecommendedChatFilters

data RecommendedChatFilters

-- | Contains a list of recommended chat filters @chat_filters List of
--   recommended chat filters
RecommendedChatFilters :: Maybe [RecommendedChatFilter] -> RecommendedChatFilters

[chat_filters] :: RecommendedChatFilters -> Maybe [RecommendedChatFilter]
instance GHC.Classes.Eq TD.Data.RecommendedChatFilters.RecommendedChatFilters
instance GHC.Show.Show TD.Data.RecommendedChatFilters.RecommendedChatFilters
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.RecommendedChatFilters.RecommendedChatFilters
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.RecommendedChatFilters.RecommendedChatFilters


module TD.Data.ChatEventLogFilters

data ChatEventLogFilters

-- | Represents a set of filters used to obtain a chat event log
ChatEventLogFilters :: Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> ChatEventLogFilters

-- | True, if video chat actions need to be returned
[video_chat_changes] :: ChatEventLogFilters -> Maybe Bool

-- | True, if changes to invite links need to be returned
[invite_link_changes] :: ChatEventLogFilters -> Maybe Bool

-- | True, if changes in chat settings need to be returned
[setting_changes] :: ChatEventLogFilters -> Maybe Bool

-- | True, if changes in chat information need to be returned
[info_changes] :: ChatEventLogFilters -> Maybe Bool

-- | True, if member restricted<i>unrestricted</i>banned/unbanned events
--   need to be returned
[member_restrictions] :: ChatEventLogFilters -> Maybe Bool

-- | True, if member promotion/demotion events need to be returned
[member_promotions] :: ChatEventLogFilters -> Maybe Bool

-- | True, if invited member events need to be returned
[member_invites] :: ChatEventLogFilters -> Maybe Bool

-- | True, if members leaving events need to be returned
[member_leaves] :: ChatEventLogFilters -> Maybe Bool

-- | True, if members joining events need to be returned
[member_joins] :: ChatEventLogFilters -> Maybe Bool

-- | True, if pin/unpin events need to be returned
[message_pins] :: ChatEventLogFilters -> Maybe Bool

-- | True, if message deletions need to be returned
[message_deletions] :: ChatEventLogFilters -> Maybe Bool

-- | True, if message edits need to be returned
[message_edits] :: ChatEventLogFilters -> Maybe Bool
instance GHC.Classes.Eq TD.Data.ChatEventLogFilters.ChatEventLogFilters
instance GHC.Show.Show TD.Data.ChatEventLogFilters.ChatEventLogFilters
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.ChatEventLogFilters.ChatEventLogFilters
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.ChatEventLogFilters.ChatEventLogFilters


module TD.Query.GetChatEventLog

-- | Returns a list of service actions taken by chat members and
--   administrators in the last 48 hours. Available only for supergroups
--   and channels. Requires administrator rights. Returns results in
--   reverse chronological order (i. e., in order of decreasing event_id)
data GetChatEventLog
GetChatEventLog :: Maybe [Int] -> Maybe ChatEventLogFilters -> Maybe Int -> Maybe Int -> Maybe String -> Maybe Int -> GetChatEventLog

[user_ids] :: GetChatEventLog -> Maybe [Int]

-- | The types of events to return; pass null to get chat events of all
--   types @user_ids User identifiers by which to filter events. By
--   default, events relating to all users will be returned
[filters] :: GetChatEventLog -> Maybe ChatEventLogFilters

[limit] :: GetChatEventLog -> Maybe Int

[from_event_id] :: GetChatEventLog -> Maybe Int

[query] :: GetChatEventLog -> Maybe String

-- | Chat identifier <tt>query Search query by which to filter events
--   </tt>from_event_id Identifier of an event from which to return
--   results. Use 0 to get results from the latest events @limit The
--   maximum number of events to return; up to 100
[chat_id] :: GetChatEventLog -> Maybe Int
instance GHC.Classes.Eq TD.Query.GetChatEventLog.GetChatEventLog
instance GHC.Show.Show TD.Query.GetChatEventLog.GetChatEventLog
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetChatEventLog.GetChatEventLog


module TD.Data.ChatAdministratorRights

data ChatAdministratorRights

-- | Describes rights of the administrator
ChatAdministratorRights :: Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> ChatAdministratorRights

-- | True, if the administrator isn't shown in the chat member list and
--   sends messages anonymously; applicable to supergroups only
[is_anonymous] :: ChatAdministratorRights -> Maybe Bool

-- | True, if the administrator can manage video chats
[can_manage_video_chats] :: ChatAdministratorRights -> Maybe Bool

-- | True, if the administrator can add new administrators with a subset of
--   their own privileges or demote administrators that were directly or
--   indirectly promoted by them
[can_promote_members] :: ChatAdministratorRights -> Maybe Bool

-- | True, if the administrator can pin messages; applicable to basic
--   groups and supergroups only
[can_pin_messages] :: ChatAdministratorRights -> Maybe Bool

-- | True, if the administrator can restrict, ban, or unban chat members;
--   always true for channels
[can_restrict_members] :: ChatAdministratorRights -> Maybe Bool

-- | True, if the administrator can invite new users to the chat
[can_invite_users] :: ChatAdministratorRights -> Maybe Bool

-- | True, if the administrator can delete messages of other users
[can_delete_messages] :: ChatAdministratorRights -> Maybe Bool

-- | True, if the administrator can edit messages of other users and pin
--   messages; applicable to channels only
[can_edit_messages] :: ChatAdministratorRights -> Maybe Bool

-- | True, if the administrator can create channel posts; applicable to
--   channels only
[can_post_messages] :: ChatAdministratorRights -> Maybe Bool

-- | True, if the administrator can change the chat title, photo, and other
--   settings
[can_change_info] :: ChatAdministratorRights -> Maybe Bool

-- | True, if the administrator can get chat event log, get chat
--   statistics, get message statistics in channels, get channel members,
--   see anonymous administrators in supergroups and ignore slow mode.
--   Implied by any other privilege; applicable to supergroups and channels
--   only
[can_manage_chat] :: ChatAdministratorRights -> Maybe Bool
instance GHC.Classes.Eq TD.Data.ChatAdministratorRights.ChatAdministratorRights
instance GHC.Show.Show TD.Data.ChatAdministratorRights.ChatAdministratorRights
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.ChatAdministratorRights.ChatAdministratorRights
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.ChatAdministratorRights.ChatAdministratorRights


module TD.Query.SetDefaultGroupAdministratorRights

-- | Sets default administrator rights for adding the bot to basic group
--   and supergroup chats; for bots only
--   @default_group_administrator_rights Default administrator rights for
--   adding the bot to basic group and supergroup chats; may be null
data SetDefaultGroupAdministratorRights
SetDefaultGroupAdministratorRights :: Maybe ChatAdministratorRights -> SetDefaultGroupAdministratorRights

[default_group_administrator_rights] :: SetDefaultGroupAdministratorRights -> Maybe ChatAdministratorRights
instance GHC.Classes.Eq TD.Query.SetDefaultGroupAdministratorRights.SetDefaultGroupAdministratorRights
instance GHC.Show.Show TD.Query.SetDefaultGroupAdministratorRights.SetDefaultGroupAdministratorRights
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SetDefaultGroupAdministratorRights.SetDefaultGroupAdministratorRights


module TD.Query.SetDefaultChannelAdministratorRights

-- | Sets default administrator rights for adding the bot to channel chats;
--   for bots only @default_channel_administrator_rights Default
--   administrator rights for adding the bot to channels; may be null
data SetDefaultChannelAdministratorRights
SetDefaultChannelAdministratorRights :: Maybe ChatAdministratorRights -> SetDefaultChannelAdministratorRights

[default_channel_administrator_rights] :: SetDefaultChannelAdministratorRights -> Maybe ChatAdministratorRights
instance GHC.Classes.Eq TD.Query.SetDefaultChannelAdministratorRights.SetDefaultChannelAdministratorRights
instance GHC.Show.Show TD.Query.SetDefaultChannelAdministratorRights.SetDefaultChannelAdministratorRights
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SetDefaultChannelAdministratorRights.SetDefaultChannelAdministratorRights


module TD.Data.InternalLinkType

-- | Describes an internal <a>https://t.me</a> or tg: link, which must be
--   processed by the application in a special way
data InternalLinkType

-- | The link is a link to the active sessions section of the application.
--   Use getActiveSessions to handle the link
InternalLinkTypeActiveSessions :: InternalLinkType

-- | The link is a link to an attachment menu bot to be opened in the
--   specified or a chosen chat. Process given target_chat to open the
--   chat. Then call searchPublicChat with the given bot username, check
--   that the user is a bot and can be added to attachment menu. Then use
--   getAttachmentMenuBot to receive information about the bot. If the bot
--   isn't added to attachment menu, then user needs to confirm adding the
--   bot to attachment menu. If user confirms adding, then use
--   toggleBotIsAddedToAttachmentMenu to add it. If the attachment menu bot
--   can't be used in the opened chat, show an error to the user. If the
--   bot is added to attachment menu and can be used in the chat, then use
--   openWebApp with the given URL
InternalLinkTypeAttachmentMenuBot :: Maybe String -> Maybe String -> Maybe TargetChat -> InternalLinkType

[url] :: InternalLinkType -> Maybe String

[bot_username] :: InternalLinkType -> Maybe String

-- | Target chat to be opened <tt>bot_username Username of the bot </tt>url
--   URL to be passed to openWebApp
[target_chat] :: InternalLinkType -> Maybe TargetChat

-- | The link contains an authentication code. Call checkAuthenticationCode
--   with the code if the current authorization state is
--   authorizationStateWaitCode @code The authentication code
InternalLinkTypeAuthenticationCode :: Maybe String -> InternalLinkType

[code] :: InternalLinkType -> Maybe String

-- | The link is a link to a background. Call searchBackground with the
--   given background name to process the link @background_name Name of the
--   background
InternalLinkTypeBackground :: Maybe String -> InternalLinkType

[background_name] :: InternalLinkType -> Maybe String

-- | The link is a link to a chat with a Telegram bot. Call
--   searchPublicChat with the given bot username, check that the user is a
--   bot, show START button in the chat with the bot, and then call
--   sendBotStartMessage with the given start parameter after the button is
--   pressed
InternalLinkTypeBotStart :: Maybe Bool -> Maybe String -> Maybe String -> InternalLinkType

-- | True, if sendBotStartMessage must be called automatically without
--   showing the START button
[autostart] :: InternalLinkType -> Maybe Bool

[start_parameter] :: InternalLinkType -> Maybe String

[bot_username] :: InternalLinkType -> Maybe String

-- | The link is a link to a Telegram bot, which is supposed to be added to
--   a group chat. Call searchPublicChat with the given bot username, check
--   that the user is a bot and can be added to groups, ask the current
--   user to select a basic group or a supergroup chat to add the bot to,
--   taking into account that bots can be added to a public supergroup only
--   by administrators of the supergroup. If administrator rights are
--   provided by the link, call getChatMember to receive the current bot
--   rights in the chat and if the bot already is an administrator, check
--   that the current user can edit its administrator rights, combine
--   received rights with the requested administrator rights, show
--   confirmation box to the user, and call setChatMemberStatus with the
--   chosen chat and confirmed administrator rights. Before call to
--   setChatMemberStatus it may be required to upgrade the chosen basic
--   group chat to a supergroup chat. Then if start_parameter isn't empty,
--   call sendBotStartMessage with the given start parameter and the chosen
--   chat, otherwise just send /start message with bot's username added to
--   the chat.
InternalLinkTypeBotStartInGroup :: Maybe ChatAdministratorRights -> Maybe String -> Maybe String -> InternalLinkType

[administrator_rights] :: InternalLinkType -> Maybe ChatAdministratorRights

[start_parameter] :: InternalLinkType -> Maybe String

[bot_username] :: InternalLinkType -> Maybe String

-- | The link is a link to a Telegram bot, which is supposed to be added to
--   a channel chat as an administrator. Call searchPublicChat with the
--   given bot username and check that the user is a bot, ask the current
--   user to select a channel chat to add the bot to as an administrator.
--   Then call getChatMember to receive the current bot rights in the chat
--   and if the bot already is an administrator, check that the current
--   user can edit its administrator rights and combine received rights
--   with the requested administrator rights. Then show confirmation box to
--   the user, and call setChatMemberStatus with the chosen chat and
--   confirmed rights
InternalLinkTypeBotAddToChannel :: Maybe ChatAdministratorRights -> Maybe String -> InternalLinkType

[administrator_rights] :: InternalLinkType -> Maybe ChatAdministratorRights

[bot_username] :: InternalLinkType -> Maybe String

-- | The link is a link to the change phone number section of the app
InternalLinkTypeChangePhoneNumber :: InternalLinkType

-- | The link is a chat invite link. Call checkChatInviteLink with the
--   given invite link to process the link @invite_link Internal
--   representation of the invite link
InternalLinkTypeChatInvite :: Maybe String -> InternalLinkType

[invite_link] :: InternalLinkType -> Maybe String

-- | The link is a link to the filter settings section of the app
InternalLinkTypeFilterSettings :: InternalLinkType

-- | The link is a link to a game. Call searchPublicChat with the given bot
--   username, check that the user is a bot, ask the current user to select
--   a chat to send the game, and then call sendMessage with
--   inputMessageGame
InternalLinkTypeGame :: Maybe String -> Maybe String -> InternalLinkType

[game_short_name] :: InternalLinkType -> Maybe String

[bot_username] :: InternalLinkType -> Maybe String

-- | The link is a link to an invoice. Call getPaymentForm with the given
--   invoice name to process the link @invoice_name Name of the invoice
InternalLinkTypeInvoice :: Maybe String -> InternalLinkType

[invoice_name] :: InternalLinkType -> Maybe String

-- | The link is a link to a language pack. Call getLanguagePackInfo with
--   the given language pack identifier to process the link
--   @language_pack_id Language pack identifier
InternalLinkTypeLanguagePack :: Maybe String -> InternalLinkType

[language_pack_id] :: InternalLinkType -> Maybe String

-- | The link is a link to the language settings section of the app
InternalLinkTypeLanguageSettings :: InternalLinkType

-- | The link is a link to a Telegram message. Call getMessageLinkInfo with
--   the given URL to process the link @url URL to be passed to
--   getMessageLinkInfo
InternalLinkTypeMessage :: Maybe String -> InternalLinkType

[url] :: InternalLinkType -> Maybe String

-- | The link contains a message draft text. A share screen needs to be
--   shown to the user, then the chosen chat must be opened and the text is
--   added to the input field
InternalLinkTypeMessageDraft :: Maybe Bool -> Maybe FormattedText -> InternalLinkType

[contains_link] :: InternalLinkType -> Maybe Bool

-- | Message draft text @contains_link True, if the first line of the text
--   contains a link. If true, the input field needs to be focused and the
--   text after the link must be selected
[text] :: InternalLinkType -> Maybe FormattedText

-- | The link contains a request of Telegram passport data. Call
--   getPassportAuthorizationForm with the given parameters to process the
--   link if the link was received from outside of the application,
--   otherwise ignore it
InternalLinkTypePassportDataRequest :: Maybe String -> Maybe String -> Maybe String -> Maybe String -> Maybe Int -> InternalLinkType

-- | An HTTP URL to open once the request is finished or canceled with the
--   parameter tg_passport=success or tg_passport=cancel respectively. If
--   empty, then the link tgbot{bot_user_id}:/<i>passport</i>success or
--   tgbot{bot_user_id}:/<i>passport</i>cancel needs to be opened instead
[callback_url] :: InternalLinkType -> Maybe String

[nonce] :: InternalLinkType -> Maybe String

[public_key] :: InternalLinkType -> Maybe String

[scope] :: InternalLinkType -> Maybe String

-- | User identifier of the service's bot <tt>scope Telegram Passport
--   element types requested by the service </tt>public_key Service's
--   public key @nonce Unique request identifier provided by the service
[bot_user_id] :: InternalLinkType -> Maybe Int

-- | The link can be used to confirm ownership of a phone number to prevent
--   account deletion. Call sendPhoneNumberConfirmationCode with the given
--   hash and phone number to process the link
InternalLinkTypePhoneNumberConfirmation :: Maybe String -> Maybe String -> InternalLinkType

[phone_number] :: InternalLinkType -> Maybe String

-- | Hash value from the link @phone_number Phone number value from the
--   link
[hash] :: InternalLinkType -> Maybe String

-- | The link is a link to the Premium features screen of the applcation
--   from which the user can subscribe to Telegram Premium. Call
--   getPremiumFeatures with the given referrer to process the link
--   @referrer Referrer specified in the link
InternalLinkTypePremiumFeatures :: Maybe String -> InternalLinkType

[referrer] :: InternalLinkType -> Maybe String

-- | The link is a link to the privacy and security settings section of the
--   app
InternalLinkTypePrivacyAndSecuritySettings :: InternalLinkType

-- | The link is a link to a proxy. Call addProxy with the given parameters
--   to process the link and add the proxy
InternalLinkTypeProxy :: Maybe ProxyType -> Maybe Int -> Maybe String -> InternalLinkType

[_type] :: InternalLinkType -> Maybe ProxyType

[port] :: InternalLinkType -> Maybe Int

-- | Proxy server IP address <tt>port Proxy server port </tt>type Type of
--   the proxy
[server] :: InternalLinkType -> Maybe String

-- | The link is a link to a chat by its username. Call searchPublicChat
--   with the given chat username to process the link @chat_username
--   Username of the chat
InternalLinkTypePublicChat :: Maybe String -> InternalLinkType

[chat_username] :: InternalLinkType -> Maybe String

-- | The link can be used to login the current user on another device, but
--   it must be scanned from QR-code using in-app camera. An alert similar
--   to "This code can be used to allow someone to log in to your Telegram
--   account. To confirm Telegram login, please go to Settings &gt; Devices
--   &gt; Scan QR and scan the code" needs to be shown
InternalLinkTypeQrCodeAuthentication :: InternalLinkType

-- | The link is a link to application settings
InternalLinkTypeSettings :: InternalLinkType

-- | The link is a link to a sticker set. Call searchStickerSet with the
--   given sticker set name to process the link and show the sticker set
--   @sticker_set_name Name of the sticker set
InternalLinkTypeStickerSet :: Maybe String -> InternalLinkType

[sticker_set_name] :: InternalLinkType -> Maybe String

-- | The link is a link to a theme. TDLib has no theme support yet
--   @theme_name Name of the theme
InternalLinkTypeTheme :: Maybe String -> InternalLinkType

[theme_name] :: InternalLinkType -> Maybe String

-- | The link is a link to the theme settings section of the app
InternalLinkTypeThemeSettings :: InternalLinkType

-- | The link is an unknown tg: link. Call getDeepLinkInfo to process the
--   link @link Link to be passed to getDeepLinkInfo
InternalLinkTypeUnknownDeepLink :: Maybe String -> InternalLinkType

[link] :: InternalLinkType -> Maybe String

-- | The link is a link to an unsupported proxy. An alert can be shown to
--   the user
InternalLinkTypeUnsupportedProxy :: InternalLinkType

-- | The link is a link to a user by its phone number. Call
--   searchUserByPhoneNumber with the given phone number to process the
--   link @phone_number Phone number of the user
InternalLinkTypeUserPhoneNumber :: Maybe String -> InternalLinkType

[phone_number] :: InternalLinkType -> Maybe String

-- | The link is a link to a video chat. Call searchPublicChat with the
--   given chat username, and then joinGroupCall with the given invite hash
--   to process the link
InternalLinkTypeVideoChat :: Maybe Bool -> Maybe String -> Maybe String -> InternalLinkType

-- | True, if the video chat is expected to be a live stream in a channel
--   or a broadcast group
[is_live_stream] :: InternalLinkType -> Maybe Bool

[invite_hash] :: InternalLinkType -> Maybe String

[chat_username] :: InternalLinkType -> Maybe String
instance GHC.Classes.Eq TD.Data.InternalLinkType.InternalLinkType
instance GHC.Show.Show TD.Data.InternalLinkType.InternalLinkType
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.InternalLinkType.InternalLinkType
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.InternalLinkType.InternalLinkType


module TD.Data.PremiumFeatures

data PremiumFeatures

-- | Contains information about features, available to Premium users
--   <tt>features The list of available features </tt>limits The list of
--   limits, increased for Premium users
PremiumFeatures :: Maybe InternalLinkType -> Maybe [PremiumLimit] -> Maybe [PremiumFeature] -> PremiumFeatures

-- | An internal link to be opened to pay for Telegram Premium if store
--   payment isn't possible; may be null if direct payment isn't available
[payment_link] :: PremiumFeatures -> Maybe InternalLinkType

[limits] :: PremiumFeatures -> Maybe [PremiumLimit]

[features] :: PremiumFeatures -> Maybe [PremiumFeature]
instance GHC.Classes.Eq TD.Data.PremiumFeatures.PremiumFeatures
instance GHC.Show.Show TD.Data.PremiumFeatures.PremiumFeatures
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.PremiumFeatures.PremiumFeatures
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.PremiumFeatures.PremiumFeatures


module TD.Data.ChatMemberStatus

-- | Provides information about the status of a member in a chat
data ChatMemberStatus

-- | The user is the owner of the chat and has all the administrator
--   privileges
ChatMemberStatusCreator :: Maybe Bool -> Maybe Bool -> Maybe String -> ChatMemberStatus

-- | True, if the user is a member of the chat
[is_member] :: ChatMemberStatus -> Maybe Bool

-- | True, if the creator isn't shown in the chat member list and sends
--   messages anonymously; applicable to supergroups only
[is_anonymous] :: ChatMemberStatus -> Maybe Bool

-- | A custom title of the owner; 0-16 characters without emojis;
--   applicable to supergroups only
[custom_title] :: ChatMemberStatus -> Maybe String

-- | The user is a member of the chat and has some additional privileges.
--   In basic groups, administrators can edit and delete messages sent by
--   others, add new members, ban unprivileged members, and manage video
--   chats. In supergroups and channels, there are more detailed options
--   for administrator privileges
ChatMemberStatusAdministrator :: Maybe ChatAdministratorRights -> Maybe Bool -> Maybe String -> ChatMemberStatus

-- | Rights of the administrator
[rights] :: ChatMemberStatus -> Maybe ChatAdministratorRights

-- | True, if the current user can edit the administrator privileges for
--   the called user
[can_be_edited] :: ChatMemberStatus -> Maybe Bool

-- | A custom title of the owner; 0-16 characters without emojis;
--   applicable to supergroups only
[custom_title] :: ChatMemberStatus -> Maybe String

-- | The user is a member of the chat, without any additional privileges or
--   restrictions
ChatMemberStatusMember :: ChatMemberStatus

-- | The user is under certain restrictions in the chat. Not supported in
--   basic groups and channels
ChatMemberStatusRestricted :: Maybe ChatPermissions -> Maybe Int -> Maybe Bool -> ChatMemberStatus

-- | User permissions in the chat
[permissions] :: ChatMemberStatus -> Maybe ChatPermissions

-- | Point in time (Unix timestamp) when restrictions will be lifted from
--   the user; 0 if never. If the user is restricted for more than 366 days
--   or for less than 30 seconds from the current time, the user is
--   considered to be restricted forever
[restricted_until_date] :: ChatMemberStatus -> Maybe Int

-- | True, if the user is a member of the chat
[is_member] :: ChatMemberStatus -> Maybe Bool

-- | The user or the chat is not a chat member
ChatMemberStatusLeft :: ChatMemberStatus

-- | The user or the chat was banned (and hence is not a member of the
--   chat). Implies the user can't return to the chat, view messages, or be
--   used as a participant identifier to join a video chat of the chat
ChatMemberStatusBanned :: Maybe Int -> ChatMemberStatus

-- | Point in time (Unix timestamp) when the user will be unbanned; 0 if
--   never. If the user is banned for more than 366 days or for less than
--   30 seconds from the current time, the user is considered to be banned
--   forever. Always 0 in basic groups
[banned_until_date] :: ChatMemberStatus -> Maybe Int
instance GHC.Classes.Eq TD.Data.ChatMemberStatus.ChatMemberStatus
instance GHC.Show.Show TD.Data.ChatMemberStatus.ChatMemberStatus
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.ChatMemberStatus.ChatMemberStatus
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.ChatMemberStatus.ChatMemberStatus


module TD.Query.SetChatMemberStatus

-- | Changes the status of a chat member, needs appropriate privileges.
--   This function is currently not suitable for transferring chat
--   ownership; use transferChatOwnership instead. Use addChatMember or
--   banChatMember if some additional parameters needs to be passed
data SetChatMemberStatus
SetChatMemberStatus :: Maybe ChatMemberStatus -> Maybe MessageSender -> Maybe Int -> SetChatMemberStatus

[status] :: SetChatMemberStatus -> Maybe ChatMemberStatus

[member_id] :: SetChatMemberStatus -> Maybe MessageSender

-- | Chat identifier <tt>member_id Member identifier. Chats can be only
--   banned and unbanned in supergroups and channels </tt>status The new
--   status of the member in the chat
[chat_id] :: SetChatMemberStatus -> Maybe Int
instance GHC.Classes.Eq TD.Query.SetChatMemberStatus.SetChatMemberStatus
instance GHC.Show.Show TD.Query.SetChatMemberStatus.SetChatMemberStatus
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SetChatMemberStatus.SetChatMemberStatus


module TD.Data.Supergroup

data Supergroup

-- | Represents a supergroup or channel with zero or more members
--   (subscribers in the case of channels). From the point of view of the
--   system, a channel is a special kind of a supergroup: only
--   administrators can post and see the list of members, and posts from
--   all administrators use the name and photo of the channel instead of
--   individual names and profile photos. Unlike supergroups, channels can
--   have an unlimited number of subscribers
Supergroup :: Maybe Bool -> Maybe Bool -> Maybe String -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Int -> Maybe ChatMemberStatus -> Maybe Int -> Maybe String -> Maybe Int -> Supergroup

-- | True, if many users reported this supergroup or channel as a fake
--   account
[is_fake] :: Supergroup -> Maybe Bool

-- | True, if many users reported this supergroup or channel as a scam
[is_scam] :: Supergroup -> Maybe Bool

-- | If non-empty, contains a human-readable description of the reason why
--   access to this supergroup or channel must be restricted
[restriction_reason] :: Supergroup -> Maybe String

-- | True, if the supergroup or channel is verified
[is_verified] :: Supergroup -> Maybe Bool

-- | True, if the supergroup is a broadcast group, i.e. only administrators
--   can send messages and there is no limit on the number of members
[is_broadcast_group] :: Supergroup -> Maybe Bool

-- | True, if the supergroup is a channel
[is_channel] :: Supergroup -> Maybe Bool

-- | True, if the slow mode is enabled in the supergroup
[is_slow_mode_enabled] :: Supergroup -> Maybe Bool

-- | True, if all users directly joining the supergroup need to be approved
--   by supergroup administrators. Always false for channels and
--   supergroups without username, location, or a linked chat
[join_by_request] :: Supergroup -> Maybe Bool

-- | True, if users need to join the supergroup before they can send
--   messages. Always true for channels and non-discussion supergroups
[join_to_send_messages] :: Supergroup -> Maybe Bool

-- | True, if messages sent to the channel need to contain information
--   about the sender. This field is only applicable to channels
[sign_messages] :: Supergroup -> Maybe Bool

-- | True, if the supergroup is connected to a location, i.e. the
--   supergroup is a location-based supergroup
[has_location] :: Supergroup -> Maybe Bool

-- | True, if the channel has a discussion group, or the supergroup is the
--   designated discussion group for a channel
[has_linked_chat] :: Supergroup -> Maybe Bool

-- | Number of members in the supergroup or channel; 0 if unknown.
--   Currently, it is guaranteed to be known only if the supergroup or
--   channel was received through searchPublicChats, searchChatsNearby,
--   getInactiveSupergroupChats, getSuitableDiscussionChats,
--   getGroupsInCommon, or getUserPrivacySettingRules
[member_count] :: Supergroup -> Maybe Int

-- | Status of the current user in the supergroup or channel; custom title
--   will be always empty
[status] :: Supergroup -> Maybe ChatMemberStatus

-- | Point in time (Unix timestamp) when the current user joined, or the
--   point in time when the supergroup or channel was created, in case the
--   user is not a member
[date] :: Supergroup -> Maybe Int

-- | Username of the supergroup or channel; empty for private supergroups
--   or channels
[username] :: Supergroup -> Maybe String

-- | Supergroup or channel identifier
[_id] :: Supergroup -> Maybe Int
instance GHC.Classes.Eq TD.Data.Supergroup.Supergroup
instance GHC.Show.Show TD.Data.Supergroup.Supergroup
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.Supergroup.Supergroup
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.Supergroup.Supergroup


module TD.Data.ChatMember

data ChatMember

-- | Describes a user or a chat as a member of another chat
ChatMember :: Maybe ChatMemberStatus -> Maybe Int -> Maybe Int -> Maybe MessageSender -> ChatMember

-- | Status of the member in the chat
[status] :: ChatMember -> Maybe ChatMemberStatus

-- | Point in time (Unix timestamp) when the user joined the chat
[joined_chat_date] :: ChatMember -> Maybe Int

-- | Identifier of a user that invited<i>promoted</i>banned this member in
--   the chat; 0 if unknown
[inviter_user_id] :: ChatMember -> Maybe Int

-- | Identifier of the chat member. Currently, other chats can be only Left
--   or Banned. Only supergroups and channels can have other chats as Left
--   or Banned members and these chats must be supergroups or channels
[member_id] :: ChatMember -> Maybe MessageSender
instance GHC.Classes.Eq TD.Data.ChatMember.ChatMember
instance GHC.Show.Show TD.Data.ChatMember.ChatMember
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.ChatMember.ChatMember
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.ChatMember.ChatMember


module TD.Data.ChatMembers

data ChatMembers

-- | Contains a list of chat members <tt>total_count Approximate total
--   number of chat members found </tt>members A list of chat members
ChatMembers :: Maybe [ChatMember] -> Maybe Int -> ChatMembers

[members] :: ChatMembers -> Maybe [ChatMember]

[total_count] :: ChatMembers -> Maybe Int
instance GHC.Classes.Eq TD.Data.ChatMembers.ChatMembers
instance GHC.Show.Show TD.Data.ChatMembers.ChatMembers
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.ChatMembers.ChatMembers
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.ChatMembers.ChatMembers


module TD.Data.ChatAdministrator

data ChatAdministrator

-- | Contains information about a chat administrator <tt>user_id User
--   identifier of the administrator </tt>custom_title Custom title of the
--   administrator @is_owner True, if the user is the owner of the chat
ChatAdministrator :: Maybe Bool -> Maybe String -> Maybe Int -> ChatAdministrator

[is_owner] :: ChatAdministrator -> Maybe Bool

[custom_title] :: ChatAdministrator -> Maybe String

[user_id] :: ChatAdministrator -> Maybe Int
instance GHC.Classes.Eq TD.Data.ChatAdministrator.ChatAdministrator
instance GHC.Show.Show TD.Data.ChatAdministrator.ChatAdministrator
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.ChatAdministrator.ChatAdministrator
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.ChatAdministrator.ChatAdministrator


module TD.Data.ChatAdministrators

data ChatAdministrators

-- | Represents a list of chat administrators @administrators A list of
--   chat administrators
ChatAdministrators :: Maybe [ChatAdministrator] -> ChatAdministrators

[administrators] :: ChatAdministrators -> Maybe [ChatAdministrator]
instance GHC.Classes.Eq TD.Data.ChatAdministrators.ChatAdministrators
instance GHC.Show.Show TD.Data.ChatAdministrators.ChatAdministrators
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.ChatAdministrators.ChatAdministrators
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.ChatAdministrators.ChatAdministrators


module TD.Data.ChatActionBar

-- | Describes actions which must be possible to do through a chat action
--   bar
data ChatActionBar

-- | The chat can be reported as spam using the method reportChat with the
--   reason chatReportReasonSpam
ChatActionBarReportSpam :: Maybe Bool -> ChatActionBar

-- | If true, the chat was automatically archived and can be moved back to
--   the main chat list using addChatToList simultaneously with setting
--   chat notification settings to default using
--   setChatNotificationSettings
[can_unarchive] :: ChatActionBar -> Maybe Bool

-- | The chat is a location-based supergroup, which can be reported as
--   having unrelated location using the method reportChat with the reason
--   chatReportReasonUnrelatedLocation
ChatActionBarReportUnrelatedLocation :: ChatActionBar

-- | The chat is a recently created group chat to which new members can be
--   invited
ChatActionBarInviteMembers :: ChatActionBar

-- | The chat is a private or secret chat, which can be reported using the
--   method reportChat, or the other user can be blocked using the method
--   toggleMessageSenderIsBlocked, or the other user can be added to the
--   contact list using the method addContact
ChatActionBarReportAddBlock :: Maybe Int -> Maybe Bool -> ChatActionBar

-- | If non-negative, the current user was found by the peer through
--   searchChatsNearby and this is the distance between the users
[distance] :: ChatActionBar -> Maybe Int

-- | If true, the chat was automatically archived and can be moved back to
--   the main chat list using addChatToList simultaneously with setting
--   chat notification settings to default using
--   setChatNotificationSettings
[can_unarchive] :: ChatActionBar -> Maybe Bool

-- | The chat is a private or secret chat and the other user can be added
--   to the contact list using the method addContact
ChatActionBarAddContact :: ChatActionBar

-- | The chat is a private or secret chat with a mutual contact and the
--   user's phone number can be shared with the other user using the method
--   sharePhoneNumber
ChatActionBarSharePhoneNumber :: ChatActionBar

-- | The chat is a private chat with an administrator of a chat to which
--   the user sent join request
ChatActionBarJoinRequest :: Maybe Int -> Maybe Bool -> Maybe String -> ChatActionBar

-- | Point in time (Unix timestamp) when the join request was sent
[request_date] :: ChatActionBar -> Maybe Int

-- | True, if the join request was sent to a channel chat
[is_channel] :: ChatActionBar -> Maybe Bool

-- | Title of the chat to which the join request was sent
[title] :: ChatActionBar -> Maybe String
instance GHC.Classes.Eq TD.Data.ChatActionBar.ChatActionBar
instance GHC.Show.Show TD.Data.ChatActionBar.ChatActionBar
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.ChatActionBar.ChatActionBar
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.ChatActionBar.ChatActionBar


module TD.Data.ChatAction

-- | Describes the different types of activity in a chat
data ChatAction

-- | The user is typing a message
ChatActionTyping :: ChatAction

-- | The user is recording a video
ChatActionRecordingVideo :: ChatAction

-- | The user is uploading a video @progress Upload progress, as a
--   percentage
ChatActionUploadingVideo :: Maybe Int -> ChatAction

[progress] :: ChatAction -> Maybe Int

-- | The user is recording a voice note
ChatActionRecordingVoiceNote :: ChatAction

-- | The user is uploading a voice note @progress Upload progress, as a
--   percentage
ChatActionUploadingVoiceNote :: Maybe Int -> ChatAction

[progress] :: ChatAction -> Maybe Int

-- | The user is uploading a photo @progress Upload progress, as a
--   percentage
ChatActionUploadingPhoto :: Maybe Int -> ChatAction

[progress] :: ChatAction -> Maybe Int

-- | The user is uploading a document @progress Upload progress, as a
--   percentage
ChatActionUploadingDocument :: Maybe Int -> ChatAction

[progress] :: ChatAction -> Maybe Int

-- | The user is picking a sticker to send
ChatActionChoosingSticker :: ChatAction

-- | The user is picking a location or venue to send
ChatActionChoosingLocation :: ChatAction

-- | The user is picking a contact to send
ChatActionChoosingContact :: ChatAction

-- | The user has started to play a game
ChatActionStartPlayingGame :: ChatAction

-- | The user is recording a video note
ChatActionRecordingVideoNote :: ChatAction

-- | The user is uploading a video note @progress Upload progress, as a
--   percentage
ChatActionUploadingVideoNote :: Maybe Int -> ChatAction

[progress] :: ChatAction -> Maybe Int

-- | The user is watching animations sent by the other party by clicking on
--   an animated emoji @emoji The animated emoji
ChatActionWatchingAnimations :: Maybe String -> ChatAction

[emoji] :: ChatAction -> Maybe String

-- | The user has canceled the previous action
ChatActionCancel :: ChatAction
instance GHC.Classes.Eq TD.Data.ChatAction.ChatAction
instance GHC.Show.Show TD.Data.ChatAction.ChatAction
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.ChatAction.ChatAction
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.ChatAction.ChatAction


module TD.Query.SendChatAction

-- | Sends a notification about user activity in a chat <tt>chat_id Chat
--   identifier </tt>message_thread_id If not 0, a message thread
--   identifier in which the action was performed @action The action
--   description; pass null to cancel the currently active action
data SendChatAction
SendChatAction :: Maybe ChatAction -> Maybe Int -> Maybe Int -> SendChatAction

[action] :: SendChatAction -> Maybe ChatAction

[message_thread_id] :: SendChatAction -> Maybe Int

[chat_id] :: SendChatAction -> Maybe Int
instance GHC.Classes.Eq TD.Query.SendChatAction.SendChatAction
instance GHC.Show.Show TD.Query.SendChatAction.SendChatAction
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SendChatAction.SendChatAction


module TD.Data.CanTransferOwnershipResult

-- | Represents result of checking whether the current session can be used
--   to transfer a chat ownership to another user
data CanTransferOwnershipResult

-- | The session can be used
CanTransferOwnershipResultOk :: CanTransferOwnershipResult

-- | The 2-step verification needs to be enabled first
CanTransferOwnershipResultPasswordNeeded :: CanTransferOwnershipResult

-- | The 2-step verification was enabled recently, user needs to wait
--   @retry_after Time left before the session can be used to transfer
--   ownership of a chat, in seconds
CanTransferOwnershipResultPasswordTooFresh :: Maybe Int -> CanTransferOwnershipResult

[retry_after] :: CanTransferOwnershipResult -> Maybe Int

-- | The session was created recently, user needs to wait @retry_after Time
--   left before the session can be used to transfer ownership of a chat,
--   in seconds
CanTransferOwnershipResultSessionTooFresh :: Maybe Int -> CanTransferOwnershipResult

[retry_after] :: CanTransferOwnershipResult -> Maybe Int
instance GHC.Classes.Eq TD.Data.CanTransferOwnershipResult.CanTransferOwnershipResult
instance GHC.Show.Show TD.Data.CanTransferOwnershipResult.CanTransferOwnershipResult
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.CanTransferOwnershipResult.CanTransferOwnershipResult
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.CanTransferOwnershipResult.CanTransferOwnershipResult


module TD.Data.CallbackQueryPayload

-- | Represents a payload of a callback query
data CallbackQueryPayload

-- | The payload for a general callback button @data Data that was attached
--   to the callback button
CallbackQueryPayloadData :: Maybe String -> CallbackQueryPayload

[_data] :: CallbackQueryPayload -> Maybe String

-- | The payload for a callback button requiring password <tt>password The
--   password for the current user </tt>data Data that was attached to the
--   callback button
CallbackQueryPayloadDataWithPassword :: Maybe String -> Maybe String -> CallbackQueryPayload

[_data] :: CallbackQueryPayload -> Maybe String

[password] :: CallbackQueryPayload -> Maybe String

-- | The payload for a game callback button @game_short_name A short name
--   of the game that was attached to the callback button
CallbackQueryPayloadGame :: Maybe String -> CallbackQueryPayload

[game_short_name] :: CallbackQueryPayload -> Maybe String
instance GHC.Classes.Eq TD.Data.CallbackQueryPayload.CallbackQueryPayload
instance GHC.Show.Show TD.Data.CallbackQueryPayload.CallbackQueryPayload
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.CallbackQueryPayload.CallbackQueryPayload
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.CallbackQueryPayload.CallbackQueryPayload


module TD.Query.GetCallbackQueryAnswer

-- | Sends a callback query to a bot and returns an answer. Returns an
--   error with code 502 if the bot fails to answer the query before the
--   query timeout expires <tt>chat_id Identifier of the chat with the
--   message </tt>message_id Identifier of the message from which the query
--   originated @payload Query payload
data GetCallbackQueryAnswer
GetCallbackQueryAnswer :: Maybe CallbackQueryPayload -> Maybe Int -> Maybe Int -> GetCallbackQueryAnswer

[payload] :: GetCallbackQueryAnswer -> Maybe CallbackQueryPayload

[message_id] :: GetCallbackQueryAnswer -> Maybe Int

[chat_id] :: GetCallbackQueryAnswer -> Maybe Int
instance GHC.Classes.Eq TD.Query.GetCallbackQueryAnswer.GetCallbackQueryAnswer
instance GHC.Show.Show TD.Query.GetCallbackQueryAnswer.GetCallbackQueryAnswer
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetCallbackQueryAnswer.GetCallbackQueryAnswer


module TD.Data.CallbackQueryAnswer

data CallbackQueryAnswer

-- | Contains a bot's answer to a callback query <tt>text Text of the
--   answer </tt>show_alert True, if an alert must be shown to the user
--   instead of a toast notification @url URL to be opened
CallbackQueryAnswer :: Maybe String -> Maybe Bool -> Maybe String -> CallbackQueryAnswer

[url] :: CallbackQueryAnswer -> Maybe String

[show_alert] :: CallbackQueryAnswer -> Maybe Bool

[text] :: CallbackQueryAnswer -> Maybe String
instance GHC.Classes.Eq TD.Data.CallbackQueryAnswer.CallbackQueryAnswer
instance GHC.Show.Show TD.Data.CallbackQueryAnswer.CallbackQueryAnswer
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.CallbackQueryAnswer.CallbackQueryAnswer
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.CallbackQueryAnswer.CallbackQueryAnswer


module TD.Data.CallServerType

-- | Describes the type of a call server
data CallServerType

-- | A Telegram call reflector <tt>peer_tag A peer tag to be used with the
--   reflector </tt>is_tcp True, if the server uses TCP instead of UDP
CallServerTypeTelegramReflector :: Maybe Bool -> Maybe String -> CallServerType

[is_tcp] :: CallServerType -> Maybe Bool

[peer_tag] :: CallServerType -> Maybe String

-- | A WebRTC server <tt>username Username to be used for authentication
--   </tt>password Authentication password <tt>supports_turn True, if the
--   server supports TURN </tt>supports_stun True, if the server supports
--   STUN
CallServerTypeWebrtc :: Maybe Bool -> Maybe Bool -> Maybe String -> Maybe String -> CallServerType

[supports_stun] :: CallServerType -> Maybe Bool

[supports_turn] :: CallServerType -> Maybe Bool

[password] :: CallServerType -> Maybe String

[username] :: CallServerType -> Maybe String
instance GHC.Classes.Eq TD.Data.CallServerType.CallServerType
instance GHC.Show.Show TD.Data.CallServerType.CallServerType
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.CallServerType.CallServerType
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.CallServerType.CallServerType


module TD.Data.CallServer

data CallServer

-- | Describes a server for relaying call data <tt>id Server identifier
--   </tt>ip_address Server IPv4 address <tt>ipv6_address Server IPv6
--   address </tt>port Server port number @type Server type
CallServer :: Maybe CallServerType -> Maybe Int -> Maybe String -> Maybe String -> Maybe Int -> CallServer

[_type] :: CallServer -> Maybe CallServerType

[port] :: CallServer -> Maybe Int

[ipv6_address] :: CallServer -> Maybe String

[ip_address] :: CallServer -> Maybe String

[_id] :: CallServer -> Maybe Int
instance GHC.Classes.Eq TD.Data.CallServer.CallServer
instance GHC.Show.Show TD.Data.CallServer.CallServer
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.CallServer.CallServer
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.CallServer.CallServer


module TD.Data.CallProtocol

data CallProtocol

-- | Specifies the supported call protocols
CallProtocol :: Maybe [String] -> Maybe Int -> Maybe Int -> Maybe Bool -> Maybe Bool -> CallProtocol

-- | List of supported tgcalls versions
[library_versions] :: CallProtocol -> Maybe [String]

-- | The maximum supported API layer; use 65
[max_layer] :: CallProtocol -> Maybe Int

-- | The minimum supported API layer; use 65
[min_layer] :: CallProtocol -> Maybe Int

-- | True, if connection through UDP reflectors is supported
[udp_reflector] :: CallProtocol -> Maybe Bool

-- | True, if UDP peer-to-peer connections are supported
[udp_p2p] :: CallProtocol -> Maybe Bool
instance GHC.Classes.Eq TD.Data.CallProtocol.CallProtocol
instance GHC.Show.Show TD.Data.CallProtocol.CallProtocol
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.CallProtocol.CallProtocol
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.CallProtocol.CallProtocol


module TD.Query.CreateCall

-- | Creates a new call <tt>user_id Identifier of the user to be called
--   </tt>protocol The call protocols supported by the application
--   @is_video Pass true to create a video call
data CreateCall
CreateCall :: Maybe Bool -> Maybe CallProtocol -> Maybe Int -> CreateCall

[is_video] :: CreateCall -> Maybe Bool

[protocol] :: CreateCall -> Maybe CallProtocol

[user_id] :: CreateCall -> Maybe Int
instance GHC.Classes.Eq TD.Query.CreateCall.CreateCall
instance GHC.Show.Show TD.Query.CreateCall.CreateCall
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.CreateCall.CreateCall


module TD.Query.AcceptCall

-- | Accepts an incoming call <tt>call_id Call identifier </tt>protocol The
--   call protocols supported by the application
data AcceptCall
AcceptCall :: Maybe CallProtocol -> Maybe Int -> AcceptCall

[protocol] :: AcceptCall -> Maybe CallProtocol

[call_id] :: AcceptCall -> Maybe Int
instance GHC.Classes.Eq TD.Query.AcceptCall.AcceptCall
instance GHC.Show.Show TD.Query.AcceptCall.AcceptCall
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.AcceptCall.AcceptCall


module TD.Data.CallProblem

-- | Describes the exact type of a problem with a call
data CallProblem

-- | The user heard their own voice
CallProblemEcho :: CallProblem

-- | The user heard background noise
CallProblemNoise :: CallProblem

-- | The other side kept disappearing
CallProblemInterruptions :: CallProblem

-- | The speech was distorted
CallProblemDistortedSpeech :: CallProblem

-- | The user couldn't hear the other side
CallProblemSilentLocal :: CallProblem

-- | The other side couldn't hear the user
CallProblemSilentRemote :: CallProblem

-- | The call ended unexpectedly
CallProblemDropped :: CallProblem

-- | The video was distorted
CallProblemDistortedVideo :: CallProblem

-- | The video was pixelated
CallProblemPixelatedVideo :: CallProblem
instance GHC.Classes.Eq TD.Data.CallProblem.CallProblem
instance GHC.Show.Show TD.Data.CallProblem.CallProblem
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.CallProblem.CallProblem
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.CallProblem.CallProblem


module TD.Query.SendCallRating

-- | Sends a call rating <tt>call_id Call identifier </tt>rating Call
--   rating; 1-5 <tt>comment An optional user comment if the rating is less
--   than 5 </tt>problems List of the exact types of problems with the
--   call, specified by the user
data SendCallRating
SendCallRating :: Maybe [CallProblem] -> Maybe String -> Maybe Int -> Maybe Int -> SendCallRating

[problems] :: SendCallRating -> Maybe [CallProblem]

[comment] :: SendCallRating -> Maybe String

[rating] :: SendCallRating -> Maybe Int

[call_id] :: SendCallRating -> Maybe Int
instance GHC.Classes.Eq TD.Query.SendCallRating.SendCallRating
instance GHC.Show.Show TD.Query.SendCallRating.SendCallRating
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SendCallRating.SendCallRating


module TD.Data.CallId

data CallId

-- | Contains the call identifier @id Call identifier
CallId :: Maybe Int -> CallId

[_id] :: CallId -> Maybe Int
instance GHC.Classes.Eq TD.Data.CallId.CallId
instance GHC.Show.Show TD.Data.CallId.CallId
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.CallId.CallId
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.CallId.CallId


module TD.Data.CallDiscardReason

-- | Describes the reason why a call was discarded
data CallDiscardReason

-- | The call wasn't discarded, or the reason is unknown
CallDiscardReasonEmpty :: CallDiscardReason

-- | The call was ended before the conversation started. It was canceled by
--   the caller or missed by the other party
CallDiscardReasonMissed :: CallDiscardReason

-- | The call was ended before the conversation started. It was declined by
--   the other party
CallDiscardReasonDeclined :: CallDiscardReason

-- | The call was ended during the conversation because the users were
--   disconnected
CallDiscardReasonDisconnected :: CallDiscardReason

-- | The call was ended because one of the parties hung up
CallDiscardReasonHungUp :: CallDiscardReason
instance GHC.Classes.Eq TD.Data.CallDiscardReason.CallDiscardReason
instance GHC.Show.Show TD.Data.CallDiscardReason.CallDiscardReason
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.CallDiscardReason.CallDiscardReason
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.CallDiscardReason.CallDiscardReason


module TD.Data.CallState

-- | Describes the current call state
data CallState

-- | The call is pending, waiting to be accepted by a user <tt>is_created
--   True, if the call has already been created by the server
--   </tt>is_received True, if the call has already been received by the
--   other party
CallStatePending :: Maybe Bool -> Maybe Bool -> CallState

[is_received] :: CallState -> Maybe Bool

[is_created] :: CallState -> Maybe Bool

-- | The call has been answered and encryption keys are being exchanged
CallStateExchangingKeys :: CallState

-- | The call is ready to use <tt>protocol Call protocols supported by the
--   peer </tt>servers List of available call servers <tt>config A
--   JSON-encoded call config </tt>encryption_key Call encryption key
--   <tt>emojis Encryption key emojis fingerprint </tt>allow_p2p True, if
--   peer-to-peer connection is allowed by users privacy settings
CallStateReady :: Maybe Bool -> Maybe [String] -> Maybe String -> Maybe String -> Maybe [CallServer] -> Maybe CallProtocol -> CallState

[allow_p2p] :: CallState -> Maybe Bool

[emojis] :: CallState -> Maybe [String]

[encryption_key] :: CallState -> Maybe String

[config] :: CallState -> Maybe String

[servers] :: CallState -> Maybe [CallServer]

[protocol] :: CallState -> Maybe CallProtocol

-- | The call is hanging up after discardCall has been called
CallStateHangingUp :: CallState

-- | The call has ended successfully <tt>reason The reason, why the call
--   has ended </tt>need_rating True, if the call rating must be sent to
--   the server <tt>need_debug_information True, if the call debug
--   information must be sent to the server </tt>need_log True, if the call
--   log must be sent to the server
CallStateDiscarded :: Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe CallDiscardReason -> CallState

[need_log] :: CallState -> Maybe Bool

[need_debug_information] :: CallState -> Maybe Bool

[need_rating] :: CallState -> Maybe Bool

[reason] :: CallState -> Maybe CallDiscardReason

-- | The call has ended with an error @error Error. An error with the code
--   4005000 will be returned if an outgoing call is missed because of an
--   expired timeout
CallStateError :: Maybe Error -> CallState

[_error] :: CallState -> Maybe Error
instance GHC.Classes.Eq TD.Data.CallState.CallState
instance GHC.Show.Show TD.Data.CallState.CallState
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.CallState.CallState
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.CallState.CallState


module TD.Data.Call

data Call

-- | Describes a call <tt>id Call identifier, not persistent </tt>user_id
--   Peer user identifier <tt>is_outgoing True, if the call is outgoing
--   </tt>is_video True, if the call is a video call @state Call state
Call :: Maybe CallState -> Maybe Bool -> Maybe Bool -> Maybe Int -> Maybe Int -> Call

[state] :: Call -> Maybe CallState

[is_video] :: Call -> Maybe Bool

[is_outgoing] :: Call -> Maybe Bool

[user_id] :: Call -> Maybe Int

[_id] :: Call -> Maybe Int
instance GHC.Classes.Eq TD.Data.Call.Call
instance GHC.Show.Show TD.Data.Call.Call
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.Call.Call
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.Call.Call


module TD.Data.BotMenuButton

data BotMenuButton

-- | Describes a button to be shown instead of bot commands menu button
--   <tt>text Text of the button </tt>url URL to be passed to openWebApp
BotMenuButton :: Maybe String -> Maybe String -> BotMenuButton

[url] :: BotMenuButton -> Maybe String

[text] :: BotMenuButton -> Maybe String
instance GHC.Classes.Eq TD.Data.BotMenuButton.BotMenuButton
instance GHC.Show.Show TD.Data.BotMenuButton.BotMenuButton
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.BotMenuButton.BotMenuButton
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.BotMenuButton.BotMenuButton


module TD.Query.SetMenuButton

-- | Sets menu button for the given user or for all users; for bots only
data SetMenuButton
SetMenuButton :: Maybe BotMenuButton -> Maybe Int -> SetMenuButton

-- | New menu button
[menu_button] :: SetMenuButton -> Maybe BotMenuButton

-- | Identifier of the user or 0 to set menu button for all users
[user_id] :: SetMenuButton -> Maybe Int
instance GHC.Classes.Eq TD.Query.SetMenuButton.SetMenuButton
instance GHC.Show.Show TD.Query.SetMenuButton.SetMenuButton
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SetMenuButton.SetMenuButton


module TD.Data.BotCommandScope

-- | Represents the scope to which bot commands are relevant
data BotCommandScope

-- | A scope covering all users
BotCommandScopeDefault :: BotCommandScope

-- | A scope covering all private chats
BotCommandScopeAllPrivateChats :: BotCommandScope

-- | A scope covering all group and supergroup chats
BotCommandScopeAllGroupChats :: BotCommandScope

-- | A scope covering all group and supergroup chat administrators
BotCommandScopeAllChatAdministrators :: BotCommandScope

-- | A scope covering all members of a chat @chat_id Chat identifier
BotCommandScopeChat :: Maybe Int -> BotCommandScope

[chat_id] :: BotCommandScope -> Maybe Int

-- | A scope covering all administrators of a chat @chat_id Chat identifier
BotCommandScopeChatAdministrators :: Maybe Int -> BotCommandScope

[chat_id] :: BotCommandScope -> Maybe Int

-- | A scope covering a member of a chat <tt>chat_id Chat identifier
--   </tt>user_id User identifier
BotCommandScopeChatMember :: Maybe Int -> Maybe Int -> BotCommandScope

[user_id] :: BotCommandScope -> Maybe Int

[chat_id] :: BotCommandScope -> Maybe Int
instance GHC.Classes.Eq TD.Data.BotCommandScope.BotCommandScope
instance GHC.Show.Show TD.Data.BotCommandScope.BotCommandScope
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.BotCommandScope.BotCommandScope
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.BotCommandScope.BotCommandScope


module TD.Query.GetCommands

-- | Returns the list of commands supported by the bot for the given user
--   scope and language; for bots only
data GetCommands
GetCommands :: Maybe String -> Maybe BotCommandScope -> GetCommands

-- | A two-letter ISO 639-1 language code or an empty string
[language_code] :: GetCommands -> Maybe String

-- | The scope to which the commands are relevant; pass null to get
--   commands in the default bot command scope
[scope] :: GetCommands -> Maybe BotCommandScope
instance GHC.Classes.Eq TD.Query.GetCommands.GetCommands
instance GHC.Show.Show TD.Query.GetCommands.GetCommands
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetCommands.GetCommands


module TD.Query.DeleteCommands

-- | Deletes commands supported by the bot for the given user scope and
--   language; for bots only
data DeleteCommands
DeleteCommands :: Maybe String -> Maybe BotCommandScope -> DeleteCommands

-- | A two-letter ISO 639-1 language code or an empty string
[language_code] :: DeleteCommands -> Maybe String

-- | The scope to which the commands are relevant; pass null to delete
--   commands in the default bot command scope
[scope] :: DeleteCommands -> Maybe BotCommandScope
instance GHC.Classes.Eq TD.Query.DeleteCommands.DeleteCommands
instance GHC.Show.Show TD.Query.DeleteCommands.DeleteCommands
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.DeleteCommands.DeleteCommands


module TD.Data.BotCommand

data BotCommand

-- | Represents a command supported by a bot <tt>command Text of the bot
--   command </tt>param_description Description of the bot command
BotCommand :: Maybe String -> Maybe String -> BotCommand

[description] :: BotCommand -> Maybe String

[command] :: BotCommand -> Maybe String
instance GHC.Classes.Eq TD.Data.BotCommand.BotCommand
instance GHC.Show.Show TD.Data.BotCommand.BotCommand
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.BotCommand.BotCommand
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.BotCommand.BotCommand


module TD.Query.SetCommands

-- | Sets the list of commands supported by the bot for the given user
--   scope and language; for bots only
data SetCommands
SetCommands :: Maybe [BotCommand] -> Maybe String -> Maybe BotCommandScope -> SetCommands

-- | List of the bot's commands
[commands] :: SetCommands -> Maybe [BotCommand]

-- | A two-letter ISO 639-1 language code. If empty, the commands will be
--   applied to all users from the given scope, for which language there
--   are no dedicated commands
[language_code] :: SetCommands -> Maybe String

-- | The scope to which the commands are relevant; pass null to change
--   commands in the default bot command scope
[scope] :: SetCommands -> Maybe BotCommandScope
instance GHC.Classes.Eq TD.Query.SetCommands.SetCommands
instance GHC.Show.Show TD.Query.SetCommands.SetCommands
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SetCommands.SetCommands


module TD.Data.BotCommands

data BotCommands

-- | Contains a list of bot commands <tt>bot_user_id Bot's user identifier
--   </tt>commands List of bot commands
BotCommands :: Maybe [BotCommand] -> Maybe Int -> BotCommands

[commands] :: BotCommands -> Maybe [BotCommand]

[bot_user_id] :: BotCommands -> Maybe Int
instance GHC.Classes.Eq TD.Data.BotCommands.BotCommands
instance GHC.Show.Show TD.Data.BotCommands.BotCommands
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.BotCommands.BotCommands
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.BotCommands.BotCommands


module TD.Data.BasicGroup

data BasicGroup

-- | Represents a basic group of 0-200 users (must be upgraded to a
--   supergroup to accommodate more than 200 users)
BasicGroup :: Maybe Int -> Maybe Bool -> Maybe ChatMemberStatus -> Maybe Int -> Maybe Int -> BasicGroup

-- | Identifier of the supergroup to which this group was upgraded; 0 if
--   none
[upgraded_to_supergroup_id] :: BasicGroup -> Maybe Int

-- | True, if the group is active
[is_active] :: BasicGroup -> Maybe Bool

-- | Status of the current user in the group
[status] :: BasicGroup -> Maybe ChatMemberStatus

-- | Number of members in the group
[member_count] :: BasicGroup -> Maybe Int

-- | Group identifier
[_id] :: BasicGroup -> Maybe Int
instance GHC.Classes.Eq TD.Data.BasicGroup.BasicGroup
instance GHC.Show.Show TD.Data.BasicGroup.BasicGroup
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.BasicGroup.BasicGroup
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.BasicGroup.BasicGroup


module TD.Data.BankCardActionOpenUrl

data BankCardActionOpenUrl

-- | Describes an action associated with a bank card number <tt>text Action
--   text </tt>url The URL to be opened
BankCardActionOpenUrl :: Maybe String -> Maybe String -> BankCardActionOpenUrl

[url] :: BankCardActionOpenUrl -> Maybe String

[text] :: BankCardActionOpenUrl -> Maybe String
instance GHC.Classes.Eq TD.Data.BankCardActionOpenUrl.BankCardActionOpenUrl
instance GHC.Show.Show TD.Data.BankCardActionOpenUrl.BankCardActionOpenUrl
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.BankCardActionOpenUrl.BankCardActionOpenUrl
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.BankCardActionOpenUrl.BankCardActionOpenUrl


module TD.Data.BankCardInfo

data BankCardInfo

-- | Information about a bank card <tt>title Title of the bank card
--   description </tt>actions Actions that can be done with the bank card
--   number
BankCardInfo :: Maybe [BankCardActionOpenUrl] -> Maybe String -> BankCardInfo

[actions] :: BankCardInfo -> Maybe [BankCardActionOpenUrl]

[title] :: BankCardInfo -> Maybe String
instance GHC.Classes.Eq TD.Data.BankCardInfo.BankCardInfo
instance GHC.Show.Show TD.Data.BankCardInfo.BankCardInfo
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.BankCardInfo.BankCardInfo
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.BankCardInfo.BankCardInfo


module TD.Data.BackgroundFill

-- | Describes a fill of a background
data BackgroundFill

-- | Describes a solid fill of a background @color A color of the
--   background in the RGB24 format
BackgroundFillSolid :: Maybe Int -> BackgroundFill

[color] :: BackgroundFill -> Maybe Int

-- | Describes a gradient fill of a background <tt>top_color A top color of
--   the background in the RGB24 format </tt>bottom_color A bottom color of
--   the background in the RGB24 format
BackgroundFillGradient :: Maybe Int -> Maybe Int -> Maybe Int -> BackgroundFill

-- | Clockwise rotation angle of the gradient, in degrees; 0-359. Must be
--   always divisible by 45
[rotation_angle] :: BackgroundFill -> Maybe Int

[bottom_color] :: BackgroundFill -> Maybe Int

[top_color] :: BackgroundFill -> Maybe Int

-- | Describes a freeform gradient fill of a background @colors A list of 3
--   or 4 colors of the freeform gradients in the RGB24 format
BackgroundFillFreeformGradient :: Maybe [Int] -> BackgroundFill

[colors] :: BackgroundFill -> Maybe [Int]
instance GHC.Classes.Eq TD.Data.BackgroundFill.BackgroundFill
instance GHC.Show.Show TD.Data.BackgroundFill.BackgroundFill
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.BackgroundFill.BackgroundFill
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.BackgroundFill.BackgroundFill


module TD.Data.BackgroundType

-- | Describes the type of a background
data BackgroundType

-- | A wallpaper in JPEG format
BackgroundTypeWallpaper :: Maybe Bool -> Maybe Bool -> BackgroundType

-- | True, if the background needs to be slightly moved when device is
--   tilted
[is_moving] :: BackgroundType -> Maybe Bool

-- | True, if the wallpaper must be downscaled to fit in 450x450 square and
--   then box-blurred with radius 12
[is_blurred] :: BackgroundType -> Maybe Bool

-- | A PNG or TGV (gzipped subset of SVG with MIME type
--   "application/x-tgwallpattern") pattern to be combined with the
--   background fill chosen by the user
BackgroundTypePattern :: Maybe Bool -> Maybe Bool -> Maybe Int -> Maybe BackgroundFill -> BackgroundType

-- | True, if the background needs to be slightly moved when device is
--   tilted
[is_moving] :: BackgroundType -> Maybe Bool

-- | True, if the background fill must be applied only to the pattern
--   itself. All other pixels are black in this case. For dark themes only
[is_inverted] :: BackgroundType -> Maybe Bool

-- | Intensity of the pattern when it is shown above the filled background;
--   0-100.
[intensity] :: BackgroundType -> Maybe Int

-- | Fill of the background
[fill] :: BackgroundType -> Maybe BackgroundFill

-- | A filled background @fill The background fill
BackgroundTypeFill :: Maybe BackgroundFill -> BackgroundType

-- | Fill of the background
[fill] :: BackgroundType -> Maybe BackgroundFill
instance GHC.Classes.Eq TD.Data.BackgroundType.BackgroundType
instance GHC.Show.Show TD.Data.BackgroundType.BackgroundType
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.BackgroundType.BackgroundType
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.BackgroundType.BackgroundType


module TD.Query.SetBackground

-- | Changes the background selected by the user; adds background to the
--   list of installed backgrounds
data SetBackground
SetBackground :: Maybe Bool -> Maybe BackgroundType -> Maybe InputBackground -> SetBackground

-- | Pass true if the background is changed for a dark theme
[for_dark_theme] :: SetBackground -> Maybe Bool

-- | Background type; pass null to use the default type of the remote
--   background or to remove the current background
[_type] :: SetBackground -> Maybe BackgroundType

-- | The input background to use; pass null to create a new filled
--   backgrounds or to remove the current background
[background] :: SetBackground -> Maybe InputBackground
instance GHC.Classes.Eq TD.Query.SetBackground.SetBackground
instance GHC.Show.Show TD.Query.SetBackground.SetBackground
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SetBackground.SetBackground


module TD.Query.GetBackgroundUrl

-- | Constructs a persistent HTTP URL for a background <tt>name Background
--   name </tt>type Background type
data GetBackgroundUrl
GetBackgroundUrl :: Maybe BackgroundType -> Maybe String -> GetBackgroundUrl

[_type] :: GetBackgroundUrl -> Maybe BackgroundType

[name] :: GetBackgroundUrl -> Maybe String
instance GHC.Classes.Eq TD.Query.GetBackgroundUrl.GetBackgroundUrl
instance GHC.Show.Show TD.Query.GetBackgroundUrl.GetBackgroundUrl
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetBackgroundUrl.GetBackgroundUrl


module TD.Data.Background

data Background

-- | Describes a chat background
Background :: Maybe BackgroundType -> Maybe Document -> Maybe String -> Maybe Bool -> Maybe Bool -> Maybe Int -> Background

-- | Type of the background
[_type] :: Background -> Maybe BackgroundType

-- | Document with the background; may be null. Null only for filled
--   backgrounds
[document] :: Background -> Maybe Document

-- | Unique background name
[name] :: Background -> Maybe String

-- | True, if the background is dark and is recommended to be used with
--   dark theme
[is_dark] :: Background -> Maybe Bool

-- | True, if this is one of default backgrounds
[is_default] :: Background -> Maybe Bool

-- | Unique background identifier
[_id] :: Background -> Maybe Int
instance GHC.Classes.Eq TD.Data.Background.Background
instance GHC.Show.Show TD.Data.Background.Background
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.Background.Background
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.Background.Background


module TD.Data.ThemeSettings

data ThemeSettings

-- | Describes theme settings
ThemeSettings :: Maybe Int -> Maybe Bool -> Maybe BackgroundFill -> Maybe Background -> Maybe Int -> ThemeSettings

-- | Accent color of outgoing messages in ARGB format
[outgoing_message_accent_color] :: ThemeSettings -> Maybe Int

-- | If true, the freeform gradient fill needs to be animated on every sent
--   message
[animate_outgoing_message_fill] :: ThemeSettings -> Maybe Bool

-- | The fill to be used as a background for outgoing messages
[outgoing_message_fill] :: ThemeSettings -> Maybe BackgroundFill

-- | The background to be used in chats; may be null
[background] :: ThemeSettings -> Maybe Background

-- | Theme accent color in ARGB format
[accent_color] :: ThemeSettings -> Maybe Int
instance GHC.Classes.Eq TD.Data.ThemeSettings.ThemeSettings
instance GHC.Show.Show TD.Data.ThemeSettings.ThemeSettings
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.ThemeSettings.ThemeSettings
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.ThemeSettings.ThemeSettings


module TD.Data.ChatTheme

data ChatTheme

-- | Describes a chat theme
ChatTheme :: Maybe ThemeSettings -> Maybe ThemeSettings -> Maybe String -> ChatTheme

-- | Theme settings for a dark chat theme
[dark_settings] :: ChatTheme -> Maybe ThemeSettings

-- | Theme settings for a light chat theme
[light_settings] :: ChatTheme -> Maybe ThemeSettings

-- | Theme name
[name] :: ChatTheme -> Maybe String
instance GHC.Classes.Eq TD.Data.ChatTheme.ChatTheme
instance GHC.Show.Show TD.Data.ChatTheme.ChatTheme
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.ChatTheme.ChatTheme
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.ChatTheme.ChatTheme


module TD.Data.Backgrounds

data Backgrounds

-- | Contains a list of backgrounds @backgrounds A list of backgrounds
Backgrounds :: Maybe [Background] -> Backgrounds

[backgrounds] :: Backgrounds -> Maybe [Background]
instance GHC.Classes.Eq TD.Data.Backgrounds.Backgrounds
instance GHC.Show.Show TD.Data.Backgrounds.Backgrounds
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.Backgrounds.Backgrounds
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.Backgrounds.Backgrounds


module TD.Data.AvailableReaction

data AvailableReaction

-- | Represents an available reaction <tt>reaction Text representation of
--   the reaction </tt>needs_premium True, if Telegram Premium is needed to
--   send the reaction
AvailableReaction :: Maybe Bool -> Maybe String -> AvailableReaction

[needs_premium] :: AvailableReaction -> Maybe Bool

[reaction] :: AvailableReaction -> Maybe String
instance GHC.Classes.Eq TD.Data.AvailableReaction.AvailableReaction
instance GHC.Show.Show TD.Data.AvailableReaction.AvailableReaction
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.AvailableReaction.AvailableReaction
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.AvailableReaction.AvailableReaction


module TD.Data.AvailableReactions

data AvailableReactions

-- | Represents a list of available reactions @reactions List of reactions
AvailableReactions :: Maybe [AvailableReaction] -> AvailableReactions

[reactions] :: AvailableReactions -> Maybe [AvailableReaction]
instance GHC.Classes.Eq TD.Data.AvailableReactions.AvailableReactions
instance GHC.Show.Show TD.Data.AvailableReactions.AvailableReactions
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.AvailableReactions.AvailableReactions
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.AvailableReactions.AvailableReactions


module TD.Data.AutoDownloadSettings

data AutoDownloadSettings

-- | Contains auto-download settings
AutoDownloadSettings :: Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Int -> Maybe Int -> Maybe Int -> Maybe Int -> Maybe Bool -> AutoDownloadSettings

-- | True, if "use less data for calls" option needs to be enabled
[use_less_data_for_calls] :: AutoDownloadSettings -> Maybe Bool

-- | True, if the next audio track needs to be preloaded while the user is
--   listening to an audio file
[preload_next_audio] :: AutoDownloadSettings -> Maybe Bool

-- | True, if the beginning of video files needs to be preloaded for
--   instant playback
[preload_large_videos] :: AutoDownloadSettings -> Maybe Bool

-- | The maximum suggested bitrate for uploaded videos, in kbit/s
[video_upload_bitrate] :: AutoDownloadSettings -> Maybe Int

-- | The maximum size of other file types to be auto-downloaded, in bytes
[max_other_file_size] :: AutoDownloadSettings -> Maybe Int

-- | The maximum size of a video file to be auto-downloaded, in bytes
[max_video_file_size] :: AutoDownloadSettings -> Maybe Int

-- | The maximum size of a photo file to be auto-downloaded, in bytes
[max_photo_file_size] :: AutoDownloadSettings -> Maybe Int

-- | True, if the auto-download is enabled
[is_auto_download_enabled] :: AutoDownloadSettings -> Maybe Bool
instance GHC.Classes.Eq TD.Data.AutoDownloadSettings.AutoDownloadSettings
instance GHC.Show.Show TD.Data.AutoDownloadSettings.AutoDownloadSettings
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.AutoDownloadSettings.AutoDownloadSettings
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.AutoDownloadSettings.AutoDownloadSettings


module TD.Query.SetAutoDownloadSettings

-- | Sets auto-download settings <tt>settings New user auto-download
--   settings </tt>type Type of the network for which the new settings are
--   relevant
data SetAutoDownloadSettings
SetAutoDownloadSettings :: Maybe NetworkType -> Maybe AutoDownloadSettings -> SetAutoDownloadSettings

[_type] :: SetAutoDownloadSettings -> Maybe NetworkType

[settings] :: SetAutoDownloadSettings -> Maybe AutoDownloadSettings
instance GHC.Classes.Eq TD.Query.SetAutoDownloadSettings.SetAutoDownloadSettings
instance GHC.Show.Show TD.Query.SetAutoDownloadSettings.SetAutoDownloadSettings
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SetAutoDownloadSettings.SetAutoDownloadSettings


module TD.Data.AutoDownloadSettingsPresets

data AutoDownloadSettingsPresets

-- | Contains auto-download settings presets for the current user
AutoDownloadSettingsPresets :: Maybe AutoDownloadSettings -> Maybe AutoDownloadSettings -> Maybe AutoDownloadSettings -> AutoDownloadSettingsPresets

-- | Preset with highest settings; supposed to be used by default when
--   connected on Wi-Fi
[high] :: AutoDownloadSettingsPresets -> Maybe AutoDownloadSettings

-- | Preset with medium settings; supposed to be used by default when using
--   mobile data
[medium] :: AutoDownloadSettingsPresets -> Maybe AutoDownloadSettings

-- | Preset with lowest settings; supposed to be used by default when
--   roaming
[low] :: AutoDownloadSettingsPresets -> Maybe AutoDownloadSettings
instance GHC.Classes.Eq TD.Data.AutoDownloadSettingsPresets.AutoDownloadSettingsPresets
instance GHC.Show.Show TD.Data.AutoDownloadSettingsPresets.AutoDownloadSettingsPresets
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.AutoDownloadSettingsPresets.AutoDownloadSettingsPresets
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.AutoDownloadSettingsPresets.AutoDownloadSettingsPresets


module TD.Data.AuthenticationCodeType

-- | Provides information about the method by which an authentication code
--   is delivered to the user
data AuthenticationCodeType

-- | An authentication code is delivered via a private Telegram message,
--   which can be viewed from another active session @length Length of the
--   code
AuthenticationCodeTypeTelegramMessage :: Maybe Int -> AuthenticationCodeType

[_length] :: AuthenticationCodeType -> Maybe Int

-- | An authentication code is delivered via an SMS message to the
--   specified phone number @length Length of the code
AuthenticationCodeTypeSms :: Maybe Int -> AuthenticationCodeType

[_length] :: AuthenticationCodeType -> Maybe Int

-- | An authentication code is delivered via a phone call to the specified
--   phone number @length Length of the code
AuthenticationCodeTypeCall :: Maybe Int -> AuthenticationCodeType

[_length] :: AuthenticationCodeType -> Maybe Int

-- | An authentication code is delivered by an immediately canceled call to
--   the specified phone number. The phone number that calls is the code
--   that must be entered automatically @pattern Pattern of the phone
--   number from which the call will be made
AuthenticationCodeTypeFlashCall :: Maybe String -> AuthenticationCodeType

[pattern] :: AuthenticationCodeType -> Maybe String

-- | An authentication code is delivered by an immediately canceled call to
--   the specified phone number. The last digits of the phone number that
--   calls are the code that must be entered manually by the user
--   <tt>phone_number_prefix Prefix of the phone number from which the call
--   will be made </tt>length Number of digits in the code, excluding the
--   prefix
AuthenticationCodeTypeMissedCall :: Maybe Int -> Maybe String -> AuthenticationCodeType

[_length] :: AuthenticationCodeType -> Maybe Int

[phone_number_prefix] :: AuthenticationCodeType -> Maybe String
instance GHC.Classes.Eq TD.Data.AuthenticationCodeType.AuthenticationCodeType
instance GHC.Show.Show TD.Data.AuthenticationCodeType.AuthenticationCodeType
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.AuthenticationCodeType.AuthenticationCodeType
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.AuthenticationCodeType.AuthenticationCodeType


module TD.Data.AuthenticationCodeInfo

data AuthenticationCodeInfo

-- | Information about the authentication code that was sent
--   <tt>phone_number A phone number that is being authenticated </tt>type
--   The way the code was sent to the user <tt>next_type The way the next
--   code will be sent to the user; may be null </tt>timeout Timeout before
--   the code can be re-sent, in seconds
AuthenticationCodeInfo :: Maybe Int -> Maybe AuthenticationCodeType -> Maybe AuthenticationCodeType -> Maybe String -> AuthenticationCodeInfo

[timeout] :: AuthenticationCodeInfo -> Maybe Int

[next_type] :: AuthenticationCodeInfo -> Maybe AuthenticationCodeType

[_type] :: AuthenticationCodeInfo -> Maybe AuthenticationCodeType

[phone_number] :: AuthenticationCodeInfo -> Maybe String
instance GHC.Classes.Eq TD.Data.AuthenticationCodeInfo.AuthenticationCodeInfo
instance GHC.Show.Show TD.Data.AuthenticationCodeInfo.AuthenticationCodeInfo
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.AuthenticationCodeInfo.AuthenticationCodeInfo
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.AuthenticationCodeInfo.AuthenticationCodeInfo


module TD.Data.AuthorizationState

-- | Represents the current authorization state of the TDLib client
data AuthorizationState

-- | TDLib needs TdlibParameters for initialization
AuthorizationStateWaitTdlibParameters :: AuthorizationState

-- | TDLib needs an encryption key to decrypt the local database
--   @is_encrypted True, if the database is currently encrypted
AuthorizationStateWaitEncryptionKey :: Maybe Bool -> AuthorizationState

[is_encrypted] :: AuthorizationState -> Maybe Bool

-- | TDLib needs the user's phone number to authorize. Call
--   <tt>setAuthenticationPhoneNumber</tt> to provide the phone number, or
--   use <tt>requestQrCodeAuthentication</tt>, or
--   <tt>checkAuthenticationBotToken</tt> for other authentication options
AuthorizationStateWaitPhoneNumber :: AuthorizationState

-- | TDLib needs the user's authentication code to authorize @code_info
--   Information about the authorization code that was sent
AuthorizationStateWaitCode :: Maybe AuthenticationCodeInfo -> AuthorizationState

[code_info] :: AuthorizationState -> Maybe AuthenticationCodeInfo

-- | The user needs to confirm authorization on another logged in device by
--   scanning a QR code with the provided link @link A tg:// URL for the QR
--   code. The link will be updated frequently
AuthorizationStateWaitOtherDeviceConfirmation :: Maybe String -> AuthorizationState

[link] :: AuthorizationState -> Maybe String

-- | The user is unregistered and need to accept terms of service and enter
--   their first name and last name to finish registration
--   @terms_of_service Telegram terms of service
AuthorizationStateWaitRegistration :: Maybe TermsOfService -> AuthorizationState

[terms_of_service] :: AuthorizationState -> Maybe TermsOfService

-- | The user has been authorized, but needs to enter a password to start
--   using the application <tt>password_hint Hint for the password; may be
--   empty </tt>has_recovery_email_address True, if a recovery email
--   address has been set up
AuthorizationStateWaitPassword :: Maybe String -> Maybe Bool -> Maybe String -> AuthorizationState

-- | Pattern of the email address to which the recovery email was sent;
--   empty until a recovery email has been sent
[recovery_email_address_pattern] :: AuthorizationState -> Maybe String

[has_recovery_email_address] :: AuthorizationState -> Maybe Bool

[password_hint] :: AuthorizationState -> Maybe String

-- | The user has been successfully authorized. TDLib is now ready to
--   answer queries
AuthorizationStateReady :: AuthorizationState

-- | The user is currently logging out
AuthorizationStateLoggingOut :: AuthorizationState

-- | TDLib is closing, all subsequent queries will be answered with the
--   error 500. Note that closing TDLib can take a while. All resources
--   will be freed only after authorizationStateClosed has been received
AuthorizationStateClosing :: AuthorizationState

-- | TDLib client is in its final state. All databases are closed and all
--   resources are released. No other updates will be received after this.
--   All queries will be responded to with error code 500. To continue
--   working, one must create a new instance of the TDLib client
AuthorizationStateClosed :: AuthorizationState
instance GHC.Classes.Eq TD.Data.AuthorizationState.AuthorizationState
instance GHC.Show.Show TD.Data.AuthorizationState.AuthorizationState
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.AuthorizationState.AuthorizationState
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.AuthorizationState.AuthorizationState


module TD.Data.Audio

data Audio

-- | Describes an audio file. Audio is usually in MP3 or M4A format
--   <tt>duration Duration of the audio, in seconds; as defined by the
--   sender </tt>title Title of the audio; as defined by the sender
--   @performer Performer of the audio; as defined by the sender
Audio :: Maybe File -> Maybe Thumbnail -> Maybe Minithumbnail -> Maybe String -> Maybe String -> Maybe String -> Maybe String -> Maybe Int -> Audio

[audio] :: Audio -> Maybe File

-- | The thumbnail of the album cover in JPEG format; as defined by the
--   sender. The full size thumbnail is supposed to be extracted from the
--   downloaded file; may be null @audio File containing the audio
[album_cover_thumbnail] :: Audio -> Maybe Thumbnail

[album_cover_minithumbnail] :: Audio -> Maybe Minithumbnail

[mime_type] :: Audio -> Maybe String

-- | Original name of the file; as defined by the sender <tt>mime_type The
--   MIME type of the file; as defined by the sender
--   </tt>album_cover_minithumbnail The minithumbnail of the album cover;
--   may be null
[file_name] :: Audio -> Maybe String

[performer] :: Audio -> Maybe String

[title] :: Audio -> Maybe String

[duration] :: Audio -> Maybe Int
instance GHC.Classes.Eq TD.Data.Audio.Audio
instance GHC.Show.Show TD.Data.Audio.Audio
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.Audio.Audio
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.Audio.Audio


module TD.Data.AttachmentMenuBotColor

data AttachmentMenuBotColor

-- | Describes a color to highlight a bot added to attachment menu
--   <tt>light_color Color in the RGB24 format for light themes
--   </tt>dark_color Color in the RGB24 format for dark themes
AttachmentMenuBotColor :: Maybe Int -> Maybe Int -> AttachmentMenuBotColor

[dark_color] :: AttachmentMenuBotColor -> Maybe Int

[light_color] :: AttachmentMenuBotColor -> Maybe Int
instance GHC.Classes.Eq TD.Data.AttachmentMenuBotColor.AttachmentMenuBotColor
instance GHC.Show.Show TD.Data.AttachmentMenuBotColor.AttachmentMenuBotColor
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.AttachmentMenuBotColor.AttachmentMenuBotColor
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.AttachmentMenuBotColor.AttachmentMenuBotColor


module TD.Data.AttachmentMenuBot

data AttachmentMenuBot

-- | Represents a bot added to attachment menu
AttachmentMenuBot :: Maybe File -> Maybe AttachmentMenuBotColor -> Maybe File -> Maybe File -> Maybe File -> Maybe File -> Maybe File -> Maybe AttachmentMenuBotColor -> Maybe String -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Int -> AttachmentMenuBot

-- | Default placeholder for opened Web Apps in SVG format; may be null
[web_app_placeholder] :: AttachmentMenuBot -> Maybe File

-- | Color to highlight selected icon of the bot if appropriate; may be
--   null
[icon_color] :: AttachmentMenuBot -> Maybe AttachmentMenuBotColor

-- | Attachment menu icon for the bot in TGS format for the official native
--   macOS app; may be null
[macos_icon] :: AttachmentMenuBot -> Maybe File

-- | Attachment menu icon for the bot in TGS format for the official
--   Android app; may be null
[android_icon] :: AttachmentMenuBot -> Maybe File

-- | Attachment menu icon for the bot in TGS format for the official iOS
--   app; may be null
[ios_animated_icon] :: AttachmentMenuBot -> Maybe File

-- | Attachment menu icon for the bot in SVG format for the official iOS
--   app; may be null
[ios_static_icon] :: AttachmentMenuBot -> Maybe File

-- | Default attachment menu icon for the bot in SVG format; may be null
[default_icon] :: AttachmentMenuBot -> Maybe File

-- | Color to highlight selected name of the bot if appropriate; may be
--   null
[name_color] :: AttachmentMenuBot -> Maybe AttachmentMenuBotColor

-- | Name for the bot in attachment menu
[name] :: AttachmentMenuBot -> Maybe String

-- | True, if the bot supports "settings_button_pressed" event
[supports_settings] :: AttachmentMenuBot -> Maybe Bool

-- | True, if the bot supports opening from attachment menu in channel
--   chats
[supports_channel_chats] :: AttachmentMenuBot -> Maybe Bool

-- | True, if the bot supports opening from attachment menu in basic group
--   and supergroup chats
[supports_group_chats] :: AttachmentMenuBot -> Maybe Bool

-- | True, if the bot supports opening from attachment menu in private
--   chats with other bots
[supports_bot_chats] :: AttachmentMenuBot -> Maybe Bool

-- | True, if the bot supports opening from attachment menu in private
--   chats with ordinary users
[supports_user_chats] :: AttachmentMenuBot -> Maybe Bool

-- | True, if the bot supports opening from attachment menu in the chat
--   with the bot
[supports_self_chat] :: AttachmentMenuBot -> Maybe Bool

-- | User identifier of the bot added to attachment menu
[bot_user_id] :: AttachmentMenuBot -> Maybe Int
instance GHC.Classes.Eq TD.Data.AttachmentMenuBot.AttachmentMenuBot
instance GHC.Show.Show TD.Data.AttachmentMenuBot.AttachmentMenuBot
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.AttachmentMenuBot.AttachmentMenuBot
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.AttachmentMenuBot.AttachmentMenuBot


module TD.Data.Animation

data Animation

-- | Describes an animation file. The animation must be encoded in GIF or
--   MPEG4 format <tt>duration Duration of the animation, in seconds; as
--   defined by the sender </tt>width Width of the animation @height Height
--   of the animation
Animation :: Maybe File -> Maybe Thumbnail -> Maybe Minithumbnail -> Maybe Bool -> Maybe String -> Maybe String -> Maybe Int -> Maybe Int -> Maybe Int -> Animation

[animation] :: Animation -> Maybe File

[thumbnail] :: Animation -> Maybe Thumbnail

-- | Animation minithumbnail; may be null <tt>thumbnail Animation thumbnail
--   in JPEG or MPEG4 format; may be null </tt>animation File containing
--   the animation
[minithumbnail] :: Animation -> Maybe Minithumbnail

-- | True, if stickers were added to the animation. The list of
--   corresponding sticker set can be received using getAttachedStickerSets
[has_stickers] :: Animation -> Maybe Bool

[mime_type] :: Animation -> Maybe String

-- | Original name of the file; as defined by the sender @mime_type MIME
--   type of the file, usually "image<i>gif" or "video</i>mp4"
[file_name] :: Animation -> Maybe String

[height] :: Animation -> Maybe Int

[width] :: Animation -> Maybe Int

[duration] :: Animation -> Maybe Int
instance GHC.Classes.Eq TD.Data.Animation.Animation
instance GHC.Show.Show TD.Data.Animation.Animation
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.Animation.Animation
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.Animation.Animation


module TD.Data.WebPage

data WebPage

-- | Describes a web page preview
WebPage :: Maybe Int -> Maybe VoiceNote -> Maybe VideoNote -> Maybe Video -> Maybe Sticker -> Maybe Document -> Maybe Audio -> Maybe Animation -> Maybe String -> Maybe Int -> Maybe Int -> Maybe Int -> Maybe String -> Maybe String -> Maybe Photo -> Maybe FormattedText -> Maybe String -> Maybe String -> Maybe String -> Maybe String -> Maybe String -> WebPage

-- | Version of instant view, available for the web page (currently, can be
--   1 or 2), 0 if none
[instant_view_version] :: WebPage -> Maybe Int

-- | Preview of the content as a voice note, if available; may be null
[voice_note] :: WebPage -> Maybe VoiceNote

-- | Preview of the content as a video note, if available; may be null
[video_note] :: WebPage -> Maybe VideoNote

-- | Preview of the content as a video, if available; may be null
[video] :: WebPage -> Maybe Video

-- | Preview of the content as a sticker for small WEBP files, if
--   available; may be null
[sticker] :: WebPage -> Maybe Sticker

-- | Preview of the content as a document, if available; may be null
[document] :: WebPage -> Maybe Document

-- | Preview of the content as an audio file, if available; may be null
[audio] :: WebPage -> Maybe Audio

-- | Preview of the content as an animation, if available; may be null
[animation] :: WebPage -> Maybe Animation

-- | Author of the content
[author] :: WebPage -> Maybe String

-- | Duration of the content, in seconds
[duration] :: WebPage -> Maybe Int

-- | Height of the embedded preview
[embed_height] :: WebPage -> Maybe Int

-- | Width of the embedded preview
[embed_width] :: WebPage -> Maybe Int

-- | MIME type of the embedded preview, (e.g., text<i>html or video</i>mp4)
[embed_type] :: WebPage -> Maybe String

-- | URL to show in the embedded preview
[embed_url] :: WebPage -> Maybe String

-- | Image representing the content; may be null
[photo] :: WebPage -> Maybe Photo

[description] :: WebPage -> Maybe FormattedText

-- | Title of the content
[title] :: WebPage -> Maybe String

-- | Short name of the site (e.g., Google Docs, App Store)
[site_name] :: WebPage -> Maybe String

-- | Type of the web page. Can be: article, photo, audio, video, document,
--   profile, app, or something else
[_type] :: WebPage -> Maybe String

-- | URL to display
[display_url] :: WebPage -> Maybe String

-- | Original URL of the link
[url] :: WebPage -> Maybe String
instance GHC.Classes.Eq TD.Data.WebPage.WebPage
instance GHC.Show.Show TD.Data.WebPage.WebPage
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.WebPage.WebPage
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.WebPage.WebPage


module TD.Data.PushMessageContent

-- | Contains content of a push message notification
data PushMessageContent

-- | A general message with hidden content @is_pinned True, if the message
--   is a pinned message with the specified content
PushMessageContentHidden :: Maybe Bool -> PushMessageContent

[is_pinned] :: PushMessageContent -> Maybe Bool

-- | An animation message (GIF-style). <tt>animation Message content; may
--   be null </tt>caption Animation caption @is_pinned True, if the message
--   is a pinned message with the specified content
PushMessageContentAnimation :: Maybe Bool -> Maybe String -> Maybe Animation -> PushMessageContent

[is_pinned] :: PushMessageContent -> Maybe Bool

[caption] :: PushMessageContent -> Maybe String

[animation] :: PushMessageContent -> Maybe Animation

-- | An audio message <tt>audio Message content; may be null </tt>is_pinned
--   True, if the message is a pinned message with the specified content
PushMessageContentAudio :: Maybe Bool -> Maybe Audio -> PushMessageContent

[is_pinned] :: PushMessageContent -> Maybe Bool

[audio] :: PushMessageContent -> Maybe Audio

-- | A message with a user contact <tt>name Contact's name </tt>is_pinned
--   True, if the message is a pinned message with the specified content
PushMessageContentContact :: Maybe Bool -> Maybe String -> PushMessageContent

[is_pinned] :: PushMessageContent -> Maybe Bool

[name] :: PushMessageContent -> Maybe String

-- | A contact has registered with Telegram
PushMessageContentContactRegistered :: PushMessageContent

-- | A document message (a general file) <tt>document Message content; may
--   be null </tt>is_pinned True, if the message is a pinned message with
--   the specified content
PushMessageContentDocument :: Maybe Bool -> Maybe Document -> PushMessageContent

[is_pinned] :: PushMessageContent -> Maybe Bool

[document] :: PushMessageContent -> Maybe Document

-- | A message with a game <tt>title Game title, empty for pinned game
--   message </tt>is_pinned True, if the message is a pinned message with
--   the specified content
PushMessageContentGame :: Maybe Bool -> Maybe String -> PushMessageContent

[is_pinned] :: PushMessageContent -> Maybe Bool

[title] :: PushMessageContent -> Maybe String

-- | A new high score was achieved in a game <tt>title Game title, empty
--   for pinned message </tt>score New score, 0 for pinned message
--   @is_pinned True, if the message is a pinned message with the specified
--   content
PushMessageContentGameScore :: Maybe Bool -> Maybe Int -> Maybe String -> PushMessageContent

[is_pinned] :: PushMessageContent -> Maybe Bool

[score] :: PushMessageContent -> Maybe Int

[title] :: PushMessageContent -> Maybe String

-- | A message with an invoice from a bot <tt>price Product price
--   </tt>is_pinned True, if the message is a pinned message with the
--   specified content
PushMessageContentInvoice :: Maybe Bool -> Maybe String -> PushMessageContent

[is_pinned] :: PushMessageContent -> Maybe Bool

[price] :: PushMessageContent -> Maybe String

-- | A message with a location <tt>is_live True, if the location is live
--   </tt>is_pinned True, if the message is a pinned message with the
--   specified content
PushMessageContentLocation :: Maybe Bool -> Maybe Bool -> PushMessageContent

[is_pinned] :: PushMessageContent -> Maybe Bool

[is_live] :: PushMessageContent -> Maybe Bool

-- | A photo message <tt>photo Message content; may be null </tt>caption
--   Photo caption <tt>is_secret True, if the photo is secret
--   </tt>is_pinned True, if the message is a pinned message with the
--   specified content
PushMessageContentPhoto :: Maybe Bool -> Maybe Bool -> Maybe String -> Maybe Photo -> PushMessageContent

[is_pinned] :: PushMessageContent -> Maybe Bool

[is_secret] :: PushMessageContent -> Maybe Bool

[caption] :: PushMessageContent -> Maybe String

[photo] :: PushMessageContent -> Maybe Photo

-- | A message with a poll <tt>question Poll question </tt>is_regular True,
--   if the poll is regular and not in quiz mode @is_pinned True, if the
--   message is a pinned message with the specified content
PushMessageContentPoll :: Maybe Bool -> Maybe Bool -> Maybe String -> PushMessageContent

[is_pinned] :: PushMessageContent -> Maybe Bool

[is_regular] :: PushMessageContent -> Maybe Bool

[question] :: PushMessageContent -> Maybe String

-- | A screenshot of a message in the chat has been taken
PushMessageContentScreenshotTaken :: PushMessageContent

-- | A message with a sticker <tt>sticker Message content; may be null
--   </tt>emoji Emoji corresponding to the sticker; may be empty @is_pinned
--   True, if the message is a pinned message with the specified content
PushMessageContentSticker :: Maybe Bool -> Maybe String -> Maybe Sticker -> PushMessageContent

[is_pinned] :: PushMessageContent -> Maybe Bool

[emoji] :: PushMessageContent -> Maybe String

[sticker] :: PushMessageContent -> Maybe Sticker

-- | A text message <tt>text Message text </tt>is_pinned True, if the
--   message is a pinned message with the specified content
PushMessageContentText :: Maybe Bool -> Maybe String -> PushMessageContent

[is_pinned] :: PushMessageContent -> Maybe Bool

[text] :: PushMessageContent -> Maybe String

-- | A video message <tt>video Message content; may be null </tt>caption
--   Video caption <tt>is_secret True, if the video is secret
--   </tt>is_pinned True, if the message is a pinned message with the
--   specified content
PushMessageContentVideo :: Maybe Bool -> Maybe Bool -> Maybe String -> Maybe Video -> PushMessageContent

[is_pinned] :: PushMessageContent -> Maybe Bool

[is_secret] :: PushMessageContent -> Maybe Bool

[caption] :: PushMessageContent -> Maybe String

[video] :: PushMessageContent -> Maybe Video

-- | A video note message <tt>video_note Message content; may be null
--   </tt>is_pinned True, if the message is a pinned message with the
--   specified content
PushMessageContentVideoNote :: Maybe Bool -> Maybe VideoNote -> PushMessageContent

[is_pinned] :: PushMessageContent -> Maybe Bool

[video_note] :: PushMessageContent -> Maybe VideoNote

-- | A voice note message <tt>voice_note Message content; may be null
--   </tt>is_pinned True, if the message is a pinned message with the
--   specified content
PushMessageContentVoiceNote :: Maybe Bool -> Maybe VoiceNote -> PushMessageContent

[is_pinned] :: PushMessageContent -> Maybe Bool

[voice_note] :: PushMessageContent -> Maybe VoiceNote

-- | A newly created basic group
PushMessageContentBasicGroupChatCreate :: PushMessageContent

-- | New chat members were invited to a group <tt>member_name Name of the
--   added member </tt>is_current_user True, if the current user was added
--   to the group
PushMessageContentChatAddMembers :: Maybe Bool -> Maybe Bool -> Maybe String -> PushMessageContent

-- | True, if the user has returned to the group themselves
[is_returned] :: PushMessageContent -> Maybe Bool

[is_current_user] :: PushMessageContent -> Maybe Bool

[member_name] :: PushMessageContent -> Maybe String

-- | A chat photo was edited
PushMessageContentChatChangePhoto :: PushMessageContent

-- | A chat title was edited @title New chat title
PushMessageContentChatChangeTitle :: Maybe String -> PushMessageContent

[title] :: PushMessageContent -> Maybe String

-- | A chat theme was edited @theme_name If non-empty, name of a new theme,
--   set for the chat. Otherwise chat theme was reset to the default one
PushMessageContentChatSetTheme :: Maybe String -> PushMessageContent

[theme_name] :: PushMessageContent -> Maybe String

-- | A chat member was deleted <tt>member_name Name of the deleted member
--   </tt>is_current_user True, if the current user was deleted from the
--   group
PushMessageContentChatDeleteMember :: Maybe Bool -> Maybe Bool -> Maybe String -> PushMessageContent

-- | True, if the user has left the group themselves
[is_left] :: PushMessageContent -> Maybe Bool

[is_current_user] :: PushMessageContent -> Maybe Bool

[member_name] :: PushMessageContent -> Maybe String

-- | A new member joined the chat via an invite link
PushMessageContentChatJoinByLink :: PushMessageContent

-- | A new member was accepted to the chat by an administrator
PushMessageContentChatJoinByRequest :: PushMessageContent

-- | A new recurrent payment was made by the current user @amount The paid
--   amount
PushMessageContentRecurringPayment :: Maybe String -> PushMessageContent

[amount] :: PushMessageContent -> Maybe String

-- | A forwarded messages @total_count Number of forwarded messages
PushMessageContentMessageForwards :: Maybe Int -> PushMessageContent

[total_count] :: PushMessageContent -> Maybe Int

-- | A media album <tt>total_count Number of messages in the album
--   </tt>has_photos True, if the album has at least one photo @has_videos
--   True, if the album has at least one video
PushMessageContentMediaAlbum :: Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Int -> PushMessageContent

[has_documents] :: PushMessageContent -> Maybe Bool

-- | True, if the album has at least one audio file @has_documents True, if
--   the album has at least one document
[has_audios] :: PushMessageContent -> Maybe Bool

[has_videos] :: PushMessageContent -> Maybe Bool

[has_photos] :: PushMessageContent -> Maybe Bool

[total_count] :: PushMessageContent -> Maybe Int
instance GHC.Classes.Eq TD.Data.PushMessageContent.PushMessageContent
instance GHC.Show.Show TD.Data.PushMessageContent.PushMessageContent
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.PushMessageContent.PushMessageContent
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.PushMessageContent.PushMessageContent


module TD.Data.PremiumFeaturePromotionAnimation

data PremiumFeaturePromotionAnimation

-- | Describes a promotion animation for a Premium feature <tt>feature
--   Premium feature </tt>animation Promotion animation for the feature
PremiumFeaturePromotionAnimation :: Maybe Animation -> Maybe PremiumFeature -> PremiumFeaturePromotionAnimation

[animation] :: PremiumFeaturePromotionAnimation -> Maybe Animation

[feature] :: PremiumFeaturePromotionAnimation -> Maybe PremiumFeature
instance GHC.Classes.Eq TD.Data.PremiumFeaturePromotionAnimation.PremiumFeaturePromotionAnimation
instance GHC.Show.Show TD.Data.PremiumFeaturePromotionAnimation.PremiumFeaturePromotionAnimation
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.PremiumFeaturePromotionAnimation.PremiumFeaturePromotionAnimation
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.PremiumFeaturePromotionAnimation.PremiumFeaturePromotionAnimation


module TD.Data.PremiumState

data PremiumState

-- | Contains state of Telegram Premium subscription and promotion videos
--   for Premium features
PremiumState :: Maybe [PremiumFeaturePromotionAnimation] -> Maybe Int -> Maybe String -> Maybe FormattedText -> PremiumState

-- | The list of available promotion animations for Premium features
[animations] :: PremiumState -> Maybe [PremiumFeaturePromotionAnimation]

-- | Monthly subscription payment for Telegram Premium subscription, in the
--   smallest units of the currency
[monthly_amount] :: PremiumState -> Maybe Int

-- | ISO 4217 currency code for Telegram Premium subscription payment
[currency] :: PremiumState -> Maybe String

-- | Text description of the state of the current Premium subscription; may
--   be empty if the current user has no Telegram Premium subscription
[state] :: PremiumState -> Maybe FormattedText
instance GHC.Classes.Eq TD.Data.PremiumState.PremiumState
instance GHC.Show.Show TD.Data.PremiumState.PremiumState
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.PremiumState.PremiumState
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.PremiumState.PremiumState


module TD.Data.PageBlock

-- | Describes a block of an instant view web page
data PageBlock

-- | The title of a page @title Title
PageBlockTitle :: Maybe RichText -> PageBlock

[title] :: PageBlock -> Maybe RichText

-- | The subtitle of a page @subtitle Subtitle
PageBlockSubtitle :: Maybe RichText -> PageBlock

[subtitle] :: PageBlock -> Maybe RichText

-- | The author and publishing date of a page <tt>author Author
--   </tt>publish_date Point in time (Unix timestamp) when the article was
--   published; 0 if unknown
PageBlockAuthorDate :: Maybe Int -> Maybe RichText -> PageBlock

[publish_date] :: PageBlock -> Maybe Int

[author] :: PageBlock -> Maybe RichText

-- | A header @header Header
PageBlockHeader :: Maybe RichText -> PageBlock

[header] :: PageBlock -> Maybe RichText

-- | A subheader @subheader Subheader
PageBlockSubheader :: Maybe RichText -> PageBlock

[subheader] :: PageBlock -> Maybe RichText

-- | A kicker @kicker Kicker
PageBlockKicker :: Maybe RichText -> PageBlock

[kicker] :: PageBlock -> Maybe RichText

-- | A text paragraph @text Paragraph text
PageBlockParagraph :: Maybe RichText -> PageBlock

[text] :: PageBlock -> Maybe RichText

-- | A preformatted text paragraph <tt>text Paragraph text </tt>language
--   Programming language for which the text needs to be formatted
PageBlockPreformatted :: Maybe String -> Maybe RichText -> PageBlock

[language] :: PageBlock -> Maybe String

[text] :: PageBlock -> Maybe RichText

-- | The footer of a page @footer Footer
PageBlockFooter :: Maybe RichText -> PageBlock

[footer] :: PageBlock -> Maybe RichText

-- | An empty block separating a page
PageBlockDivider :: PageBlock

-- | An invisible anchor on a page, which can be used in a URL to open the
--   page from the specified anchor @name Name of the anchor
PageBlockAnchor :: Maybe String -> PageBlock

[name] :: PageBlock -> Maybe String

-- | A list of data blocks @items The items of the list
PageBlockList :: Maybe [PageBlockListItem] -> PageBlock

[items] :: PageBlock -> Maybe [PageBlockListItem]

-- | A block quote <tt>text Quote text </tt>credit Quote credit
PageBlockBlockQuote :: Maybe RichText -> Maybe RichText -> PageBlock

[credit] :: PageBlock -> Maybe RichText

[text] :: PageBlock -> Maybe RichText

-- | A pull quote <tt>text Quote text </tt>credit Quote credit
PageBlockPullQuote :: Maybe RichText -> Maybe RichText -> PageBlock

[credit] :: PageBlock -> Maybe RichText

[text] :: PageBlock -> Maybe RichText

-- | An animation <tt>animation Animation file; may be null </tt>caption
--   Animation caption @need_autoplay True, if the animation must be played
--   automatically
PageBlockAnimation :: Maybe Bool -> Maybe PageBlockCaption -> Maybe Animation -> PageBlock

[need_autoplay] :: PageBlock -> Maybe Bool

[caption] :: PageBlock -> Maybe PageBlockCaption

[animation] :: PageBlock -> Maybe Animation

-- | An audio file <tt>audio Audio file; may be null </tt>caption Audio
--   file caption
PageBlockAudio :: Maybe PageBlockCaption -> Maybe Audio -> PageBlock

[caption] :: PageBlock -> Maybe PageBlockCaption

[audio] :: PageBlock -> Maybe Audio

-- | A photo <tt>photo Photo file; may be null </tt>caption Photo caption
--   @url URL that needs to be opened when the photo is clicked
PageBlockPhoto :: Maybe String -> Maybe PageBlockCaption -> Maybe Photo -> PageBlock

[url] :: PageBlock -> Maybe String

[caption] :: PageBlock -> Maybe PageBlockCaption

[photo] :: PageBlock -> Maybe Photo

-- | A video <tt>video Video file; may be null </tt>caption Video caption
--   <tt>need_autoplay True, if the video must be played automatically
--   </tt>is_looped True, if the video must be looped
PageBlockVideo :: Maybe Bool -> Maybe Bool -> Maybe PageBlockCaption -> Maybe Video -> PageBlock

[is_looped] :: PageBlock -> Maybe Bool

[need_autoplay] :: PageBlock -> Maybe Bool

[caption] :: PageBlock -> Maybe PageBlockCaption

[video] :: PageBlock -> Maybe Video

-- | A voice note <tt>voice_note Voice note; may be null </tt>caption Voice
--   note caption
PageBlockVoiceNote :: Maybe PageBlockCaption -> Maybe VoiceNote -> PageBlock

[caption] :: PageBlock -> Maybe PageBlockCaption

[voice_note] :: PageBlock -> Maybe VoiceNote

-- | A page cover @cover Cover
PageBlockCover :: Maybe PageBlock -> PageBlock

[cover] :: PageBlock -> Maybe PageBlock

-- | An embedded web page <tt>url Web page URL, if available </tt>html
--   HTML-markup of the embedded page <tt>poster_photo Poster photo, if
--   available; may be null </tt>width Block width; 0 if unknown <tt>height
--   Block height; 0 if unknown </tt>caption Block caption
--   <tt>is_full_width True, if the block must be full width
--   </tt>allow_scrolling True, if scrolling needs to be allowed
PageBlockEmbedded :: Maybe Bool -> Maybe Bool -> Maybe PageBlockCaption -> Maybe Int -> Maybe Int -> Maybe Photo -> Maybe String -> Maybe String -> PageBlock

[allow_scrolling] :: PageBlock -> Maybe Bool

[is_full_width] :: PageBlock -> Maybe Bool

[caption] :: PageBlock -> Maybe PageBlockCaption

[height] :: PageBlock -> Maybe Int

[width] :: PageBlock -> Maybe Int

[poster_photo] :: PageBlock -> Maybe Photo

[html] :: PageBlock -> Maybe String

[url] :: PageBlock -> Maybe String

-- | An embedded post <tt>url Web page URL </tt>author Post author
--   <tt>author_photo Post author photo; may be null </tt>date Point in
--   time (Unix timestamp) when the post was created; 0 if unknown
--   <tt>page_blocks Post content </tt>caption Post caption
PageBlockEmbeddedPost :: Maybe PageBlockCaption -> Maybe [PageBlock] -> Maybe Int -> Maybe Photo -> Maybe String -> Maybe String -> PageBlock

[caption] :: PageBlock -> Maybe PageBlockCaption

[page_blocks] :: PageBlock -> Maybe [PageBlock]

[date] :: PageBlock -> Maybe Int

[author_photo] :: PageBlock -> Maybe Photo

[_author] :: PageBlock -> Maybe String

[url] :: PageBlock -> Maybe String

-- | A collage <tt>page_blocks Collage item contents </tt>caption Block
--   caption
PageBlockCollage :: Maybe PageBlockCaption -> Maybe [PageBlock] -> PageBlock

[caption] :: PageBlock -> Maybe PageBlockCaption

[page_blocks] :: PageBlock -> Maybe [PageBlock]

-- | A slideshow <tt>page_blocks Slideshow item contents </tt>caption Block
--   caption
PageBlockSlideshow :: Maybe PageBlockCaption -> Maybe [PageBlock] -> PageBlock

[caption] :: PageBlock -> Maybe PageBlockCaption

[page_blocks] :: PageBlock -> Maybe [PageBlock]

-- | A link to a chat <tt>title Chat title </tt>photo Chat photo; may be
--   null @username Chat username by which all other information about the
--   chat can be resolved
PageBlockChatLink :: Maybe String -> Maybe ChatPhotoInfo -> Maybe String -> PageBlock

[username] :: PageBlock -> Maybe String

[_photo] :: PageBlock -> Maybe ChatPhotoInfo

[_title] :: PageBlock -> Maybe String

-- | A table <tt>caption Table caption </tt>cells Table cells
--   <tt>is_bordered True, if the table is bordered </tt>is_striped True,
--   if the table is striped
PageBlockTable :: Maybe Bool -> Maybe Bool -> Maybe [[PageBlockTableCell]] -> Maybe RichText -> PageBlock

[is_striped] :: PageBlock -> Maybe Bool

[is_bordered] :: PageBlock -> Maybe Bool

[cells] :: PageBlock -> Maybe [[PageBlockTableCell]]

[_caption] :: PageBlock -> Maybe RichText

-- | A collapsible block <tt>header Always visible heading for the block
--   </tt>page_blocks Block contents @is_open True, if the block is open by
--   default
PageBlockDetails :: Maybe Bool -> Maybe [PageBlock] -> Maybe RichText -> PageBlock

[is_open] :: PageBlock -> Maybe Bool

[page_blocks] :: PageBlock -> Maybe [PageBlock]

[header] :: PageBlock -> Maybe RichText

-- | Related articles <tt>header Block header </tt>articles List of related
--   articles
PageBlockRelatedArticles :: Maybe [PageBlockRelatedArticle] -> Maybe RichText -> PageBlock

[articles] :: PageBlock -> Maybe [PageBlockRelatedArticle]

[header] :: PageBlock -> Maybe RichText

-- | A map <tt>location Location of the map center </tt>zoom Map zoom level
--   <tt>width Map width </tt>height Map height @caption Block caption
PageBlockMap :: Maybe PageBlockCaption -> Maybe Int -> Maybe Int -> Maybe Int -> Maybe Location -> PageBlock

[caption] :: PageBlock -> Maybe PageBlockCaption

[height] :: PageBlock -> Maybe Int

[width] :: PageBlock -> Maybe Int

[zoom] :: PageBlock -> Maybe Int

[location] :: PageBlock -> Maybe Location
instance GHC.Classes.Eq TD.Data.PageBlock.PageBlock
instance GHC.Show.Show TD.Data.PageBlock.PageBlock
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.PageBlock.PageBlock
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.PageBlock.PageBlock


module TD.Data.WebPageInstantView

data WebPageInstantView

-- | Describes an instant view page for a web page
WebPageInstantView :: Maybe InternalLinkType -> Maybe Bool -> Maybe Bool -> Maybe Int -> Maybe Int -> Maybe [PageBlock] -> WebPageInstantView

-- | An internal link to be opened to leave feedback about the instant view
[feedback_link] :: WebPageInstantView -> Maybe InternalLinkType

-- | True, if the instant view contains the full page. A network request
--   might be needed to get the full web page instant view
[is_full] :: WebPageInstantView -> Maybe Bool

-- | True, if the instant view must be shown from right to left
[is_rtl] :: WebPageInstantView -> Maybe Bool

-- | Version of the instant view; currently, can be 1 or 2
[version] :: WebPageInstantView -> Maybe Int

-- | Number of the instant view views; 0 if unknown
[view_count] :: WebPageInstantView -> Maybe Int

-- | Content of the web page
[page_blocks] :: WebPageInstantView -> Maybe [PageBlock]
instance GHC.Classes.Eq TD.Data.WebPageInstantView.WebPageInstantView
instance GHC.Show.Show TD.Data.WebPageInstantView.WebPageInstantView
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.WebPageInstantView.WebPageInstantView
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.WebPageInstantView.WebPageInstantView


module TD.Data.Game

data Game

-- | Describes a game <tt>id Game ID </tt>short_name Game short name. To
--   share a game use the URL
--   <a>https://t.me/{bot_username}?game={game_short_name}</a> <tt>title
--   Game title </tt>text Game text, usually containing scoreboards for a
--   game
Game :: Maybe Animation -> Maybe Photo -> Maybe String -> Maybe FormattedText -> Maybe String -> Maybe String -> Maybe Int -> Game

[animation] :: Game -> Maybe Animation

[photo] :: Game -> Maybe Photo

[description] :: Game -> Maybe String

[text] :: Game -> Maybe FormattedText

[title] :: Game -> Maybe String

[short_name] :: Game -> Maybe String

[_id] :: Game -> Maybe Int
instance GHC.Classes.Eq TD.Data.Game.Game
instance GHC.Show.Show TD.Data.Game.Game
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.Game.Game
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.Game.Game


module TD.Data.InlineQueryResult

-- | Represents a single result of an inline query
data InlineQueryResult

-- | Represents a link to an article or web page <tt>id Unique identifier
--   of the query result </tt>url URL of the result, if it exists
--   <tt>hide_url True, if the URL must be not shown </tt>title Title of
--   the result
InlineQueryResultArticle :: Maybe Thumbnail -> Maybe String -> Maybe String -> Maybe Bool -> Maybe String -> Maybe String -> InlineQueryResult

[thumbnail] :: InlineQueryResult -> Maybe Thumbnail

[description] :: InlineQueryResult -> Maybe String

[title] :: InlineQueryResult -> Maybe String

[hide_url] :: InlineQueryResult -> Maybe Bool

[url] :: InlineQueryResult -> Maybe String

[_id] :: InlineQueryResult -> Maybe String

-- | Represents a user contact <tt>id Unique identifier of the query result
--   </tt>contact A user contact @thumbnail Result thumbnail in JPEG
--   format; may be null
InlineQueryResultContact :: Maybe Thumbnail -> Maybe Contact -> Maybe String -> InlineQueryResult

[thumbnail] :: InlineQueryResult -> Maybe Thumbnail

[contact] :: InlineQueryResult -> Maybe Contact

[_id] :: InlineQueryResult -> Maybe String

-- | Represents a point on the map <tt>id Unique identifier of the query
--   result </tt>location Location result <tt>title Title of the result
--   </tt>thumbnail Result thumbnail in JPEG format; may be null
InlineQueryResultLocation :: Maybe Thumbnail -> Maybe String -> Maybe Location -> Maybe String -> InlineQueryResult

[thumbnail] :: InlineQueryResult -> Maybe Thumbnail

[title] :: InlineQueryResult -> Maybe String

[location] :: InlineQueryResult -> Maybe Location

[_id] :: InlineQueryResult -> Maybe String

-- | Represents information about a venue <tt>id Unique identifier of the
--   query result </tt>venue Venue result @thumbnail Result thumbnail in
--   JPEG format; may be null
InlineQueryResultVenue :: Maybe Thumbnail -> Maybe Venue -> Maybe String -> InlineQueryResult

[thumbnail] :: InlineQueryResult -> Maybe Thumbnail

[venue] :: InlineQueryResult -> Maybe Venue

[_id] :: InlineQueryResult -> Maybe String

-- | Represents information about a game <tt>id Unique identifier of the
--   query result </tt>game Game result
InlineQueryResultGame :: Maybe Game -> Maybe String -> InlineQueryResult

[game] :: InlineQueryResult -> Maybe Game

[_id] :: InlineQueryResult -> Maybe String

-- | Represents an animation file <tt>id Unique identifier of the query
--   result </tt>animation Animation file @title Animation title
InlineQueryResultAnimation :: Maybe String -> Maybe Animation -> Maybe String -> InlineQueryResult

[title] :: InlineQueryResult -> Maybe String

[animation] :: InlineQueryResult -> Maybe Animation

[_id] :: InlineQueryResult -> Maybe String

-- | Represents an audio file <tt>id Unique identifier of the query result
--   </tt>audio Audio file
InlineQueryResultAudio :: Maybe Audio -> Maybe String -> InlineQueryResult

[audio] :: InlineQueryResult -> Maybe Audio

[_id] :: InlineQueryResult -> Maybe String

-- | Represents a document <tt>id Unique identifier of the query result
--   </tt>document Document <tt>title Document title </tt>param_description
--   Document description
InlineQueryResultDocument :: Maybe String -> Maybe String -> Maybe Document -> Maybe String -> InlineQueryResult

[description] :: InlineQueryResult -> Maybe String

[title] :: InlineQueryResult -> Maybe String

[document] :: InlineQueryResult -> Maybe Document

[_id] :: InlineQueryResult -> Maybe String

-- | Represents a photo <tt>id Unique identifier of the query result
--   </tt>photo Photo <tt>title Title of the result, if known
--   </tt>param_description A short description of the result, if known
InlineQueryResultPhoto :: Maybe String -> Maybe String -> Maybe Photo -> Maybe String -> InlineQueryResult

[description] :: InlineQueryResult -> Maybe String

[title] :: InlineQueryResult -> Maybe String

[photo] :: InlineQueryResult -> Maybe Photo

[_id] :: InlineQueryResult -> Maybe String

-- | Represents a sticker <tt>id Unique identifier of the query result
--   </tt>sticker Sticker
InlineQueryResultSticker :: Maybe Sticker -> Maybe String -> InlineQueryResult

[sticker] :: InlineQueryResult -> Maybe Sticker

[_id] :: InlineQueryResult -> Maybe String

-- | Represents a video <tt>id Unique identifier of the query result
--   </tt>video Video <tt>title Title of the video </tt>param_description
--   Description of the video
InlineQueryResultVideo :: Maybe String -> Maybe String -> Maybe Video -> Maybe String -> InlineQueryResult

[description] :: InlineQueryResult -> Maybe String

[title] :: InlineQueryResult -> Maybe String

[video] :: InlineQueryResult -> Maybe Video

[_id] :: InlineQueryResult -> Maybe String

-- | Represents a voice note <tt>id Unique identifier of the query result
--   </tt>voice_note Voice note @title Title of the voice note
InlineQueryResultVoiceNote :: Maybe String -> Maybe VoiceNote -> Maybe String -> InlineQueryResult

[title] :: InlineQueryResult -> Maybe String

[voice_note] :: InlineQueryResult -> Maybe VoiceNote

[_id] :: InlineQueryResult -> Maybe String
instance GHC.Classes.Eq TD.Data.InlineQueryResult.InlineQueryResult
instance GHC.Show.Show TD.Data.InlineQueryResult.InlineQueryResult
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.InlineQueryResult.InlineQueryResult
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.InlineQueryResult.InlineQueryResult


module TD.Data.InlineQueryResults

data InlineQueryResults

-- | Represents the results of the inline query. Use
--   sendInlineQueryResultMessage to send the result of the query
--   <tt>inline_query_id Unique identifier of the inline query
--   </tt>next_offset The offset for the next request. If empty, there are
--   no more results @results Results of the query
InlineQueryResults :: Maybe String -> Maybe String -> Maybe [InlineQueryResult] -> Maybe String -> Maybe Int -> InlineQueryResults

[switch_pm_parameter] :: InlineQueryResults -> Maybe String

-- | If non-empty, this text must be shown on the button, which opens a
--   private chat with the bot and sends the bot a start message with the
--   switch_pm_parameter @switch_pm_parameter Parameter for the bot start
--   message
[switch_pm_text] :: InlineQueryResults -> Maybe String

[results] :: InlineQueryResults -> Maybe [InlineQueryResult]

[next_offset] :: InlineQueryResults -> Maybe String

[inline_query_id] :: InlineQueryResults -> Maybe Int
instance GHC.Classes.Eq TD.Data.InlineQueryResults.InlineQueryResults
instance GHC.Show.Show TD.Data.InlineQueryResults.InlineQueryResults
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.InlineQueryResults.InlineQueryResults
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.InlineQueryResults.InlineQueryResults


module TD.Data.BotInfo

data BotInfo

-- | Contains information about a bot
BotInfo :: Maybe ChatAdministratorRights -> Maybe ChatAdministratorRights -> Maybe [BotCommand] -> Maybe BotMenuButton -> Maybe Animation -> Maybe Photo -> Maybe String -> Maybe String -> BotInfo

-- | Default administrator rights for adding the bot to channels; may be
--   null
[default_channel_administrator_rights] :: BotInfo -> Maybe ChatAdministratorRights

-- | Default administrator rights for adding the bot to basic group and
--   supergroup chats; may be null
[default_group_administrator_rights] :: BotInfo -> Maybe ChatAdministratorRights

-- | List of the bot commands
[commands] :: BotInfo -> Maybe [BotCommand]

-- | Information about a button to show instead of the bot commands menu
--   button; may be null if ordinary bot commands menu must be shown
[menu_button] :: BotInfo -> Maybe BotMenuButton

-- | Animation shown in the chat with the bot if the chat is empty; may be
--   null
[animation] :: BotInfo -> Maybe Animation

-- | Photo shown in the chat with the bot if the chat is empty; may be null
[photo] :: BotInfo -> Maybe Photo

[description] :: BotInfo -> Maybe String

-- | The text that is shown on the bot's profile page and is sent together
--   with the link when users share the bot
[share_text] :: BotInfo -> Maybe String
instance GHC.Classes.Eq TD.Data.BotInfo.BotInfo
instance GHC.Show.Show TD.Data.BotInfo.BotInfo
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.BotInfo.BotInfo
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.BotInfo.BotInfo


module TD.Data.Animations

data Animations

-- | Represents a list of animations @animations List of animations
Animations :: Maybe [Animation] -> Animations

[animations] :: Animations -> Maybe [Animation]
instance GHC.Classes.Eq TD.Data.Animations.Animations
instance GHC.Show.Show TD.Data.Animations.Animations
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.Animations.Animations
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.Animations.Animations


module TD.Data.AnimatedEmoji

data AnimatedEmoji

-- | Describes an animated representation of an emoji
AnimatedEmoji :: Maybe File -> Maybe Int -> Maybe Sticker -> AnimatedEmoji

-- | File containing the sound to be played when the animated emoji is
--   clicked; may be null. The sound is encoded with the Opus codec, and
--   stored inside an OGG container
[sound] :: AnimatedEmoji -> Maybe File

-- | Emoji modifier fitzpatrick type; 0-6; 0 if none
[fitzpatrick_type] :: AnimatedEmoji -> Maybe Int

-- | Animated sticker for the emoji
[sticker] :: AnimatedEmoji -> Maybe Sticker
instance GHC.Classes.Eq TD.Data.AnimatedEmoji.AnimatedEmoji
instance GHC.Show.Show TD.Data.AnimatedEmoji.AnimatedEmoji
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.AnimatedEmoji.AnimatedEmoji
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.AnimatedEmoji.AnimatedEmoji


module TD.Data.AnimatedChatPhoto

data AnimatedChatPhoto

-- | Animated variant of a chat photo in MPEG4 format
AnimatedChatPhoto :: Maybe Float -> Maybe File -> Maybe Int -> AnimatedChatPhoto

-- | Timestamp of the frame, used as a static chat photo
[main_frame_timestamp] :: AnimatedChatPhoto -> Maybe Float

-- | Information about the animation file
[file] :: AnimatedChatPhoto -> Maybe File

-- | Animation width and height
[_length] :: AnimatedChatPhoto -> Maybe Int
instance GHC.Classes.Eq TD.Data.AnimatedChatPhoto.AnimatedChatPhoto
instance GHC.Show.Show TD.Data.AnimatedChatPhoto.AnimatedChatPhoto
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.AnimatedChatPhoto.AnimatedChatPhoto
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.AnimatedChatPhoto.AnimatedChatPhoto


module TD.Data.ChatPhoto

data ChatPhoto

-- | Describes a chat or user profile photo
ChatPhoto :: Maybe AnimatedChatPhoto -> Maybe AnimatedChatPhoto -> Maybe [PhotoSize] -> Maybe Minithumbnail -> Maybe Int -> Maybe Int -> ChatPhoto

-- | A small (160x160) animated variant of the photo in MPEG4 format; may
--   be null even the big animation is available
[small_animation] :: ChatPhoto -> Maybe AnimatedChatPhoto

-- | A big (640x640) animated variant of the photo in MPEG4 format; may be
--   null
[animation] :: ChatPhoto -> Maybe AnimatedChatPhoto

-- | Available variants of the photo in JPEG format, in different size
[sizes] :: ChatPhoto -> Maybe [PhotoSize]

-- | Photo minithumbnail; may be null
[minithumbnail] :: ChatPhoto -> Maybe Minithumbnail

-- | Point in time (Unix timestamp) when the photo has been added
[added_date] :: ChatPhoto -> Maybe Int

-- | Unique photo identifier
[_id] :: ChatPhoto -> Maybe Int
instance GHC.Classes.Eq TD.Data.ChatPhoto.ChatPhoto
instance GHC.Show.Show TD.Data.ChatPhoto.ChatPhoto
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.ChatPhoto.ChatPhoto
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.ChatPhoto.ChatPhoto


module TD.Data.UserFullInfo

data UserFullInfo

-- | Contains full information about a user
UserFullInfo :: Maybe BotInfo -> Maybe Int -> Maybe FormattedText -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe ChatPhoto -> UserFullInfo

-- | For bots, information about the bot; may be null
[bot_info] :: UserFullInfo -> Maybe BotInfo

-- | Number of group chats where both the other user and the current user
--   are a member; 0 for the current user
[group_in_common_count] :: UserFullInfo -> Maybe Int

-- | A short user bio; may be null for bots
[bio] :: UserFullInfo -> Maybe FormattedText

-- | True, if the current user needs to explicitly allow to share their
--   phone number with the user when the method addContact is used
[need_phone_number_privacy_exception] :: UserFullInfo -> Maybe Bool

-- | True, if the user can't be linked in forwarded messages due to their
--   privacy settings
[has_private_forwards] :: UserFullInfo -> Maybe Bool

-- | True, if the user can't be called due to their privacy settings
[has_private_calls] :: UserFullInfo -> Maybe Bool

-- | True, if a video call can be created with the user
[supports_video_calls] :: UserFullInfo -> Maybe Bool

-- | True, if the user can be called
[can_be_called] :: UserFullInfo -> Maybe Bool

-- | True, if the user is blocked by the current user
[is_blocked] :: UserFullInfo -> Maybe Bool

-- | User profile photo; may be null
[photo] :: UserFullInfo -> Maybe ChatPhoto
instance GHC.Classes.Eq TD.Data.UserFullInfo.UserFullInfo
instance GHC.Show.Show TD.Data.UserFullInfo.UserFullInfo
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.UserFullInfo.UserFullInfo
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.UserFullInfo.UserFullInfo


module TD.Data.SupergroupFullInfo

data SupergroupFullInfo

-- | Contains full information about a supergroup or channel
SupergroupFullInfo :: Maybe Int -> Maybe Int -> Maybe [BotCommands] -> Maybe ChatInviteLink -> Maybe ChatLocation -> Maybe Int -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Float -> Maybe Int -> Maybe Int -> Maybe Int -> Maybe Int -> Maybe Int -> Maybe Int -> Maybe String -> Maybe ChatPhoto -> SupergroupFullInfo

-- | Identifier of the last message in the basic group from which
--   supergroup was upgraded; 0 if none
[upgraded_from_max_message_id] :: SupergroupFullInfo -> Maybe Int

-- | Identifier of the basic group from which supergroup was upgraded; 0 if
--   none
[upgraded_from_basic_group_id] :: SupergroupFullInfo -> Maybe Int

-- | List of commands of bots in the group
[bot_commands] :: SupergroupFullInfo -> Maybe [BotCommands]

-- | Primary invite link for the chat; may be null. For chat administrators
--   with can_invite_users right only
[invite_link] :: SupergroupFullInfo -> Maybe ChatInviteLink

-- | Location to which the supergroup is connected; may be null
[location] :: SupergroupFullInfo -> Maybe ChatLocation

-- | Identifier of the supergroup sticker set; 0 if none
[sticker_set_id] :: SupergroupFullInfo -> Maybe Int

-- | True, if new chat members will have access to old messages. In public
--   or discussion groups and both public and private channels, old
--   messages are always available, so this option affects only private
--   supergroups without a linked chat. The value of this field is only
--   available for chat administrators
[is_all_history_available] :: SupergroupFullInfo -> Maybe Bool

-- | True, if the supergroup or channel statistics are available
[can_get_statistics] :: SupergroupFullInfo -> Maybe Bool

-- | True, if the supergroup location can be changed
[can_set_location] :: SupergroupFullInfo -> Maybe Bool

-- | True, if the supergroup sticker set can be changed
[can_set_sticker_set] :: SupergroupFullInfo -> Maybe Bool

-- | True, if the chat username can be changed
[can_set_username] :: SupergroupFullInfo -> Maybe Bool

-- | True, if members of the chat can be retrieved
[can_get_members] :: SupergroupFullInfo -> Maybe Bool

-- | Time left before next message can be sent in the supergroup, in
--   seconds. An updateSupergroupFullInfo update is not triggered when
--   value of this field changes, but both new and old values are non-zero
[slow_mode_delay_expires_in] :: SupergroupFullInfo -> Maybe Float

-- | Delay between consecutive sent messages for non-administrator
--   supergroup members, in seconds
[slow_mode_delay] :: SupergroupFullInfo -> Maybe Int

-- | Chat identifier of a discussion group for the channel, or a channel,
--   for which the supergroup is the designated discussion group; 0 if none
--   or unknown
[linked_chat_id] :: SupergroupFullInfo -> Maybe Int

-- | Number of users banned from chat; 0 if unknown
[banned_count] :: SupergroupFullInfo -> Maybe Int

-- | Number of restricted users in the supergroup; 0 if unknown
[restricted_count] :: SupergroupFullInfo -> Maybe Int

-- | Number of privileged users in the supergroup or channel; 0 if unknown
[administrator_count] :: SupergroupFullInfo -> Maybe Int

-- | Number of members in the supergroup or channel; 0 if unknown
[member_count] :: SupergroupFullInfo -> Maybe Int

[description] :: SupergroupFullInfo -> Maybe String

-- | Chat photo; may be null
[photo] :: SupergroupFullInfo -> Maybe ChatPhoto
instance GHC.Classes.Eq TD.Data.SupergroupFullInfo.SupergroupFullInfo
instance GHC.Show.Show TD.Data.SupergroupFullInfo.SupergroupFullInfo
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.SupergroupFullInfo.SupergroupFullInfo
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.SupergroupFullInfo.SupergroupFullInfo


module TD.Data.ChatPhotos

data ChatPhotos

-- | Contains a list of chat or user profile photos <tt>total_count Total
--   number of photos </tt>photos List of photos
ChatPhotos :: Maybe [ChatPhoto] -> Maybe Int -> ChatPhotos

[photos] :: ChatPhotos -> Maybe [ChatPhoto]

[total_count] :: ChatPhotos -> Maybe Int
instance GHC.Classes.Eq TD.Data.ChatPhotos.ChatPhotos
instance GHC.Show.Show TD.Data.ChatPhotos.ChatPhotos
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.ChatPhotos.ChatPhotos
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.ChatPhotos.ChatPhotos


module TD.Data.BasicGroupFullInfo

data BasicGroupFullInfo

-- | Contains full information about a basic group
BasicGroupFullInfo :: Maybe [BotCommands] -> Maybe ChatInviteLink -> Maybe [ChatMember] -> Maybe Int -> Maybe String -> Maybe ChatPhoto -> BasicGroupFullInfo

-- | List of commands of bots in the group
[bot_commands] :: BasicGroupFullInfo -> Maybe [BotCommands]

-- | Primary invite link for this group; may be null. For chat
--   administrators with can_invite_users right only. Updated only after
--   the basic group is opened
[invite_link] :: BasicGroupFullInfo -> Maybe ChatInviteLink

-- | Group members
[members] :: BasicGroupFullInfo -> Maybe [ChatMember]

-- | User identifier of the creator of the group; 0 if unknown
[creator_user_id] :: BasicGroupFullInfo -> Maybe Int

[description] :: BasicGroupFullInfo -> Maybe String

-- | Chat photo; may be null
[photo] :: BasicGroupFullInfo -> Maybe ChatPhoto
instance GHC.Classes.Eq TD.Data.BasicGroupFullInfo.BasicGroupFullInfo
instance GHC.Show.Show TD.Data.BasicGroupFullInfo.BasicGroupFullInfo
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.BasicGroupFullInfo.BasicGroupFullInfo
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.BasicGroupFullInfo.BasicGroupFullInfo


module TD.Data.Address

data Address

-- | Describes an address <tt>country_code A two-letter ISO 3166-1 alpha-2
--   country code </tt>state State, if applicable <tt>city City
--   </tt>street_line1 First line of the address <tt>street_line2 Second
--   line of the address </tt>postal_code Address postal code
Address :: Maybe String -> Maybe String -> Maybe String -> Maybe String -> Maybe String -> Maybe String -> Address

[postal_code] :: Address -> Maybe String

[street_line2] :: Address -> Maybe String

[street_line1] :: Address -> Maybe String

[city] :: Address -> Maybe String

[state] :: Address -> Maybe String

[country_code] :: Address -> Maybe String
instance GHC.Classes.Eq TD.Data.Address.Address
instance GHC.Show.Show TD.Data.Address.Address
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.Address.Address
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.Address.Address


module TD.Data.PassportElement

-- | Contains information about a Telegram Passport element
data PassportElement

-- | A Telegram Passport element containing the user's personal details
--   @personal_details Personal details of the user
PassportElementPersonalDetails :: Maybe PersonalDetails -> PassportElement

[personal_details] :: PassportElement -> Maybe PersonalDetails

-- | A Telegram Passport element containing the user's passport @passport
--   Passport
PassportElementPassport :: Maybe IdentityDocument -> PassportElement

[passport] :: PassportElement -> Maybe IdentityDocument

-- | A Telegram Passport element containing the user's driver license
--   @driver_license Driver license
PassportElementDriverLicense :: Maybe IdentityDocument -> PassportElement

[driver_license] :: PassportElement -> Maybe IdentityDocument

-- | A Telegram Passport element containing the user's identity card
--   @identity_card Identity card
PassportElementIdentityCard :: Maybe IdentityDocument -> PassportElement

[identity_card] :: PassportElement -> Maybe IdentityDocument

-- | A Telegram Passport element containing the user's internal passport
--   @internal_passport Internal passport
PassportElementInternalPassport :: Maybe IdentityDocument -> PassportElement

[internal_passport] :: PassportElement -> Maybe IdentityDocument

-- | A Telegram Passport element containing the user's address @address
--   Address
PassportElementAddress :: Maybe Address -> PassportElement

[address] :: PassportElement -> Maybe Address

-- | A Telegram Passport element containing the user's utility bill
--   @utility_bill Utility bill
PassportElementUtilityBill :: Maybe PersonalDocument -> PassportElement

[utility_bill] :: PassportElement -> Maybe PersonalDocument

-- | A Telegram Passport element containing the user's bank statement
--   @bank_statement Bank statement
PassportElementBankStatement :: Maybe PersonalDocument -> PassportElement

[bank_statement] :: PassportElement -> Maybe PersonalDocument

-- | A Telegram Passport element containing the user's rental agreement
--   @rental_agreement Rental agreement
PassportElementRentalAgreement :: Maybe PersonalDocument -> PassportElement

[rental_agreement] :: PassportElement -> Maybe PersonalDocument

-- | A Telegram Passport element containing the user's passport
--   registration pages @passport_registration Passport registration pages
PassportElementPassportRegistration :: Maybe PersonalDocument -> PassportElement

[passport_registration] :: PassportElement -> Maybe PersonalDocument

-- | A Telegram Passport element containing the user's temporary
--   registration @temporary_registration Temporary registration
PassportElementTemporaryRegistration :: Maybe PersonalDocument -> PassportElement

[temporary_registration] :: PassportElement -> Maybe PersonalDocument

-- | A Telegram Passport element containing the user's phone number
--   @phone_number Phone number
PassportElementPhoneNumber :: Maybe String -> PassportElement

[phone_number] :: PassportElement -> Maybe String

-- | A Telegram Passport element containing the user's email address
--   @email_address Email address
PassportElementEmailAddress :: Maybe String -> PassportElement

[email_address] :: PassportElement -> Maybe String
instance GHC.Classes.Eq TD.Data.PassportElement.PassportElement
instance GHC.Show.Show TD.Data.PassportElement.PassportElement
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.PassportElement.PassportElement
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.PassportElement.PassportElement


module TD.Data.PassportElementsWithErrors

data PassportElementsWithErrors

-- | Contains information about a Telegram Passport elements and
--   corresponding errors <tt>elements Telegram Passport elements
--   </tt>errors Errors in the elements that are already available
PassportElementsWithErrors :: Maybe [PassportElementError] -> Maybe [PassportElement] -> PassportElementsWithErrors

[errors] :: PassportElementsWithErrors -> Maybe [PassportElementError]

[elements] :: PassportElementsWithErrors -> Maybe [PassportElement]
instance GHC.Classes.Eq TD.Data.PassportElementsWithErrors.PassportElementsWithErrors
instance GHC.Show.Show TD.Data.PassportElementsWithErrors.PassportElementsWithErrors
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.PassportElementsWithErrors.PassportElementsWithErrors
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.PassportElementsWithErrors.PassportElementsWithErrors


module TD.Data.PassportElements

data PassportElements

-- | Contains information about saved Telegram Passport elements @elements
--   Telegram Passport elements
PassportElements :: Maybe [PassportElement] -> PassportElements

[elements] :: PassportElements -> Maybe [PassportElement]
instance GHC.Classes.Eq TD.Data.PassportElements.PassportElements
instance GHC.Show.Show TD.Data.PassportElements.PassportElements
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.PassportElements.PassportElements
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.PassportElements.PassportElements


module TD.Data.OrderInfo

data OrderInfo

-- | Order information <tt>name Name of the user </tt>phone_number Phone
--   number of the user <tt>email_address Email address of the user
--   </tt>shipping_address Shipping address for this order; may be null
OrderInfo :: Maybe Address -> Maybe String -> Maybe String -> Maybe String -> OrderInfo

[shipping_address] :: OrderInfo -> Maybe Address

[email_address] :: OrderInfo -> Maybe String

[phone_number] :: OrderInfo -> Maybe String

[name] :: OrderInfo -> Maybe String
instance GHC.Classes.Eq TD.Data.OrderInfo.OrderInfo
instance GHC.Show.Show TD.Data.OrderInfo.OrderInfo
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.OrderInfo.OrderInfo
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.OrderInfo.OrderInfo


module TD.Query.ValidateOrderInfo

-- | Validates the order information provided by a user and returns the
--   available shipping options for a flexible invoice
data ValidateOrderInfo
ValidateOrderInfo :: Maybe Bool -> Maybe OrderInfo -> Maybe InputInvoice -> ValidateOrderInfo

-- | Pass true to save the order information
[allow_save] :: ValidateOrderInfo -> Maybe Bool

-- | The order information, provided by the user; pass null if empty
[order_info] :: ValidateOrderInfo -> Maybe OrderInfo

-- | The invoice
[input_invoice] :: ValidateOrderInfo -> Maybe InputInvoice
instance GHC.Classes.Eq TD.Query.ValidateOrderInfo.ValidateOrderInfo
instance GHC.Show.Show TD.Query.ValidateOrderInfo.ValidateOrderInfo
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ValidateOrderInfo.ValidateOrderInfo


module TD.Data.PaymentReceipt

data PaymentReceipt

-- | Contains information about a successful payment
PaymentReceipt :: Maybe Int -> Maybe String -> Maybe ShippingOption -> Maybe OrderInfo -> Maybe Invoice -> Maybe Int -> Maybe Int -> Maybe Int -> Maybe Photo -> Maybe FormattedText -> Maybe String -> PaymentReceipt

-- | The amount of tip chosen by the buyer in the smallest units of the
--   currency
[tip_amount] :: PaymentReceipt -> Maybe Int

-- | Title of the saved credentials chosen by the buyer
[credentials_title] :: PaymentReceipt -> Maybe String

-- | Chosen shipping option; may be null
[shipping_option] :: PaymentReceipt -> Maybe ShippingOption

-- | Order information; may be null
[order_info] :: PaymentReceipt -> Maybe OrderInfo

-- | Information about the invoice
[invoice] :: PaymentReceipt -> Maybe Invoice

-- | User identifier of the payment provider bot
[payment_provider_user_id] :: PaymentReceipt -> Maybe Int

-- | User identifier of the seller bot
[seller_bot_user_id] :: PaymentReceipt -> Maybe Int

-- | Point in time (Unix timestamp) when the payment was made
[date] :: PaymentReceipt -> Maybe Int

-- | Product photo; may be null
[photo] :: PaymentReceipt -> Maybe Photo

[description] :: PaymentReceipt -> Maybe FormattedText

-- | Product title
[title] :: PaymentReceipt -> Maybe String
instance GHC.Classes.Eq TD.Data.PaymentReceipt.PaymentReceipt
instance GHC.Show.Show TD.Data.PaymentReceipt.PaymentReceipt
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.PaymentReceipt.PaymentReceipt
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.PaymentReceipt.PaymentReceipt


module TD.Data.PaymentForm

data PaymentForm

-- | Contains information about an invoice payment form
PaymentForm :: Maybe Photo -> Maybe FormattedText -> Maybe String -> Maybe Bool -> Maybe Bool -> Maybe SavedCredentials -> Maybe OrderInfo -> Maybe PaymentProvider -> Maybe Int -> Maybe Int -> Maybe Invoice -> Maybe Int -> PaymentForm

-- | Product photo; may be null
[product_photo] :: PaymentForm -> Maybe Photo

-- | Product description
[product_description] :: PaymentForm -> Maybe FormattedText

-- | Product title
[product_title] :: PaymentForm -> Maybe String

-- | True, if the user will be able to save credentials protected by a
--   password they set up
[need_password] :: PaymentForm -> Maybe Bool

-- | True, if the user can choose to save credentials
[can_save_credentials] :: PaymentForm -> Maybe Bool

-- | Information about saved card credentials; may be null
[saved_credentials] :: PaymentForm -> Maybe SavedCredentials

-- | Saved server-side order information; may be null
[saved_order_info] :: PaymentForm -> Maybe OrderInfo

-- | Information about the payment provider
[payment_provider] :: PaymentForm -> Maybe PaymentProvider

-- | User identifier of the payment provider bot
[payment_provider_user_id] :: PaymentForm -> Maybe Int

-- | User identifier of the seller bot
[seller_bot_user_id] :: PaymentForm -> Maybe Int

-- | Full information about the invoice
[invoice] :: PaymentForm -> Maybe Invoice

-- | The payment form identifier
[_id] :: PaymentForm -> Maybe Int
instance GHC.Classes.Eq TD.Data.PaymentForm.PaymentForm
instance GHC.Show.Show TD.Data.PaymentForm.PaymentForm
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.PaymentForm.PaymentForm
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.PaymentForm.PaymentForm


module TD.Data.MessageContent

-- | Contains the content of a message
data MessageContent

-- | A text message <tt>text Text of the message </tt>web_page A preview of
--   the web page that's mentioned in the text; may be null
MessageText :: Maybe WebPage -> Maybe FormattedText -> MessageContent

[web_page] :: MessageContent -> Maybe WebPage

[text] :: MessageContent -> Maybe FormattedText

-- | An animation message (GIF-style). <tt>animation The animation
--   description </tt>caption Animation caption @is_secret True, if the
--   animation thumbnail must be blurred and the animation must be shown
--   only while tapped
MessageAnimation :: Maybe Bool -> Maybe FormattedText -> Maybe Animation -> MessageContent

[is_secret] :: MessageContent -> Maybe Bool

[caption] :: MessageContent -> Maybe FormattedText

[animation] :: MessageContent -> Maybe Animation

-- | An audio message <tt>audio The audio description </tt>caption Audio
--   caption
MessageAudio :: Maybe FormattedText -> Maybe Audio -> MessageContent

[caption] :: MessageContent -> Maybe FormattedText

[audio] :: MessageContent -> Maybe Audio

-- | A document message (general file) <tt>document The document
--   description </tt>caption Document caption
MessageDocument :: Maybe FormattedText -> Maybe Document -> MessageContent

[caption] :: MessageContent -> Maybe FormattedText

[document] :: MessageContent -> Maybe Document

-- | A photo message <tt>photo The photo description </tt>caption Photo
--   caption @is_secret True, if the photo must be blurred and must be
--   shown only while tapped
MessagePhoto :: Maybe Bool -> Maybe FormattedText -> Maybe Photo -> MessageContent

[is_secret] :: MessageContent -> Maybe Bool

[caption] :: MessageContent -> Maybe FormattedText

[photo] :: MessageContent -> Maybe Photo

-- | An expired photo message (self-destructed after TTL has elapsed)
MessageExpiredPhoto :: MessageContent

-- | A sticker message <tt>sticker The sticker description </tt>is_premium
--   True, if premium animation of the sticker must be played
MessageSticker :: Maybe Bool -> Maybe Sticker -> MessageContent

[is_premium] :: MessageContent -> Maybe Bool

[sticker] :: MessageContent -> Maybe Sticker

-- | A video message <tt>video The video description </tt>caption Video
--   caption @is_secret True, if the video thumbnail must be blurred and
--   the video must be shown only while tapped
MessageVideo :: Maybe Bool -> Maybe FormattedText -> Maybe Video -> MessageContent

[is_secret] :: MessageContent -> Maybe Bool

[caption] :: MessageContent -> Maybe FormattedText

[video] :: MessageContent -> Maybe Video

-- | An expired video message (self-destructed after TTL has elapsed)
MessageExpiredVideo :: MessageContent

-- | A video note message <tt>video_note The video note description
--   </tt>is_viewed True, if at least one of the recipients has viewed the
--   video note @is_secret True, if the video note thumbnail must be
--   blurred and the video note must be shown only while tapped
MessageVideoNote :: Maybe Bool -> Maybe Bool -> Maybe VideoNote -> MessageContent

[is_secret] :: MessageContent -> Maybe Bool

[is_viewed] :: MessageContent -> Maybe Bool

[video_note] :: MessageContent -> Maybe VideoNote

-- | A voice note message <tt>voice_note The voice note description
--   </tt>caption Voice note caption @is_listened True, if at least one of
--   the recipients has listened to the voice note
MessageVoiceNote :: Maybe Bool -> Maybe FormattedText -> Maybe VoiceNote -> MessageContent

[is_listened] :: MessageContent -> Maybe Bool

[caption] :: MessageContent -> Maybe FormattedText

[voice_note] :: MessageContent -> Maybe VoiceNote

-- | A message with a location <tt>location The location description
--   </tt>live_period Time relative to the message send date, for which the
--   location can be updated, in seconds
MessageLocation :: Maybe Int -> Maybe Int -> Maybe Int -> Maybe Int -> Maybe Location -> MessageContent

-- | For live locations, a maximum distance to another chat member for
--   proximity alerts, in meters (0-100000). 0 if the notification is
--   disabled. Available only for the message sender
[proximity_alert_radius] :: MessageContent -> Maybe Int

-- | For live locations, a direction in which the location moves, in
--   degrees; 1-360. If 0 the direction is unknown
[heading] :: MessageContent -> Maybe Int

-- | Left time for which the location can be updated, in seconds.
--   updateMessageContent is not sent when this field changes
[expires_in] :: MessageContent -> Maybe Int

[live_period] :: MessageContent -> Maybe Int

[location] :: MessageContent -> Maybe Location

-- | A message with information about a venue @venue The venue description
MessageVenue :: Maybe Venue -> MessageContent

[venue] :: MessageContent -> Maybe Venue

-- | A message with a user contact @contact The contact description
MessageContact :: Maybe Contact -> MessageContent

[contact] :: MessageContent -> Maybe Contact

-- | A message with an animated emoji <tt>animated_emoji The animated emoji
--   </tt>emoji The corresponding emoji
MessageAnimatedEmoji :: Maybe String -> Maybe AnimatedEmoji -> MessageContent

[emoji] :: MessageContent -> Maybe String

[animated_emoji] :: MessageContent -> Maybe AnimatedEmoji

-- | A dice message. The dice value is randomly generated by the server
MessageDice :: Maybe Int -> Maybe Int -> Maybe String -> Maybe DiceStickers -> Maybe DiceStickers -> MessageContent

-- | Number of frame after which a success animation like a shower of
--   confetti needs to be shown on updateMessageSendSucceeded
[success_animation_frame_number] :: MessageContent -> Maybe Int

-- | The dice value. If the value is 0, the dice don't have final state yet
[value] :: MessageContent -> Maybe Int

[emoji] :: MessageContent -> Maybe String

-- | The animated stickers with the final dice animation; may be null if
--   unknown. updateMessageContent will be sent when the sticker became
--   known
[final_state] :: MessageContent -> Maybe DiceStickers

-- | The animated stickers with the initial dice animation; may be null if
--   unknown. updateMessageContent will be sent when the sticker became
--   known
[initial_state] :: MessageContent -> Maybe DiceStickers

-- | A message with a game @game The game description
MessageGame :: Maybe Game -> MessageContent

[game] :: MessageContent -> Maybe Game

-- | A message with a poll @poll The poll description
MessagePoll :: Maybe Poll -> MessageContent

[poll] :: MessageContent -> Maybe Poll

-- | A message with an invoice from a bot <tt>title Product title
--   </tt>param_description Product description <tt>photo Product photo;
--   may be null </tt>currency Currency for the product price @total_amount
--   Product total price in the smallest units of the currency
MessageInvoice :: Maybe Int -> Maybe Bool -> Maybe Bool -> Maybe String -> Maybe Int -> Maybe String -> Maybe Photo -> Maybe FormattedText -> Maybe String -> MessageContent

[receipt_message_id] :: MessageContent -> Maybe Int

-- | True, if the shipping address must be specified @receipt_message_id
--   The identifier of the message with the receipt, after the product has
--   been purchased
[need_shipping_address] :: MessageContent -> Maybe Bool

[is_test] :: MessageContent -> Maybe Bool

-- | Unique invoice bot start_parameter. To share an invoice use the URL
--   <a>https://t.me/{bot_username}?start={start_parameter}</a> @is_test
--   True, if the invoice is a test invoice
[start_parameter] :: MessageContent -> Maybe String

[total_amount] :: MessageContent -> Maybe Int

[currency] :: MessageContent -> Maybe String

[photo] :: MessageContent -> Maybe Photo

[description] :: MessageContent -> Maybe FormattedText

[title] :: MessageContent -> Maybe String

-- | A message with information about an ended call <tt>is_video True, if
--   the call was a video call </tt>discard_reason Reason why the call was
--   discarded @duration Call duration, in seconds
MessageCall :: Maybe Int -> Maybe CallDiscardReason -> Maybe Bool -> MessageContent

[duration] :: MessageContent -> Maybe Int

[discard_reason] :: MessageContent -> Maybe CallDiscardReason

[is_video] :: MessageContent -> Maybe Bool

-- | A new video chat was scheduled <tt>group_call_id Identifier of the
--   video chat. The video chat can be received through the method
--   getGroupCall </tt>start_date Point in time (Unix timestamp) when the
--   group call is supposed to be started by an administrator
MessageVideoChatScheduled :: Maybe Int -> Maybe Int -> MessageContent

[start_date] :: MessageContent -> Maybe Int

[group_call_id] :: MessageContent -> Maybe Int

-- | A newly created video chat @group_call_id Identifier of the video
--   chat. The video chat can be received through the method getGroupCall
MessageVideoChatStarted :: Maybe Int -> MessageContent

[group_call_id] :: MessageContent -> Maybe Int

-- | A message with information about an ended video chat @duration Call
--   duration, in seconds
MessageVideoChatEnded :: Maybe Int -> MessageContent

[duration] :: MessageContent -> Maybe Int

-- | A message with information about an invite to a video chat
--   <tt>group_call_id Identifier of the video chat. The video chat can be
--   received through the method getGroupCall </tt>user_ids Invited user
--   identifiers
MessageInviteVideoChatParticipants :: Maybe [Int] -> Maybe Int -> MessageContent

[user_ids] :: MessageContent -> Maybe [Int]

[group_call_id] :: MessageContent -> Maybe Int

-- | A newly created basic group <tt>title Title of the basic group
--   </tt>member_user_ids User identifiers of members in the basic group
MessageBasicGroupChatCreate :: Maybe [Int] -> Maybe String -> MessageContent

[member_user_ids] :: MessageContent -> Maybe [Int]

[title] :: MessageContent -> Maybe String

-- | A newly created supergroup or channel @title Title of the supergroup
--   or channel
MessageSupergroupChatCreate :: Maybe String -> MessageContent

[title] :: MessageContent -> Maybe String

-- | An updated chat title @title New chat title
MessageChatChangeTitle :: Maybe String -> MessageContent

[title] :: MessageContent -> Maybe String

-- | An updated chat photo @photo New chat photo
MessageChatChangePhoto :: Maybe ChatPhoto -> MessageContent

[_photo] :: MessageContent -> Maybe ChatPhoto

-- | A deleted chat photo
MessageChatDeletePhoto :: MessageContent

-- | New chat members were added @member_user_ids User identifiers of the
--   new members
MessageChatAddMembers :: Maybe [Int] -> MessageContent

[member_user_ids] :: MessageContent -> Maybe [Int]

-- | A new member joined the chat via an invite link
MessageChatJoinByLink :: MessageContent

-- | A new member was accepted to the chat by an administrator
MessageChatJoinByRequest :: MessageContent

-- | A chat member was deleted @user_id User identifier of the deleted chat
--   member
MessageChatDeleteMember :: Maybe Int -> MessageContent

[user_id] :: MessageContent -> Maybe Int

-- | A basic group was upgraded to a supergroup and was deactivated as the
--   result @supergroup_id Identifier of the supergroup to which the basic
--   group was upgraded
MessageChatUpgradeTo :: Maybe Int -> MessageContent

[supergroup_id] :: MessageContent -> Maybe Int

-- | A supergroup has been created from a basic group <tt>title Title of
--   the newly created supergroup </tt>basic_group_id The identifier of the
--   original basic group
MessageChatUpgradeFrom :: Maybe Int -> Maybe String -> MessageContent

[basic_group_id] :: MessageContent -> Maybe Int

[title] :: MessageContent -> Maybe String

-- | A message has been pinned @message_id Identifier of the pinned
--   message, can be an identifier of a deleted message or 0
MessagePinMessage :: Maybe Int -> MessageContent

[message_id] :: MessageContent -> Maybe Int

-- | A screenshot of a message in the chat has been taken
MessageScreenshotTaken :: MessageContent

-- | A theme in the chat has been changed @theme_name If non-empty, name of
--   a new theme, set for the chat. Otherwise chat theme was reset to the
--   default one
MessageChatSetTheme :: Maybe String -> MessageContent

[theme_name] :: MessageContent -> Maybe String

-- | The TTL (Time To Live) setting for messages in the chat has been
--   changed @ttl New message TTL
MessageChatSetTtl :: Maybe Int -> MessageContent

[ttl] :: MessageContent -> Maybe Int

-- | A non-standard action has happened in the chat @text Message text to
--   be shown in the chat
MessageCustomServiceAction :: Maybe String -> MessageContent

[_text] :: MessageContent -> Maybe String

-- | A new high score was achieved in a game <tt>game_message_id Identifier
--   of the message with the game, can be an identifier of a deleted
--   message </tt>game_id Identifier of the game; may be different from the
--   games presented in the message with the game @score New score
MessageGameScore :: Maybe Int -> Maybe Int -> Maybe Int -> MessageContent

[score] :: MessageContent -> Maybe Int

[game_id] :: MessageContent -> Maybe Int

[game_message_id] :: MessageContent -> Maybe Int

-- | A payment has been completed <tt>invoice_chat_id Identifier of the
--   chat, containing the corresponding invoice message; 0 if unknown
--   </tt>invoice_message_id Identifier of the message with the
--   corresponding invoice; can be 0 or an identifier of a deleted message
MessagePaymentSuccessful :: Maybe String -> Maybe Bool -> Maybe Bool -> Maybe Int -> Maybe String -> Maybe Int -> Maybe Int -> MessageContent

[invoice_name] :: MessageContent -> Maybe String

[is_first_recurring] :: MessageContent -> Maybe Bool

-- | True, if this is a recurring payment <tt>is_first_recurring True, if
--   this is the first recurring payment </tt>invoice_name Name of the
--   invoice; may be empty if unknown
[is_recurring] :: MessageContent -> Maybe Bool

[total_amount] :: MessageContent -> Maybe Int

[currency] :: MessageContent -> Maybe String

[invoice_message_id] :: MessageContent -> Maybe Int

[invoice_chat_id] :: MessageContent -> Maybe Int

-- | A payment has been completed; for bots only <tt>currency Currency for
--   price of the product </tt>total_amount Total price for the product, in
--   the smallest units of the currency
MessagePaymentSuccessfulBot :: Maybe String -> Maybe String -> Maybe OrderInfo -> Maybe String -> Maybe String -> Maybe Bool -> Maybe Bool -> Maybe Int -> Maybe String -> MessageContent

[provider_payment_charge_id] :: MessageContent -> Maybe String

-- | Telegram payment identifier @provider_payment_charge_id Provider
--   payment identifier
[telegram_payment_charge_id] :: MessageContent -> Maybe String

[order_info] :: MessageContent -> Maybe OrderInfo

[shipping_option_id] :: MessageContent -> Maybe String

-- | Invoice payload <tt>shipping_option_id Identifier of the shipping
--   option chosen by the user; may be empty if not applicable
--   </tt>order_info Information about the order; may be null
[invoice_payload] :: MessageContent -> Maybe String

[is_first_recurring] :: MessageContent -> Maybe Bool

-- | True, if this is a recurring payment <tt>is_first_recurring True, if
--   this is the first recurring payment </tt>invoice_name Name of the
--   invoice; may be empty if unknown
[is_recurring] :: MessageContent -> Maybe Bool

[total_amount] :: MessageContent -> Maybe Int

[currency] :: MessageContent -> Maybe String

-- | A contact has registered with Telegram
MessageContactRegistered :: MessageContent

-- | The current user has connected a website by logging in using Telegram
--   Login Widget on it @domain_name Domain name of the connected website
MessageWebsiteConnected :: Maybe String -> MessageContent

[domain_name] :: MessageContent -> Maybe String

-- | Data from a Web App has been sent to a bot @button_text Text of the
--   keyboardButtonTypeWebApp button, which opened the Web App
MessageWebAppDataSent :: Maybe String -> MessageContent

[button_text] :: MessageContent -> Maybe String

-- | Data from a Web App has been received; for bots only <tt>button_text
--   Text of the keyboardButtonTypeWebApp button, which opened the Web App
--   </tt>data Received data
MessageWebAppDataReceived :: Maybe String -> Maybe String -> MessageContent

[_data] :: MessageContent -> Maybe String

[button_text] :: MessageContent -> Maybe String

-- | Telegram Passport data has been sent to a bot @types List of Telegram
--   Passport element types sent
MessagePassportDataSent :: Maybe [PassportElementType] -> MessageContent

[types] :: MessageContent -> Maybe [PassportElementType]

-- | Telegram Passport data has been received; for bots only <tt>elements
--   List of received Telegram Passport elements </tt>credentials Encrypted
--   data credentials
MessagePassportDataReceived :: Maybe EncryptedCredentials -> Maybe [EncryptedPassportElement] -> MessageContent

[credentials] :: MessageContent -> Maybe EncryptedCredentials

[elements] :: MessageContent -> Maybe [EncryptedPassportElement]

-- | A user in the chat came within proximity alert range <tt>traveler_id
--   The identifier of a user or chat that triggered the proximity alert
--   </tt>watcher_id The identifier of a user or chat that subscribed for
--   the proximity alert @distance The distance between the users
MessageProximityAlertTriggered :: Maybe Int -> Maybe MessageSender -> Maybe MessageSender -> MessageContent

[distance] :: MessageContent -> Maybe Int

[watcher_id] :: MessageContent -> Maybe MessageSender

[traveler_id] :: MessageContent -> Maybe MessageSender

-- | Message content that is not supported in the current TDLib version
MessageUnsupported :: MessageContent
instance GHC.Classes.Eq TD.Data.MessageContent.MessageContent
instance GHC.Show.Show TD.Data.MessageContent.MessageContent
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.MessageContent.MessageContent
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.MessageContent.MessageContent


module TD.Data.SponsoredMessage

data SponsoredMessage

-- | Describes a sponsored message
SponsoredMessage :: Maybe MessageContent -> Maybe InternalLinkType -> Maybe ChatInviteLinkInfo -> Maybe Int -> Maybe Bool -> Maybe Int -> SponsoredMessage

-- | Content of the message. Currently, can be only of the type messageText
[content] :: SponsoredMessage -> Maybe MessageContent

-- | An internal link to be opened when the sponsored message is clicked;
--   may be null if the sponsor chat needs to be opened instead
[link] :: SponsoredMessage -> Maybe InternalLinkType

-- | Information about the sponsor chat; may be null unless sponsor_chat_id
--   == 0
[sponsor_chat_info] :: SponsoredMessage -> Maybe ChatInviteLinkInfo

-- | Sponsor chat identifier; 0 if the sponsor chat is accessible through
--   an invite link
[sponsor_chat_id] :: SponsoredMessage -> Maybe Int

-- | True, if the message needs to be labeled as "recommended" instead of
--   "sponsored"
[is_recommended] :: SponsoredMessage -> Maybe Bool

-- | Message identifier; unique for the chat to which the sponsored message
--   belongs among both ordinary and sponsored messages
[message_id] :: SponsoredMessage -> Maybe Int
instance GHC.Classes.Eq TD.Data.SponsoredMessage.SponsoredMessage
instance GHC.Show.Show TD.Data.SponsoredMessage.SponsoredMessage
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.SponsoredMessage.SponsoredMessage
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.SponsoredMessage.SponsoredMessage


module TD.Data.Message

data Message

-- | Describes a message
Message :: Maybe ReplyMarkup -> Maybe MessageContent -> Maybe String -> Maybe Int -> Maybe String -> Maybe Int -> Maybe Float -> Maybe Int -> Maybe Int -> Maybe Int -> Maybe Int -> Maybe [UnreadReaction] -> Maybe MessageInteractionInfo -> Maybe MessageForwardInfo -> Maybe Int -> Maybe Int -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe MessageSchedulingState -> Maybe MessageSendingState -> Maybe Int -> Maybe MessageSender -> Maybe Int -> Message

-- | Reply markup for the message; may be null
[reply_markup] :: Message -> Maybe ReplyMarkup

-- | Content of the message
[content] :: Message -> Maybe MessageContent

-- | If non-empty, contains a human-readable description of the reason why
--   access to this message must be restricted
[restriction_reason] :: Message -> Maybe String

-- | Unique identifier of an album this message belongs to. Only audios,
--   documents, photos and videos can be grouped together in albums
[media_album_id] :: Message -> Maybe Int

-- | For channel posts and anonymous group messages, optional author
--   signature
[author_signature] :: Message -> Maybe String

-- | If non-zero, the user identifier of the bot through which this message
--   was sent
[via_bot_user_id] :: Message -> Maybe Int

-- | Time left before the message expires, in seconds. If the TTL timer
--   isn't started yet, equals to the value of the ttl field
[ttl_expires_in] :: Message -> Maybe Float

-- | For self-destructing messages, the message's TTL (Time To Live), in
--   seconds; 0 if none. TDLib will send updateDeleteMessages or
--   updateMessageContent once the TTL expires
[ttl] :: Message -> Maybe Int

-- | If non-zero, the identifier of the message thread the message belongs
--   to; unique within the chat to which the message belongs
[message_thread_id] :: Message -> Maybe Int

-- | If non-zero, the identifier of the message this message is replying
--   to; can be the identifier of a deleted message
[reply_to_message_id] :: Message -> Maybe Int

-- | If non-zero, the identifier of the chat to which the replied message
--   belongs; Currently, only messages in the Replies chat can have
--   different reply_in_chat_id and chat_id
[reply_in_chat_id] :: Message -> Maybe Int

-- | Information about unread reactions added to the message
[unread_reactions] :: Message -> Maybe [UnreadReaction]

-- | Information about interactions with the message; may be null
[interaction_info] :: Message -> Maybe MessageInteractionInfo

-- | Information about the initial message sender; may be null
[forward_info] :: Message -> Maybe MessageForwardInfo

-- | Point in time (Unix timestamp) when the message was last edited
[edit_date] :: Message -> Maybe Int

-- | Point in time (Unix timestamp) when the message was sent
[date] :: Message -> Maybe Int

-- | True, if the message contains an unread mention for the current user
[contains_unread_mention] :: Message -> Maybe Bool

-- | True, if the message is a channel post. All messages to channels are
--   channel posts, all other messages are not channel posts
[is_channel_post] :: Message -> Maybe Bool

-- | True, if media timestamp entities refers to a media in this message as
--   opposed to a media in the replied message
[has_timestamped_media] :: Message -> Maybe Bool

-- | True, if media timestamp links can be generated for media timestamp
--   entities in the message text, caption or web page description through
--   getMessageLink
[can_get_media_timestamp_links] :: Message -> Maybe Bool

-- | True, if chat members already viewed the message can be received
--   through getMessageViewers
[can_get_viewers] :: Message -> Maybe Bool

-- | True, if information about the message thread is available through
--   getMessageThread
[can_get_message_thread] :: Message -> Maybe Bool

-- | True, if the message statistics are available through
--   getMessageStatistics
[can_get_statistics] :: Message -> Maybe Bool

-- | True, if the list of added reactions is available through
--   getMessageAddedReactions
[can_get_added_reactions] :: Message -> Maybe Bool

-- | True, if the message can be deleted for all users
[can_be_deleted_for_all_users] :: Message -> Maybe Bool

-- | True, if the message can be deleted only for the current user while
--   other users will continue to see it
[can_be_deleted_only_for_self] :: Message -> Maybe Bool

-- | True, if content of the message can be saved locally or copied
[can_be_saved] :: Message -> Maybe Bool

-- | True, if the message can be forwarded
[can_be_forwarded] :: Message -> Maybe Bool

-- | True, if the message can be edited. For live location and poll
--   messages this fields shows whether editMessageLiveLocation or stopPoll
--   can be used with this message by the application
[can_be_edited] :: Message -> Maybe Bool

-- | True, if the message is pinned
[is_pinned] :: Message -> Maybe Bool

-- | True, if the message is outgoing
[is_outgoing] :: Message -> Maybe Bool

-- | The scheduling state of the message; may be null
[scheduling_state] :: Message -> Maybe MessageSchedulingState

-- | The sending state of the message; may be null
[sending_state] :: Message -> Maybe MessageSendingState

-- | Chat identifier
[chat_id] :: Message -> Maybe Int

-- | Identifier of the sender of the message
[sender_id] :: Message -> Maybe MessageSender

-- | Message identifier; unique for the chat to which the message belongs
[_id] :: Message -> Maybe Int
instance GHC.Classes.Eq TD.Data.Message.Message
instance GHC.Show.Show TD.Data.Message.Message
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.Message.Message
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.Message.Message


module TD.Data.NotificationType

-- | Contains detailed information about a notification
data NotificationType

-- | New message was received <tt>message The message </tt>show_preview
--   True, if message content must be displayed in notifications
NotificationTypeNewMessage :: Maybe Bool -> Maybe Message -> NotificationType

[show_preview] :: NotificationType -> Maybe Bool

[message] :: NotificationType -> Maybe Message

-- | New secret chat was created
NotificationTypeNewSecretChat :: NotificationType

-- | New call was received @call_id Call identifier
NotificationTypeNewCall :: Maybe Int -> NotificationType

[call_id] :: NotificationType -> Maybe Int

-- | New message was received through a push notification
NotificationTypeNewPushMessage :: Maybe PushMessageContent -> Maybe Bool -> Maybe String -> Maybe MessageSender -> Maybe Int -> NotificationType

-- | Push message content
[content] :: NotificationType -> Maybe PushMessageContent

-- | True, if the message is outgoing
[is_outgoing] :: NotificationType -> Maybe Bool

-- | Name of the sender
[sender_name] :: NotificationType -> Maybe String

-- | Identifier of the sender of the message. Corresponding user or chat
--   may be inaccessible
[sender_id] :: NotificationType -> Maybe MessageSender

-- | The message identifier. The message will not be available in the chat
--   history, but the ID can be used in viewMessages, or as
--   reply_to_message_id
[message_id] :: NotificationType -> Maybe Int
instance GHC.Classes.Eq TD.Data.NotificationType.NotificationType
instance GHC.Show.Show TD.Data.NotificationType.NotificationType
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.NotificationType.NotificationType
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.NotificationType.NotificationType


module TD.Data.Notification

data Notification

-- | Contains information about a notification <tt>id Unique persistent
--   identifier of this notification </tt>date Notification date
Notification :: Maybe NotificationType -> Maybe Bool -> Maybe Int -> Maybe Int -> Notification

[_type] :: Notification -> Maybe NotificationType

-- | True, if the notification was explicitly sent without sound @type
--   Notification type
[is_silent] :: Notification -> Maybe Bool

[date] :: Notification -> Maybe Int

[_id] :: Notification -> Maybe Int
instance GHC.Classes.Eq TD.Data.Notification.Notification
instance GHC.Show.Show TD.Data.Notification.Notification
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.Notification.Notification
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.Notification.Notification


module TD.Data.NotificationGroup

data NotificationGroup

-- | Describes a group of notifications <tt>id Unique persistent
--   auto-incremented from 1 identifier of the notification group </tt>type
--   Type of the group
NotificationGroup :: Maybe [Notification] -> Maybe Int -> Maybe Int -> Maybe NotificationGroupType -> Maybe Int -> NotificationGroup

[notifications] :: NotificationGroup -> Maybe [Notification]

-- | Total number of active notifications in the group @notifications The
--   list of active notifications
[total_count] :: NotificationGroup -> Maybe Int

-- | Identifier of a chat to which all notifications in the group belong
[chat_id] :: NotificationGroup -> Maybe Int

[_type] :: NotificationGroup -> Maybe NotificationGroupType

[_id] :: NotificationGroup -> Maybe Int
instance GHC.Classes.Eq TD.Data.NotificationGroup.NotificationGroup
instance GHC.Show.Show TD.Data.NotificationGroup.NotificationGroup
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.NotificationGroup.NotificationGroup
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.NotificationGroup.NotificationGroup


module TD.Data.Messages

data Messages

-- | Contains a list of messages <tt>total_count Approximate total number
--   of messages found </tt>messages List of messages; messages may be null
Messages :: Maybe [Message] -> Maybe Int -> Messages

[messages] :: Messages -> Maybe [Message]

[total_count] :: Messages -> Maybe Int
instance GHC.Classes.Eq TD.Data.Messages.Messages
instance GHC.Show.Show TD.Data.Messages.Messages
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.Messages.Messages
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.Messages.Messages


module TD.Data.MessageThreadInfo

data MessageThreadInfo

-- | Contains information about a message thread
MessageThreadInfo :: Maybe DraftMessage -> Maybe [Message] -> Maybe Int -> Maybe MessageReplyInfo -> Maybe Int -> Maybe Int -> MessageThreadInfo

-- | A draft of a message in the message thread; may be null
[draft_message] :: MessageThreadInfo -> Maybe DraftMessage

-- | The messages from which the thread starts. The messages are returned
--   in a reverse chronological order (i.e., in order of decreasing
--   message_id)
[messages] :: MessageThreadInfo -> Maybe [Message]

-- | Approximate number of unread messages in the message thread
[unread_message_count] :: MessageThreadInfo -> Maybe Int

-- | Information about the message thread
[reply_info] :: MessageThreadInfo -> Maybe MessageReplyInfo

-- | Message thread identifier, unique within the chat
[message_thread_id] :: MessageThreadInfo -> Maybe Int

-- | Identifier of the chat to which the message thread belongs
[chat_id] :: MessageThreadInfo -> Maybe Int
instance GHC.Classes.Eq TD.Data.MessageThreadInfo.MessageThreadInfo
instance GHC.Show.Show TD.Data.MessageThreadInfo.MessageThreadInfo
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.MessageThreadInfo.MessageThreadInfo
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.MessageThreadInfo.MessageThreadInfo


module TD.Data.MessageLinkInfo

data MessageLinkInfo

-- | Contains information about a link to a message in a chat
MessageLinkInfo :: Maybe Bool -> Maybe Bool -> Maybe Int -> Maybe Message -> Maybe Int -> Maybe Bool -> MessageLinkInfo

-- | True, if the message is linked as a channel post comment or from a
--   message thread
[for_comment] :: MessageLinkInfo -> Maybe Bool

-- | True, if the whole media album to which the message belongs is linked
[for_album] :: MessageLinkInfo -> Maybe Bool

-- | Timestamp from which the video<i>audio</i>video note/voice note
--   playing must start, in seconds; 0 if not specified. The media can be
--   in the message content or in its web page preview
[media_timestamp] :: MessageLinkInfo -> Maybe Int

-- | If found, the linked message; may be null
[message] :: MessageLinkInfo -> Maybe Message

-- | If found, identifier of the chat to which the message belongs, 0
--   otherwise
[chat_id] :: MessageLinkInfo -> Maybe Int

-- | True, if the link is a public link for a message in a chat
[is_public] :: MessageLinkInfo -> Maybe Bool
instance GHC.Classes.Eq TD.Data.MessageLinkInfo.MessageLinkInfo
instance GHC.Show.Show TD.Data.MessageLinkInfo.MessageLinkInfo
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.MessageLinkInfo.MessageLinkInfo
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.MessageLinkInfo.MessageLinkInfo


module TD.Data.MessageCalendarDay

data MessageCalendarDay

-- | Contains information about found messages sent on a specific day
--   <tt>total_count Total number of found messages sent on the day
--   </tt>message First message sent on the day
MessageCalendarDay :: Maybe Message -> Maybe Int -> MessageCalendarDay

[message] :: MessageCalendarDay -> Maybe Message

[total_count] :: MessageCalendarDay -> Maybe Int
instance GHC.Classes.Eq TD.Data.MessageCalendarDay.MessageCalendarDay
instance GHC.Show.Show TD.Data.MessageCalendarDay.MessageCalendarDay
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.MessageCalendarDay.MessageCalendarDay
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.MessageCalendarDay.MessageCalendarDay


module TD.Data.MessageCalendar

data MessageCalendar

-- | Contains information about found messages, split by days according to
--   the option "utc_time_offset" <tt>total_count Total number of found
--   messages </tt>days Information about messages sent
MessageCalendar :: Maybe [MessageCalendarDay] -> Maybe Int -> MessageCalendar

[days] :: MessageCalendar -> Maybe [MessageCalendarDay]

[total_count] :: MessageCalendar -> Maybe Int
instance GHC.Classes.Eq TD.Data.MessageCalendar.MessageCalendar
instance GHC.Show.Show TD.Data.MessageCalendar.MessageCalendar
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.MessageCalendar.MessageCalendar
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.MessageCalendar.MessageCalendar


module TD.Data.FoundMessages

data FoundMessages

-- | Contains a list of messages found by a search <tt>total_count
--   Approximate total number of messages found; -1 if unknown
--   </tt>messages List of messages @next_offset The offset for the next
--   request. If empty, there are no more results
FoundMessages :: Maybe String -> Maybe [Message] -> Maybe Int -> FoundMessages

[next_offset] :: FoundMessages -> Maybe String

[messages] :: FoundMessages -> Maybe [Message]

[total_count] :: FoundMessages -> Maybe Int
instance GHC.Classes.Eq TD.Data.FoundMessages.FoundMessages
instance GHC.Show.Show TD.Data.FoundMessages.FoundMessages
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.FoundMessages.FoundMessages
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.FoundMessages.FoundMessages


module TD.Data.FileDownload

data FileDownload

-- | Describes a file added to file download list
FileDownload :: Maybe Bool -> Maybe Int -> Maybe Int -> Maybe Message -> Maybe Int -> FileDownload

-- | True, if downloading of the file is paused
[is_paused] :: FileDownload -> Maybe Bool

-- | Point in time (Unix timestamp) when the file downloading was
--   completed; 0 if the file downloading isn't completed
[complete_date] :: FileDownload -> Maybe Int

-- | Point in time (Unix timestamp) when the file was added to the download
--   list
[add_date] :: FileDownload -> Maybe Int

-- | The message with the file
[message] :: FileDownload -> Maybe Message

-- | File identifier
[file_id] :: FileDownload -> Maybe Int
instance GHC.Classes.Eq TD.Data.FileDownload.FileDownload
instance GHC.Show.Show TD.Data.FileDownload.FileDownload
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.FileDownload.FileDownload
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.FileDownload.FileDownload


module TD.Data.FoundFileDownloads

data FoundFileDownloads

-- | Contains a list of downloaded files, found by a search
FoundFileDownloads :: Maybe String -> Maybe [FileDownload] -> Maybe DownloadedFileCounts -> FoundFileDownloads

-- | The offset for the next request. If empty, there are no more results
[next_offset] :: FoundFileDownloads -> Maybe String

-- | The list of files
[files] :: FoundFileDownloads -> Maybe [FileDownload]

-- | Total number of suitable files, ignoring offset
[total_counts] :: FoundFileDownloads -> Maybe DownloadedFileCounts
instance GHC.Classes.Eq TD.Data.FoundFileDownloads.FoundFileDownloads
instance GHC.Show.Show TD.Data.FoundFileDownloads.FoundFileDownloads
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.FoundFileDownloads.FoundFileDownloads
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.FoundFileDownloads.FoundFileDownloads


module TD.Data.ChatEventAction

-- | Represents a chat event
data ChatEventAction

-- | A message was edited <tt>old_message The original message before the
--   edit </tt>new_message The message after it was edited
ChatEventMessageEdited :: Maybe Message -> Maybe Message -> ChatEventAction

[new_message] :: ChatEventAction -> Maybe Message

[old_message] :: ChatEventAction -> Maybe Message

-- | A message was deleted @message Deleted message
ChatEventMessageDeleted :: Maybe Message -> ChatEventAction

[message] :: ChatEventAction -> Maybe Message

-- | A message was pinned @message Pinned message
ChatEventMessagePinned :: Maybe Message -> ChatEventAction

[message] :: ChatEventAction -> Maybe Message

-- | A message was unpinned @message Unpinned message
ChatEventMessageUnpinned :: Maybe Message -> ChatEventAction

[message] :: ChatEventAction -> Maybe Message

-- | A poll in a message was stopped @message The message with the poll
ChatEventPollStopped :: Maybe Message -> ChatEventAction

[message] :: ChatEventAction -> Maybe Message

-- | A new member joined the chat
ChatEventMemberJoined :: ChatEventAction

-- | A new member joined the chat via an invite link @invite_link Invite
--   link used to join the chat
ChatEventMemberJoinedByInviteLink :: Maybe ChatInviteLink -> ChatEventAction

[invite_link] :: ChatEventAction -> Maybe ChatInviteLink

-- | A new member was accepted to the chat by an administrator
--   <tt>approver_user_id User identifier of the chat administrator,
--   approved user join request </tt>invite_link Invite link used to join
--   the chat; may be null
ChatEventMemberJoinedByRequest :: Maybe ChatInviteLink -> Maybe Int -> ChatEventAction

[invite_link] :: ChatEventAction -> Maybe ChatInviteLink

[approver_user_id] :: ChatEventAction -> Maybe Int

-- | A new chat member was invited <tt>user_id New member user identifier
--   </tt>status New member status
ChatEventMemberInvited :: Maybe ChatMemberStatus -> Maybe Int -> ChatEventAction

[status] :: ChatEventAction -> Maybe ChatMemberStatus

[user_id] :: ChatEventAction -> Maybe Int

-- | A member left the chat
ChatEventMemberLeft :: ChatEventAction

-- | A chat member has gained/lost administrator status, or the list of
--   their administrator privileges has changed <tt>user_id Affected chat
--   member user identifier </tt>old_status Previous status of the chat
--   member @new_status New status of the chat member
ChatEventMemberPromoted :: Maybe ChatMemberStatus -> Maybe ChatMemberStatus -> Maybe Int -> ChatEventAction

[new_status] :: ChatEventAction -> Maybe ChatMemberStatus

[old_status] :: ChatEventAction -> Maybe ChatMemberStatus

[user_id] :: ChatEventAction -> Maybe Int

-- | A chat member was restricted<i>unrestricted or banned</i>unbanned, or
--   the list of their restrictions has changed <tt>member_id Affected chat
--   member identifier </tt>old_status Previous status of the chat member
--   @new_status New status of the chat member
ChatEventMemberRestricted :: Maybe ChatMemberStatus -> Maybe ChatMemberStatus -> Maybe MessageSender -> ChatEventAction

[new_status] :: ChatEventAction -> Maybe ChatMemberStatus

[old_status] :: ChatEventAction -> Maybe ChatMemberStatus

[member_id] :: ChatEventAction -> Maybe MessageSender

-- | The chat available reactions were changed <tt>old_available_reactions
--   Previous chat available reactions </tt>new_available_reactions New
--   chat available reactions
ChatEventAvailableReactionsChanged :: Maybe [String] -> Maybe [String] -> ChatEventAction

[new_available_reactions] :: ChatEventAction -> Maybe [String]

[old_available_reactions] :: ChatEventAction -> Maybe [String]

-- | The chat description was changed <tt>old_description Previous chat
--   description </tt>new_description New chat description
ChatEventDescriptionChanged :: Maybe String -> Maybe String -> ChatEventAction

[new_description] :: ChatEventAction -> Maybe String

[old_description] :: ChatEventAction -> Maybe String

-- | The linked chat of a supergroup was changed <tt>old_linked_chat_id
--   Previous supergroup linked chat identifier </tt>new_linked_chat_id New
--   supergroup linked chat identifier
ChatEventLinkedChatChanged :: Maybe Int -> Maybe Int -> ChatEventAction

[new_linked_chat_id] :: ChatEventAction -> Maybe Int

[old_linked_chat_id] :: ChatEventAction -> Maybe Int

-- | The supergroup location was changed <tt>old_location Previous
--   location; may be null </tt>new_location New location; may be null
ChatEventLocationChanged :: Maybe ChatLocation -> Maybe ChatLocation -> ChatEventAction

[new_location] :: ChatEventAction -> Maybe ChatLocation

[old_location] :: ChatEventAction -> Maybe ChatLocation

-- | The message TTL was changed <tt>old_message_ttl Previous value of
--   message_ttl </tt>new_message_ttl New value of message_ttl
ChatEventMessageTtlChanged :: Maybe Int -> Maybe Int -> ChatEventAction

[new_message_ttl] :: ChatEventAction -> Maybe Int

[old_message_ttl] :: ChatEventAction -> Maybe Int

-- | The chat permissions was changed <tt>old_permissions Previous chat
--   permissions </tt>new_permissions New chat permissions
ChatEventPermissionsChanged :: Maybe ChatPermissions -> Maybe ChatPermissions -> ChatEventAction

[new_permissions] :: ChatEventAction -> Maybe ChatPermissions

[old_permissions] :: ChatEventAction -> Maybe ChatPermissions

-- | The chat photo was changed <tt>old_photo Previous chat photo value;
--   may be null </tt>new_photo New chat photo value; may be null
ChatEventPhotoChanged :: Maybe ChatPhoto -> Maybe ChatPhoto -> ChatEventAction

[new_photo] :: ChatEventAction -> Maybe ChatPhoto

[old_photo] :: ChatEventAction -> Maybe ChatPhoto

-- | The slow_mode_delay setting of a supergroup was changed
--   <tt>old_slow_mode_delay Previous value of slow_mode_delay, in seconds
--   </tt>new_slow_mode_delay New value of slow_mode_delay, in seconds
ChatEventSlowModeDelayChanged :: Maybe Int -> Maybe Int -> ChatEventAction

[new_slow_mode_delay] :: ChatEventAction -> Maybe Int

[old_slow_mode_delay] :: ChatEventAction -> Maybe Int

-- | The supergroup sticker set was changed <tt>old_sticker_set_id Previous
--   identifier of the chat sticker set; 0 if none </tt>new_sticker_set_id
--   New identifier of the chat sticker set; 0 if none
ChatEventStickerSetChanged :: Maybe Int -> Maybe Int -> ChatEventAction

[new_sticker_set_id] :: ChatEventAction -> Maybe Int

[old_sticker_set_id] :: ChatEventAction -> Maybe Int

-- | The chat title was changed <tt>old_title Previous chat title
--   </tt>new_title New chat title
ChatEventTitleChanged :: Maybe String -> Maybe String -> ChatEventAction

[new_title] :: ChatEventAction -> Maybe String

[old_title] :: ChatEventAction -> Maybe String

-- | The chat username was changed <tt>old_username Previous chat username
--   </tt>new_username New chat username
ChatEventUsernameChanged :: Maybe String -> Maybe String -> ChatEventAction

[new_username] :: ChatEventAction -> Maybe String

[old_username] :: ChatEventAction -> Maybe String

-- | The has_protected_content setting of a channel was toggled
--   @has_protected_content New value of has_protected_content
ChatEventHasProtectedContentToggled :: Maybe Bool -> ChatEventAction

[has_protected_content] :: ChatEventAction -> Maybe Bool

-- | The can_invite_users permission of a supergroup chat was toggled
--   @can_invite_users New value of can_invite_users permission
ChatEventInvitesToggled :: Maybe Bool -> ChatEventAction

[can_invite_users] :: ChatEventAction -> Maybe Bool

-- | The is_all_history_available setting of a supergroup was toggled
--   @is_all_history_available New value of is_all_history_available
ChatEventIsAllHistoryAvailableToggled :: Maybe Bool -> ChatEventAction

[is_all_history_available] :: ChatEventAction -> Maybe Bool

-- | The sign_messages setting of a channel was toggled @sign_messages New
--   value of sign_messages
ChatEventSignMessagesToggled :: Maybe Bool -> ChatEventAction

[sign_messages] :: ChatEventAction -> Maybe Bool

-- | A chat invite link was edited <tt>old_invite_link Previous information
--   about the invite link </tt>new_invite_link New information about the
--   invite link
ChatEventInviteLinkEdited :: Maybe ChatInviteLink -> Maybe ChatInviteLink -> ChatEventAction

[new_invite_link] :: ChatEventAction -> Maybe ChatInviteLink

[old_invite_link] :: ChatEventAction -> Maybe ChatInviteLink

-- | A chat invite link was revoked @invite_link The invite link
ChatEventInviteLinkRevoked :: Maybe ChatInviteLink -> ChatEventAction

[invite_link] :: ChatEventAction -> Maybe ChatInviteLink

-- | A revoked chat invite link was deleted @invite_link The invite link
ChatEventInviteLinkDeleted :: Maybe ChatInviteLink -> ChatEventAction

[invite_link] :: ChatEventAction -> Maybe ChatInviteLink

-- | A video chat was created @group_call_id Identifier of the video chat.
--   The video chat can be received through the method getGroupCall
ChatEventVideoChatCreated :: Maybe Int -> ChatEventAction

[group_call_id] :: ChatEventAction -> Maybe Int

-- | A video chat was ended @group_call_id Identifier of the video chat.
--   The video chat can be received through the method getGroupCall
ChatEventVideoChatEnded :: Maybe Int -> ChatEventAction

[group_call_id] :: ChatEventAction -> Maybe Int

-- | The mute_new_participants setting of a video chat was toggled
--   @mute_new_participants New value of the mute_new_participants setting
ChatEventVideoChatMuteNewParticipantsToggled :: Maybe Bool -> ChatEventAction

[mute_new_participants] :: ChatEventAction -> Maybe Bool

-- | A video chat participant was muted or unmuted <tt>participant_id
--   Identifier of the affected group call participant </tt>is_muted New
--   value of is_muted
ChatEventVideoChatParticipantIsMutedToggled :: Maybe Bool -> Maybe MessageSender -> ChatEventAction

[is_muted] :: ChatEventAction -> Maybe Bool

[participant_id] :: ChatEventAction -> Maybe MessageSender

-- | A video chat participant volume level was changed <tt>participant_id
--   Identifier of the affected group call participant </tt>volume_level
--   New value of volume_level; 1-20000 in hundreds of percents
ChatEventVideoChatParticipantVolumeLevelChanged :: Maybe Int -> Maybe MessageSender -> ChatEventAction

[volume_level] :: ChatEventAction -> Maybe Int

[participant_id] :: ChatEventAction -> Maybe MessageSender
instance GHC.Classes.Eq TD.Data.ChatEventAction.ChatEventAction
instance GHC.Show.Show TD.Data.ChatEventAction.ChatEventAction
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.ChatEventAction.ChatEventAction
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.ChatEventAction.ChatEventAction


module TD.Data.ChatEvent

data ChatEvent

-- | Represents a chat event <tt>id Chat event identifier </tt>date Point
--   in time (Unix timestamp) when the event happened <tt>member_id
--   Identifier of the user or chat who performed the action </tt>action
--   The action
ChatEvent :: Maybe ChatEventAction -> Maybe MessageSender -> Maybe Int -> Maybe Int -> ChatEvent

[action] :: ChatEvent -> Maybe ChatEventAction

[member_id] :: ChatEvent -> Maybe MessageSender

[date] :: ChatEvent -> Maybe Int

[_id] :: ChatEvent -> Maybe Int
instance GHC.Classes.Eq TD.Data.ChatEvent.ChatEvent
instance GHC.Show.Show TD.Data.ChatEvent.ChatEvent
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.ChatEvent.ChatEvent
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.ChatEvent.ChatEvent


module TD.Data.ChatEvents

data ChatEvents

-- | Contains a list of chat events @events List of events
ChatEvents :: Maybe [ChatEvent] -> ChatEvents

[events] :: ChatEvents -> Maybe [ChatEvent]
instance GHC.Classes.Eq TD.Data.ChatEvents.ChatEvents
instance GHC.Show.Show TD.Data.ChatEvents.ChatEvents
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.ChatEvents.ChatEvents
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.ChatEvents.ChatEvents


module TD.Data.Chat

data Chat

-- | A chat. (Can be a private chat, basic group, supergroup, or secret
--   chat)
Chat :: Maybe String -> Maybe DraftMessage -> Maybe Int -> Maybe ChatJoinRequestsInfo -> Maybe VideoChat -> Maybe ChatActionBar -> Maybe String -> Maybe Int -> Maybe [String] -> Maybe ChatNotificationSettings -> Maybe Int -> Maybe Int -> Maybe Int -> Maybe Int -> Maybe Int -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe MessageSender -> Maybe [ChatPosition] -> Maybe Message -> Maybe ChatPermissions -> Maybe ChatPhotoInfo -> Maybe String -> Maybe ChatType -> Maybe Int -> Chat

-- | Application-specific data associated with the chat. (For example, the
--   chat scroll position or local chat notification settings can be stored
--   here.) Persistent if the message database is used
[client_data] :: Chat -> Maybe String

-- | A draft of a message in the chat; may be null
[draft_message] :: Chat -> Maybe DraftMessage

-- | Identifier of the message from which reply markup needs to be used; 0
--   if there is no default custom reply markup in the chat
[reply_markup_message_id] :: Chat -> Maybe Int

-- | Information about pending join requests; may be null
[pending_join_requests] :: Chat -> Maybe ChatJoinRequestsInfo

-- | Information about video chat of the chat
[video_chat] :: Chat -> Maybe VideoChat

-- | Information about actions which must be possible to do through the
--   chat action bar; may be null
[action_bar] :: Chat -> Maybe ChatActionBar

-- | If non-empty, name of a theme, set for the chat
[theme_name] :: Chat -> Maybe String

-- | Current message Time To Live setting (self-destruct timer) for the
--   chat; 0 if not defined. TTL is counted from the time message or its
--   content is viewed in secret chats and from the send date in other
--   chats
[message_ttl] :: Chat -> Maybe Int

-- | List of reactions, available in the chat
[available_reactions] :: Chat -> Maybe [String]

-- | Notification settings for the chat
[notification_settings] :: Chat -> Maybe ChatNotificationSettings

-- | Number of messages with unread reactions in the chat
[unread_reaction_count] :: Chat -> Maybe Int

-- | Number of unread messages with a mention/reply in the chat
[unread_mention_count] :: Chat -> Maybe Int

-- | Identifier of the last read outgoing message
[last_read_outbox_message_id] :: Chat -> Maybe Int

-- | Identifier of the last read incoming message
[last_read_inbox_message_id] :: Chat -> Maybe Int

-- | Number of unread messages in the chat
[unread_count] :: Chat -> Maybe Int

-- | Default value of the disable_notification parameter, used when a
--   message is sent to the chat
[default_disable_notification] :: Chat -> Maybe Bool

-- | True, if the chat can be reported to Telegram moderators through
--   reportChat or reportChatPhoto
[can_be_reported] :: Chat -> Maybe Bool

-- | True, if the chat messages can be deleted for all users
[can_be_deleted_for_all_users] :: Chat -> Maybe Bool

-- | True, if the chat messages can be deleted only for the current user
--   while other users will continue to see the messages
[can_be_deleted_only_for_self] :: Chat -> Maybe Bool

-- | True, if the chat has scheduled messages
[has_scheduled_messages] :: Chat -> Maybe Bool

-- | True, if the chat is blocked by the current user and private messages
--   from the chat can't be received
[is_blocked] :: Chat -> Maybe Bool

-- | True, if the chat is marked as unread
[is_marked_as_unread] :: Chat -> Maybe Bool

-- | True, if chat content can't be saved locally, forwarded, or copied
[has_protected_content] :: Chat -> Maybe Bool

-- | Identifier of a user or chat that is selected to send messages in the
--   chat; may be null if the user can't change message sender
[message_sender_id] :: Chat -> Maybe MessageSender

-- | Positions of the chat in chat lists
[positions] :: Chat -> Maybe [ChatPosition]

-- | Last message in the chat; may be null
[last_message] :: Chat -> Maybe Message

-- | Actions that non-administrator chat members are allowed to take in the
--   chat
[permissions] :: Chat -> Maybe ChatPermissions

-- | Chat photo; may be null
[photo] :: Chat -> Maybe ChatPhotoInfo

-- | Chat title
[title] :: Chat -> Maybe String

-- | Type of the chat
[_type] :: Chat -> Maybe ChatType

-- | Chat unique identifier
[_id] :: Chat -> Maybe Int
instance GHC.Classes.Eq TD.Data.Chat.Chat
instance GHC.Show.Show TD.Data.Chat.Chat
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.Chat.Chat
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.Chat.Chat


module TD.Data.Update

-- | Contains notifications about data changes
data Update

-- | The user authorization state has changed @authorization_state New
--   authorization state
UpdateAuthorizationState :: Maybe AuthorizationState -> Update

[authorization_state] :: Update -> Maybe AuthorizationState

-- | A new message was received; can also be an outgoing message @message
--   The new message
UpdateNewMessage :: Maybe Message -> Update

[message] :: Update -> Maybe Message

-- | A request to send a message has reached the Telegram server. This
--   doesn't mean that the message will be sent successfully or even that
--   the send message request will be processed. This update will be sent
--   only if the option "use_quick_ack" is set to true. This update may be
--   sent multiple times for the same message
UpdateMessageSendAcknowledged :: Maybe Int -> Maybe Int -> Update

[message_id] :: Update -> Maybe Int

-- | The chat identifier of the sent message @message_id A temporary
--   message identifier
[chat_id] :: Update -> Maybe Int

-- | A message has been successfully sent <tt>message The sent message.
--   Usually only the message identifier, date, and content are changed,
--   but almost all other fields can also change </tt>old_message_id The
--   previous temporary message identifier
UpdateMessageSendSucceeded :: Maybe Int -> Maybe Message -> Update

[old_message_id] :: Update -> Maybe Int

[message] :: Update -> Maybe Message

-- | A message failed to send. Be aware that some messages being sent can
--   be irrecoverably deleted, in which case updateDeleteMessages will be
--   received instead of this update
UpdateMessageSendFailed :: Maybe String -> Maybe Int -> Maybe Int -> Maybe Message -> Update

[error_message] :: Update -> Maybe String

[error_code] :: Update -> Maybe Int

[old_message_id] :: Update -> Maybe Int

[message] :: Update -> Maybe Message

-- | The message content has changed <tt>chat_id Chat identifier
--   </tt>message_id Message identifier @new_content New message content
UpdateMessageContent :: Maybe MessageContent -> Maybe Int -> Maybe Int -> Update

[new_content] :: Update -> Maybe MessageContent

[message_id] :: Update -> Maybe Int

-- | The chat identifier of the sent message @message_id A temporary
--   message identifier
[chat_id] :: Update -> Maybe Int

-- | A message was edited. Changes in the message content will come in a
--   separate updateMessageContent <tt>chat_id Chat identifier
--   </tt>message_id Message identifier <tt>edit_date Point in time (Unix
--   timestamp) when the message was edited </tt>reply_markup New message
--   reply markup; may be null
UpdateMessageEdited :: Maybe ReplyMarkup -> Maybe Int -> Maybe Int -> Maybe Int -> Update

[reply_markup] :: Update -> Maybe ReplyMarkup

[edit_date] :: Update -> Maybe Int

[message_id] :: Update -> Maybe Int

-- | The chat identifier of the sent message @message_id A temporary
--   message identifier
[chat_id] :: Update -> Maybe Int

-- | The message pinned state was changed <tt>chat_id Chat identifier
--   </tt>message_id The message identifier @is_pinned True, if the message
--   is pinned
UpdateMessageIsPinned :: Maybe Bool -> Maybe Int -> Maybe Int -> Update

[is_pinned] :: Update -> Maybe Bool

[message_id] :: Update -> Maybe Int

-- | The chat identifier of the sent message @message_id A temporary
--   message identifier
[chat_id] :: Update -> Maybe Int

-- | The information about interactions with a message has changed
--   <tt>chat_id Chat identifier </tt>message_id Message identifier
--   @interaction_info New information about interactions with the message;
--   may be null
UpdateMessageInteractionInfo :: Maybe MessageInteractionInfo -> Maybe Int -> Maybe Int -> Update

[interaction_info] :: Update -> Maybe MessageInteractionInfo

[message_id] :: Update -> Maybe Int

-- | The chat identifier of the sent message @message_id A temporary
--   message identifier
[chat_id] :: Update -> Maybe Int

-- | The message content was opened. Updates voice note messages to
--   "listened", video note messages to "viewed" and starts the TTL timer
--   for self-destructing messages <tt>chat_id Chat identifier
--   </tt>message_id Message identifier
UpdateMessageContentOpened :: Maybe Int -> Maybe Int -> Update

[message_id] :: Update -> Maybe Int

-- | The chat identifier of the sent message @message_id A temporary
--   message identifier
[chat_id] :: Update -> Maybe Int

-- | A message with an unread mention was read <tt>chat_id Chat identifier
--   </tt>message_id Message identifier @unread_mention_count The new
--   number of unread mention messages left in the chat
UpdateMessageMentionRead :: Maybe Int -> Maybe Int -> Maybe Int -> Update

[unread_mention_count] :: Update -> Maybe Int

[message_id] :: Update -> Maybe Int

-- | The chat identifier of the sent message @message_id A temporary
--   message identifier
[chat_id] :: Update -> Maybe Int

-- | The list of unread reactions added to a message was changed
--   <tt>chat_id Chat identifier </tt>message_id Message identifier
--   <tt>unread_reactions The new list of unread reactions
--   </tt>unread_reaction_count The new number of messages with unread
--   reactions left in the chat
UpdateMessageUnreadReactions :: Maybe Int -> Maybe [UnreadReaction] -> Maybe Int -> Maybe Int -> Update

[unread_reaction_count] :: Update -> Maybe Int

[unread_reactions] :: Update -> Maybe [UnreadReaction]

[message_id] :: Update -> Maybe Int

-- | The chat identifier of the sent message @message_id A temporary
--   message identifier
[chat_id] :: Update -> Maybe Int

-- | A message with a live location was viewed. When the update is
--   received, the application is supposed to update the live location
UpdateMessageLiveLocationViewed :: Maybe Int -> Maybe Int -> Update

[message_id] :: Update -> Maybe Int

-- | The chat identifier of the sent message @message_id A temporary
--   message identifier
[chat_id] :: Update -> Maybe Int

-- | A new chat has been loaded/created. This update is guaranteed to come
--   before the chat identifier is returned to the application. The chat
--   field changes will be reported through separate updates @chat The chat
UpdateNewChat :: Maybe Chat -> Update

[chat] :: Update -> Maybe Chat

-- | The title of a chat was changed <tt>chat_id Chat identifier </tt>title
--   The new chat title
UpdateChatTitle :: Maybe String -> Maybe Int -> Update

[title] :: Update -> Maybe String

-- | The chat identifier of the sent message @message_id A temporary
--   message identifier
[chat_id] :: Update -> Maybe Int

-- | A chat photo was changed <tt>chat_id Chat identifier </tt>photo The
--   new chat photo; may be null
UpdateChatPhoto :: Maybe ChatPhotoInfo -> Maybe Int -> Update

[photo] :: Update -> Maybe ChatPhotoInfo

-- | The chat identifier of the sent message @message_id A temporary
--   message identifier
[chat_id] :: Update -> Maybe Int

-- | Chat permissions was changed <tt>chat_id Chat identifier
--   </tt>permissions The new chat permissions
UpdateChatPermissions :: Maybe ChatPermissions -> Maybe Int -> Update

[permissions] :: Update -> Maybe ChatPermissions

-- | The chat identifier of the sent message @message_id A temporary
--   message identifier
[chat_id] :: Update -> Maybe Int

-- | The last message of a chat was changed. If last_message is null, then
--   the last message in the chat became unknown. Some new unknown messages
--   might be added to the chat in this case <tt>chat_id Chat identifier
--   </tt>last_message The new last message in the chat; may be null
--   @positions The new chat positions in the chat lists
UpdateChatLastMessage :: Maybe [ChatPosition] -> Maybe Message -> Maybe Int -> Update

[positions] :: Update -> Maybe [ChatPosition]

[last_message] :: Update -> Maybe Message

-- | The chat identifier of the sent message @message_id A temporary
--   message identifier
[chat_id] :: Update -> Maybe Int

-- | The position of a chat in a chat list has changed. Instead of this
--   update updateChatLastMessage or updateChatDraftMessage might be sent
--   <tt>chat_id Chat identifier </tt>position New chat position. If new
--   order is 0, then the chat needs to be removed from the list
UpdateChatPosition :: Maybe ChatPosition -> Maybe Int -> Update

[position] :: Update -> Maybe ChatPosition

-- | The chat identifier of the sent message @message_id A temporary
--   message identifier
[chat_id] :: Update -> Maybe Int

-- | Incoming messages were read or the number of unread messages has been
--   changed <tt>chat_id Chat identifier </tt>last_read_inbox_message_id
--   Identifier of the last read incoming message @unread_count The number
--   of unread messages left in the chat
UpdateChatReadInbox :: Maybe Int -> Maybe Int -> Maybe Int -> Update

[unread_count] :: Update -> Maybe Int

[last_read_inbox_message_id] :: Update -> Maybe Int

-- | The chat identifier of the sent message @message_id A temporary
--   message identifier
[chat_id] :: Update -> Maybe Int

-- | Outgoing messages were read <tt>chat_id Chat identifier
--   </tt>last_read_outbox_message_id Identifier of last read outgoing
--   message
UpdateChatReadOutbox :: Maybe Int -> Maybe Int -> Update

[last_read_outbox_message_id] :: Update -> Maybe Int

-- | The chat identifier of the sent message @message_id A temporary
--   message identifier
[chat_id] :: Update -> Maybe Int

-- | The chat action bar was changed <tt>chat_id Chat identifier
--   </tt>action_bar The new value of the action bar; may be null
UpdateChatActionBar :: Maybe ChatActionBar -> Maybe Int -> Update

[action_bar] :: Update -> Maybe ChatActionBar

-- | The chat identifier of the sent message @message_id A temporary
--   message identifier
[chat_id] :: Update -> Maybe Int

-- | The chat available reactions were changed <tt>chat_id Chat identifier
--   </tt>available_reactions The new list of reactions, available in the
--   chat
UpdateChatAvailableReactions :: Maybe [String] -> Maybe Int -> Update

[available_reactions] :: Update -> Maybe [String]

-- | The chat identifier of the sent message @message_id A temporary
--   message identifier
[chat_id] :: Update -> Maybe Int

-- | A chat draft has changed. Be aware that the update may come in the
--   currently opened chat but with old content of the draft. If the user
--   has changed the content of the draft, this update mustn't be applied
--   <tt>chat_id Chat identifier </tt>draft_message The new draft message;
--   may be null @positions The new chat positions in the chat lists
UpdateChatDraftMessage :: Maybe [ChatPosition] -> Maybe DraftMessage -> Maybe Int -> Update

[positions] :: Update -> Maybe [ChatPosition]

[draft_message] :: Update -> Maybe DraftMessage

-- | The chat identifier of the sent message @message_id A temporary
--   message identifier
[chat_id] :: Update -> Maybe Int

-- | The message sender that is selected to send messages in a chat has
--   changed <tt>chat_id Chat identifier </tt>message_sender_id New value
--   of message_sender_id; may be null if the user can't change message
--   sender
UpdateChatMessageSender :: Maybe MessageSender -> Maybe Int -> Update

[message_sender_id] :: Update -> Maybe MessageSender

-- | The chat identifier of the sent message @message_id A temporary
--   message identifier
[chat_id] :: Update -> Maybe Int

-- | The message Time To Live setting for a chat was changed <tt>chat_id
--   Chat identifier </tt>message_ttl New value of message_ttl
UpdateChatMessageTtl :: Maybe Int -> Maybe Int -> Update

[message_ttl] :: Update -> Maybe Int

-- | The chat identifier of the sent message @message_id A temporary
--   message identifier
[chat_id] :: Update -> Maybe Int

-- | Notification settings for a chat were changed <tt>chat_id Chat
--   identifier </tt>notification_settings The new notification settings
UpdateChatNotificationSettings :: Maybe ChatNotificationSettings -> Maybe Int -> Update

[notification_settings] :: Update -> Maybe ChatNotificationSettings

-- | The chat identifier of the sent message @message_id A temporary
--   message identifier
[chat_id] :: Update -> Maybe Int

-- | The chat pending join requests were changed <tt>chat_id Chat
--   identifier </tt>pending_join_requests The new data about pending join
--   requests; may be null
UpdateChatPendingJoinRequests :: Maybe ChatJoinRequestsInfo -> Maybe Int -> Update

[pending_join_requests] :: Update -> Maybe ChatJoinRequestsInfo

-- | The chat identifier of the sent message @message_id A temporary
--   message identifier
[chat_id] :: Update -> Maybe Int

-- | The default chat reply markup was changed. Can occur because new
--   messages with reply markup were received or because an old reply
--   markup was hidden by the user
UpdateChatReplyMarkup :: Maybe Int -> Maybe Int -> Update

[reply_markup_message_id] :: Update -> Maybe Int

-- | The chat identifier of the sent message @message_id A temporary
--   message identifier
[chat_id] :: Update -> Maybe Int

-- | The chat theme was changed <tt>chat_id Chat identifier </tt>theme_name
--   The new name of the chat theme; may be empty if theme was reset to
--   default
UpdateChatTheme :: Maybe String -> Maybe Int -> Update

[theme_name] :: Update -> Maybe String

-- | The chat identifier of the sent message @message_id A temporary
--   message identifier
[chat_id] :: Update -> Maybe Int

-- | The chat unread_mention_count has changed <tt>chat_id Chat identifier
--   </tt>unread_mention_count The number of unread mention messages left
--   in the chat
UpdateChatUnreadMentionCount :: Maybe Int -> Maybe Int -> Update

[unread_mention_count] :: Update -> Maybe Int

-- | The chat identifier of the sent message @message_id A temporary
--   message identifier
[chat_id] :: Update -> Maybe Int

-- | The chat unread_reaction_count has changed <tt>chat_id Chat identifier
--   </tt>unread_reaction_count The number of messages with unread
--   reactions left in the chat
UpdateChatUnreadReactionCount :: Maybe Int -> Maybe Int -> Update

[unread_reaction_count] :: Update -> Maybe Int

-- | The chat identifier of the sent message @message_id A temporary
--   message identifier
[chat_id] :: Update -> Maybe Int

-- | A chat video chat state has changed <tt>chat_id Chat identifier
--   </tt>video_chat New value of video_chat
UpdateChatVideoChat :: Maybe VideoChat -> Maybe Int -> Update

[video_chat] :: Update -> Maybe VideoChat

-- | The chat identifier of the sent message @message_id A temporary
--   message identifier
[chat_id] :: Update -> Maybe Int

-- | The value of the default disable_notification parameter, used when a
--   message is sent to the chat, was changed <tt>chat_id Chat identifier
--   </tt>default_disable_notification The new default_disable_notification
--   value
UpdateChatDefaultDisableNotification :: Maybe Bool -> Maybe Int -> Update

[default_disable_notification] :: Update -> Maybe Bool

-- | The chat identifier of the sent message @message_id A temporary
--   message identifier
[chat_id] :: Update -> Maybe Int

-- | A chat content was allowed or restricted for saving <tt>chat_id Chat
--   identifier </tt>has_protected_content New value of
--   has_protected_content
UpdateChatHasProtectedContent :: Maybe Bool -> Maybe Int -> Update

[has_protected_content] :: Update -> Maybe Bool

-- | The chat identifier of the sent message @message_id A temporary
--   message identifier
[chat_id] :: Update -> Maybe Int

-- | A chat's has_scheduled_messages field has changed <tt>chat_id Chat
--   identifier </tt>has_scheduled_messages New value of
--   has_scheduled_messages
UpdateChatHasScheduledMessages :: Maybe Bool -> Maybe Int -> Update

[has_scheduled_messages] :: Update -> Maybe Bool

-- | The chat identifier of the sent message @message_id A temporary
--   message identifier
[chat_id] :: Update -> Maybe Int

-- | A chat was blocked or unblocked <tt>chat_id Chat identifier
--   </tt>is_blocked New value of is_blocked
UpdateChatIsBlocked :: Maybe Bool -> Maybe Int -> Update

[is_blocked] :: Update -> Maybe Bool

-- | The chat identifier of the sent message @message_id A temporary
--   message identifier
[chat_id] :: Update -> Maybe Int

-- | A chat was marked as unread or was read <tt>chat_id Chat identifier
--   </tt>is_marked_as_unread New value of is_marked_as_unread
UpdateChatIsMarkedAsUnread :: Maybe Bool -> Maybe Int -> Update

[is_marked_as_unread] :: Update -> Maybe Bool

-- | The chat identifier of the sent message @message_id A temporary
--   message identifier
[chat_id] :: Update -> Maybe Int

-- | The list of chat filters or a chat filter has changed <tt>chat_filters
--   The new list of chat filters </tt>main_chat_list_position Position of
--   the main chat list among chat filters, 0-based
UpdateChatFilters :: Maybe Int -> Maybe [ChatFilterInfo] -> Update

[main_chat_list_position] :: Update -> Maybe Int

[chat_filters] :: Update -> Maybe [ChatFilterInfo]

-- | The number of online group members has changed. This update with
--   non-zero number of online group members is sent only for currently
--   opened chats. There is no guarantee that it will be sent just after
--   the number of online users has changed <tt>chat_id Identifier of the
--   chat </tt>online_member_count New number of online members in the
--   chat, or 0 if unknown
UpdateChatOnlineMemberCount :: Maybe Int -> Maybe Int -> Update

[online_member_count] :: Update -> Maybe Int

-- | The chat identifier of the sent message @message_id A temporary
--   message identifier
[chat_id] :: Update -> Maybe Int

-- | Notification settings for some type of chats were updated <tt>scope
--   Types of chats for which notification settings were updated
--   </tt>notification_settings The new notification settings
UpdateScopeNotificationSettings :: Maybe ScopeNotificationSettings -> Maybe NotificationSettingsScope -> Update

[_notification_settings] :: Update -> Maybe ScopeNotificationSettings

[scope] :: Update -> Maybe NotificationSettingsScope

-- | A notification was changed <tt>notification_group_id Unique
--   notification group identifier </tt>notification Changed notification
UpdateNotification :: Maybe Notification -> Maybe Int -> Update

[notification] :: Update -> Maybe Notification

[notification_group_id] :: Update -> Maybe Int

-- | A list of active notifications in a notification group has changed
UpdateNotificationGroup :: Maybe [Int] -> Maybe [Notification] -> Maybe Int -> Maybe Int -> Maybe Int -> Maybe Int -> Maybe NotificationGroupType -> Maybe Int -> Update

[removed_notification_ids] :: Update -> Maybe [Int]

-- | List of added group notifications, sorted by notification ID
--   @removed_notification_ids Identifiers of removed group notifications,
--   sorted by notification ID
[added_notifications] :: Update -> Maybe [Notification]

-- | Total number of unread notifications in the group, can be bigger than
--   number of active notifications
[total_count] :: Update -> Maybe Int

-- | Identifier of the notification sound to be played; 0 if sound is
--   disabled
[notification_sound_id] :: Update -> Maybe Int

-- | Chat identifier, which notification settings must be applied to the
--   added notifications
[notification_settings_chat_id] :: Update -> Maybe Int

-- | The chat identifier of the sent message @message_id A temporary
--   message identifier
[chat_id] :: Update -> Maybe Int

-- | New type of the notification group
[_type] :: Update -> Maybe NotificationGroupType

[notification_group_id] :: Update -> Maybe Int

-- | Contains active notifications that was shown on previous application
--   launches. This update is sent only if the message database is used. In
--   that case it comes once before any updateNotification and
--   updateNotificationGroup update @groups Lists of active notification
--   groups
UpdateActiveNotifications :: Maybe [NotificationGroup] -> Update

[groups] :: Update -> Maybe [NotificationGroup]

-- | Describes whether there are some pending notification updates. Can be
--   used to prevent application from killing, while there are some pending
--   notifications
UpdateHavePendingNotifications :: Maybe Bool -> Maybe Bool -> Update

-- | True, if there can be some yet unreceived notifications, which are
--   being fetched from the server
[have_unreceived_notifications] :: Update -> Maybe Bool

-- | True, if there are some delayed notification updates, which will be
--   sent soon
[have_delayed_notifications] :: Update -> Maybe Bool

-- | Some messages were deleted <tt>chat_id Chat identifier
--   </tt>message_ids Identifiers of the deleted messages
UpdateDeleteMessages :: Maybe Bool -> Maybe Bool -> Maybe [Int] -> Maybe Int -> Update

-- | True, if the messages are deleted only from the cache and can possibly
--   be retrieved again in the future
[from_cache] :: Update -> Maybe Bool

-- | True, if the messages are permanently deleted by a user (as opposed to
--   just becoming inaccessible)
[is_permanent] :: Update -> Maybe Bool

[message_ids] :: Update -> Maybe [Int]

-- | The chat identifier of the sent message @message_id A temporary
--   message identifier
[chat_id] :: Update -> Maybe Int

-- | A message sender activity in the chat has changed <tt>chat_id Chat
--   identifier </tt>message_thread_id If not 0, a message thread
--   identifier in which the action was performed <tt>sender_id Identifier
--   of a message sender performing the action </tt>action The action
UpdateChatAction :: Maybe ChatAction -> Maybe MessageSender -> Maybe Int -> Maybe Int -> Update

[action] :: Update -> Maybe ChatAction

[sender_id] :: Update -> Maybe MessageSender

[message_thread_id] :: Update -> Maybe Int

-- | The chat identifier of the sent message @message_id A temporary
--   message identifier
[chat_id] :: Update -> Maybe Int

-- | The user went online or offline <tt>user_id User identifier
--   </tt>status New status of the user
UpdateUserStatus :: Maybe UserStatus -> Maybe Int -> Update

[status] :: Update -> Maybe UserStatus

[user_id] :: Update -> Maybe Int

-- | Some data of a user has changed. This update is guaranteed to come
--   before the user identifier is returned to the application @user New
--   data about the user
UpdateUser :: Maybe User -> Update

[user] :: Update -> Maybe User

-- | Some data of a basic group has changed. This update is guaranteed to
--   come before the basic group identifier is returned to the application
--   @basic_group New data about the group
UpdateBasicGroup :: Maybe BasicGroup -> Update

[basic_group] :: Update -> Maybe BasicGroup

-- | Some data of a supergroup or a channel has changed. This update is
--   guaranteed to come before the supergroup identifier is returned to the
--   application @supergroup New data about the supergroup
UpdateSupergroup :: Maybe Supergroup -> Update

[supergroup] :: Update -> Maybe Supergroup

-- | Some data of a secret chat has changed. This update is guaranteed to
--   come before the secret chat identifier is returned to the application
--   @secret_chat New data about the secret chat
UpdateSecretChat :: Maybe SecretChat -> Update

[secret_chat] :: Update -> Maybe SecretChat

-- | Some data in userFullInfo has been changed <tt>user_id User identifier
--   </tt>user_full_info New full information about the user
UpdateUserFullInfo :: Maybe UserFullInfo -> Maybe Int -> Update

[user_full_info] :: Update -> Maybe UserFullInfo

[user_id] :: Update -> Maybe Int

-- | Some data in basicGroupFullInfo has been changed <tt>basic_group_id
--   Identifier of a basic group </tt>basic_group_full_info New full
--   information about the group
UpdateBasicGroupFullInfo :: Maybe BasicGroupFullInfo -> Maybe Int -> Update

[basic_group_full_info] :: Update -> Maybe BasicGroupFullInfo

[basic_group_id] :: Update -> Maybe Int

-- | Some data in supergroupFullInfo has been changed <tt>supergroup_id
--   Identifier of the supergroup or channel </tt>supergroup_full_info New
--   full information about the supergroup
UpdateSupergroupFullInfo :: Maybe SupergroupFullInfo -> Maybe Int -> Update

[supergroup_full_info] :: Update -> Maybe SupergroupFullInfo

[supergroup_id] :: Update -> Maybe Int

-- | A service notification from the server was received. Upon receiving
--   this the application must show a popup with the content of the
--   notification
UpdateServiceNotification :: Maybe MessageContent -> Maybe String -> Update

-- | Notification content
[content] :: Update -> Maybe MessageContent

-- | Notification type. If type begins with <a>AUTH_KEY_DROP_</a>, then two
--   buttons <a>Cancel</a> and "Log out" must be shown under notification;
--   if user presses the second, all local data must be destroyed using
--   Destroy method
[__type] :: Update -> Maybe String

-- | Information about a file was updated @file New data about the file
UpdateFile :: Maybe File -> Update

[file] :: Update -> Maybe File

-- | The file generation process needs to be started by the application
UpdateFileGenerationStart :: Maybe String -> Maybe String -> Maybe String -> Maybe Int -> Update

-- | String specifying the conversion applied to the original file. If
--   conversion is "" than original_path contains an HTTP/HTTPS URL of a
--   file, which must be downloaded by the application
[conversion] :: Update -> Maybe String

-- | The path to a file that must be created and where the new file is
--   generated
[destination_path] :: Update -> Maybe String

-- | The path to a file from which a new file is generated; may be empty
[original_path] :: Update -> Maybe String

-- | Unique identifier for the generation process
[generation_id] :: Update -> Maybe Int

-- | File generation is no longer needed @generation_id Unique identifier
--   for the generation process
UpdateFileGenerationStop :: Maybe Int -> Update

-- | Unique identifier for the generation process
[generation_id] :: Update -> Maybe Int

-- | The state of the file download list has changed
UpdateFileDownloads :: Maybe Int -> Maybe Int -> Maybe Int -> Update

-- | Total downloaded size of files in the file download list, in bytes
[downloaded_size] :: Update -> Maybe Int

-- | Total number of unread notifications in the group, can be bigger than
--   number of active notifications
[total_count] :: Update -> Maybe Int

-- | Total size of files in the file download list, in bytes
[total_size] :: Update -> Maybe Int

-- | A file was added to the file download list. This update is sent only
--   after file download list is loaded for the first time
--   <tt>file_download The added file download </tt>counts New number of
--   being downloaded and recently downloaded files found
UpdateFileAddedToDownloads :: Maybe DownloadedFileCounts -> Maybe FileDownload -> Update

[counts] :: Update -> Maybe DownloadedFileCounts

[file_download] :: Update -> Maybe FileDownload

-- | A file download was changed. This update is sent only after file
--   download list is loaded for the first time @file_id File identifier
UpdateFileDownload :: Maybe DownloadedFileCounts -> Maybe Bool -> Maybe Int -> Maybe Int -> Update

[counts] :: Update -> Maybe DownloadedFileCounts

-- | True, if downloading of the file is paused
[is_paused] :: Update -> Maybe Bool

-- | Point in time (Unix timestamp) when the file downloading was
--   completed; 0 if the file downloading isn't completed
[complete_date] :: Update -> Maybe Int

[file_id] :: Update -> Maybe Int

-- | A file was removed from the file download list. This update is sent
--   only after file download list is loaded for the first time <tt>file_id
--   File identifier </tt>counts New number of being downloaded and
--   recently downloaded files found
UpdateFileRemovedFromDownloads :: Maybe DownloadedFileCounts -> Maybe Int -> Update

[counts] :: Update -> Maybe DownloadedFileCounts

[file_id] :: Update -> Maybe Int

-- | New call was created or information about a call was updated @call New
--   data about a call
UpdateCall :: Maybe Call -> Update

[call] :: Update -> Maybe Call

-- | Information about a group call was updated @group_call New data about
--   a group call
UpdateGroupCall :: Maybe GroupCall -> Update

[group_call] :: Update -> Maybe GroupCall

-- | Information about a group call participant was changed. The updates
--   are sent only after the group call is received through getGroupCall
--   and only if the call is joined or being joined
UpdateGroupCallParticipant :: Maybe GroupCallParticipant -> Maybe Int -> Update

[participant] :: Update -> Maybe GroupCallParticipant

-- | Identifier of group call @participant New data about a participant
[group_call_id] :: Update -> Maybe Int

-- | New call signaling data arrived <tt>call_id The call identifier
--   </tt>data The data
UpdateNewCallSignalingData :: Maybe String -> Maybe Int -> Update

[_data] :: Update -> Maybe String

[call_id] :: Update -> Maybe Int

-- | Some privacy setting rules have been changed <tt>setting The privacy
--   setting </tt>rules New privacy rules
UpdateUserPrivacySettingRules :: Maybe UserPrivacySettingRules -> Maybe UserPrivacySetting -> Update

[rules] :: Update -> Maybe UserPrivacySettingRules

[setting] :: Update -> Maybe UserPrivacySetting

-- | Number of unread messages in a chat list has changed. This update is
--   sent only if the message database is used @chat_list The chat list
--   with changed number of unread messages
UpdateUnreadMessageCount :: Maybe Int -> Maybe Int -> Maybe ChatList -> Update

[unread_unmuted_count] :: Update -> Maybe Int

[unread_count] :: Update -> Maybe Int

[chat_list] :: Update -> Maybe ChatList

-- | Number of unread chats, i.e. with unread messages or marked as unread,
--   has changed. This update is sent only if the message database is used
UpdateUnreadChatCount :: Maybe Int -> Maybe Int -> Maybe Int -> Maybe Int -> Maybe Int -> Maybe ChatList -> Update

[marked_as_unread_unmuted_count] :: Update -> Maybe Int

-- | Total number of chats marked as unread @marked_as_unread_unmuted_count
--   Total number of unmuted chats marked as unread
[marked_as_unread_count] :: Update -> Maybe Int

[unread_unmuted_count] :: Update -> Maybe Int

[unread_count] :: Update -> Maybe Int

-- | Total number of unread notifications in the group, can be bigger than
--   number of active notifications
[total_count] :: Update -> Maybe Int

[chat_list] :: Update -> Maybe ChatList

-- | An option changed its value <tt>name The option name </tt>value The
--   new option value
UpdateOption :: Maybe OptionValue -> Maybe String -> Update

[value] :: Update -> Maybe OptionValue

[name] :: Update -> Maybe String

-- | A sticker set has changed @sticker_set The sticker set
UpdateStickerSet :: Maybe StickerSet -> Update

[sticker_set] :: Update -> Maybe StickerSet

-- | The list of installed sticker sets was updated <tt>is_masks True, if
--   the list of installed mask sticker sets was updated
--   </tt>sticker_set_ids The new list of installed ordinary sticker sets
UpdateInstalledStickerSets :: Maybe [Int] -> Maybe Bool -> Update

[sticker_set_ids] :: Update -> Maybe [Int]

[is_masks] :: Update -> Maybe Bool

-- | The list of trending sticker sets was updated or some of them were
--   viewed @sticker_sets The prefix of the list of trending sticker sets
--   with the newest trending sticker sets
UpdateTrendingStickerSets :: Maybe TrendingStickerSets -> Update

[sticker_sets] :: Update -> Maybe TrendingStickerSets

-- | The list of recently used stickers was updated <tt>is_attached True,
--   if the list of stickers attached to photo or video files was updated,
--   otherwise the list of sent stickers is updated </tt>sticker_ids The
--   new list of file identifiers of recently used stickers
UpdateRecentStickers :: Maybe [Int] -> Maybe Bool -> Update

[sticker_ids] :: Update -> Maybe [Int]

[is_attached] :: Update -> Maybe Bool

-- | The list of favorite stickers was updated @sticker_ids The new list of
--   file identifiers of favorite stickers
UpdateFavoriteStickers :: Maybe [Int] -> Update

[sticker_ids] :: Update -> Maybe [Int]

-- | The list of saved animations was updated @animation_ids The new list
--   of file identifiers of saved animations
UpdateSavedAnimations :: Maybe [Int] -> Update

[animation_ids] :: Update -> Maybe [Int]

-- | The list of saved notifications sounds was updated. This update may
--   not be sent until information about a notification sound was requested
--   for the first time @notification_sound_ids The new list of identifiers
--   of saved notification sounds
UpdateSavedNotificationSounds :: Maybe [Int] -> Update

[notification_sound_ids] :: Update -> Maybe [Int]

-- | The selected background has changed <tt>for_dark_theme True, if
--   background for dark theme has changed </tt>background The new selected
--   background; may be null
UpdateSelectedBackground :: Maybe Background -> Maybe Bool -> Update

[background] :: Update -> Maybe Background

[for_dark_theme] :: Update -> Maybe Bool

-- | The list of available chat themes has changed @chat_themes The new
--   list of chat themes
UpdateChatThemes :: Maybe [ChatTheme] -> Update

[chat_themes] :: Update -> Maybe [ChatTheme]

-- | Some language pack strings have been updated <tt>localization_target
--   Localization target to which the language pack belongs
--   </tt>language_pack_id Identifier of the updated language pack @strings
--   List of changed language pack strings
UpdateLanguagePackStrings :: Maybe [LanguagePackString] -> Maybe String -> Maybe String -> Update

[strings] :: Update -> Maybe [LanguagePackString]

[language_pack_id] :: Update -> Maybe String

[localization_target] :: Update -> Maybe String

-- | The connection state has changed. This update must be used only to
--   show a human-readable description of the connection state @state The
--   new connection state
UpdateConnectionState :: Maybe ConnectionState -> Update

[state] :: Update -> Maybe ConnectionState

-- | New terms of service must be accepted by the user. If the terms of
--   service are declined, then the deleteAccount method must be called
--   with the reason "Decline ToS update" <tt>terms_of_service_id
--   Identifier of the terms of service </tt>terms_of_service The new terms
--   of service
UpdateTermsOfService :: Maybe TermsOfService -> Maybe String -> Update

[terms_of_service] :: Update -> Maybe TermsOfService

[terms_of_service_id] :: Update -> Maybe String

-- | The list of users nearby has changed. The update is guaranteed to be
--   sent only 60 seconds after a successful searchChatsNearby request
--   @users_nearby The new list of users nearby
UpdateUsersNearby :: Maybe [ChatNearby] -> Update

[users_nearby] :: Update -> Maybe [ChatNearby]

-- | The list of bots added to attachment menu has changed @bots The new
--   list of bots added to attachment menu. The bots must not be shown on
--   scheduled messages screen
UpdateAttachmentMenuBots :: Maybe [AttachmentMenuBot] -> Update

[bots] :: Update -> Maybe [AttachmentMenuBot]

-- | A message was sent by an opened Web App, so the Web App needs to be
--   closed @web_app_launch_id Identifier of Web App launch
UpdateWebAppMessageSent :: Maybe Int -> Update

[web_app_launch_id] :: Update -> Maybe Int

-- | The list of supported reactions has changed @reactions The new list of
--   supported reactions
UpdateReactions :: Maybe [Reaction] -> Update

[reactions] :: Update -> Maybe [Reaction]

-- | The list of supported dice emojis has changed @emojis The new list of
--   supported dice emojis
UpdateDiceEmojis :: Maybe [String] -> Update

[emojis] :: Update -> Maybe [String]

-- | Some animated emoji message was clicked and a big animated sticker
--   must be played if the message is visible on the screen.
--   chatActionWatchingAnimations with the text of the message needs to be
--   sent if the sticker is played
UpdateAnimatedEmojiMessageClicked :: Maybe Sticker -> Maybe Int -> Maybe Int -> Update

[sticker] :: Update -> Maybe Sticker

[message_id] :: Update -> Maybe Int

-- | The chat identifier of the sent message @message_id A temporary
--   message identifier
[chat_id] :: Update -> Maybe Int

-- | The parameters of animation search through
--   GetOption("animation_search_bot_username") bot has changed
--   <tt>provider Name of the animation search provider </tt>emojis The new
--   list of emojis suggested for searching
UpdateAnimationSearchParameters :: Maybe [String] -> Maybe String -> Update

[emojis] :: Update -> Maybe [String]

[provider] :: Update -> Maybe String

-- | The list of suggested to the user actions has changed
--   <tt>added_actions Added suggested actions </tt>removed_actions Removed
--   suggested actions
UpdateSuggestedActions :: Maybe [SuggestedAction] -> Maybe [SuggestedAction] -> Update

[removed_actions] :: Update -> Maybe [SuggestedAction]

[added_actions] :: Update -> Maybe [SuggestedAction]

-- | A new incoming inline query; for bots only <tt>id Unique query
--   identifier </tt>sender_user_id Identifier of the user who sent the
--   query @user_location User location; may be null
UpdateNewInlineQuery :: Maybe String -> Maybe String -> Maybe ChatType -> Maybe Location -> Maybe Int -> Maybe Int -> Update

[offset] :: Update -> Maybe String

[query] :: Update -> Maybe String

-- | The type of the chat from which the query originated; may be null if
--   unknown <tt>query Text of the query </tt>offset Offset of the first
--   entry to return
[chat_type] :: Update -> Maybe ChatType

[user_location] :: Update -> Maybe Location

[sender_user_id] :: Update -> Maybe Int

[_id] :: Update -> Maybe Int

-- | The user has chosen a result of an inline query; for bots only
--   <tt>sender_user_id Identifier of the user who sent the query
--   </tt>user_location User location; may be null
UpdateNewChosenInlineResult :: Maybe String -> Maybe String -> Maybe String -> Maybe Location -> Maybe Int -> Update

[inline_message_id] :: Update -> Maybe String

[result_id] :: Update -> Maybe String

[query] :: Update -> Maybe String

[user_location] :: Update -> Maybe Location

[sender_user_id] :: Update -> Maybe Int

-- | A new incoming callback query; for bots only <tt>id Unique query
--   identifier </tt>sender_user_id Identifier of the user who sent the
--   query
UpdateNewCallbackQuery :: Maybe CallbackQueryPayload -> Maybe Int -> Maybe Int -> Maybe Int -> Maybe Int -> Maybe Int -> Update

[payload] :: Update -> Maybe CallbackQueryPayload

-- | Identifier that uniquely corresponds to the chat to which the message
--   was sent @payload Query payload
[chat_instance] :: Update -> Maybe Int

[message_id] :: Update -> Maybe Int

-- | The chat identifier of the sent message @message_id A temporary
--   message identifier
[chat_id] :: Update -> Maybe Int

[sender_user_id] :: Update -> Maybe Int

[_id] :: Update -> Maybe Int

-- | A new incoming callback query from a message sent via a bot; for bots
--   only <tt>id Unique query identifier </tt>sender_user_id Identifier of
--   the user who sent the query @inline_message_id Identifier of the
--   inline message from which the query originated
UpdateNewInlineCallbackQuery :: Maybe CallbackQueryPayload -> Maybe Int -> Maybe String -> Maybe Int -> Maybe Int -> Update

[payload] :: Update -> Maybe CallbackQueryPayload

-- | Identifier that uniquely corresponds to the chat to which the message
--   was sent @payload Query payload
[chat_instance] :: Update -> Maybe Int

[inline_message_id] :: Update -> Maybe String

[sender_user_id] :: Update -> Maybe Int

[_id] :: Update -> Maybe Int

-- | A new incoming shipping query; for bots only. Only for invoices with
--   flexible price <tt>id Unique query identifier </tt>sender_user_id
--   Identifier of the user who sent the query <tt>invoice_payload Invoice
--   payload </tt>shipping_address User shipping address
UpdateNewShippingQuery :: Maybe Address -> Maybe String -> Maybe Int -> Maybe Int -> Update

[shipping_address] :: Update -> Maybe Address

[invoice_payload] :: Update -> Maybe String

[sender_user_id] :: Update -> Maybe Int

[_id] :: Update -> Maybe Int

-- | A new incoming pre-checkout query; for bots only. Contains full
--   information about a checkout <tt>id Unique query identifier
--   </tt>sender_user_id Identifier of the user who sent the query
--   <tt>currency Currency for the product price </tt>total_amount Total
--   price for the product, in the smallest units of the currency
UpdateNewPreCheckoutQuery :: Maybe OrderInfo -> Maybe String -> Maybe String -> Maybe Int -> Maybe String -> Maybe Int -> Maybe Int -> Update

[order_info] :: Update -> Maybe OrderInfo

[shipping_option_id] :: Update -> Maybe String

-- | Invoice payload <tt>shipping_option_id Identifier of a shipping option
--   chosen by the user; may be empty if not applicable </tt>order_info
--   Information about the order; may be null
[_invoice_payload] :: Update -> Maybe String

[total_amount] :: Update -> Maybe Int

[currency] :: Update -> Maybe String

[sender_user_id] :: Update -> Maybe Int

[_id] :: Update -> Maybe Int

-- | A new incoming event; for bots only @event A JSON-serialized event
UpdateNewCustomEvent :: Maybe String -> Update

[event] :: Update -> Maybe String

-- | A new incoming query; for bots only <tt>id The query identifier
--   </tt>data JSON-serialized query data @timeout Query timeout
UpdateNewCustomQuery :: Maybe Int -> Maybe String -> Maybe Int -> Update

[timeout] :: Update -> Maybe Int

[__data] :: Update -> Maybe String

[_id] :: Update -> Maybe Int

-- | A poll was updated; for bots only @poll New data about the poll
UpdatePoll :: Maybe Poll -> Update

[poll] :: Update -> Maybe Poll

-- | A user changed the answer to a poll; for bots only <tt>poll_id Unique
--   poll identifier </tt>user_id The user, who changed the answer to the
--   poll @option_ids 0-based identifiers of answer options, chosen by the
--   user
UpdatePollAnswer :: Maybe [Int] -> Maybe Int -> Maybe Int -> Update

[option_ids] :: Update -> Maybe [Int]

[user_id] :: Update -> Maybe Int

[poll_id] :: Update -> Maybe Int

-- | User rights changed in a chat; for bots only <tt>chat_id Chat
--   identifier </tt>actor_user_id Identifier of the user, changing the
--   rights
UpdateChatMember :: Maybe ChatMember -> Maybe ChatMember -> Maybe ChatInviteLink -> Maybe Int -> Maybe Int -> Maybe Int -> Update

[new_chat_member] :: Update -> Maybe ChatMember

-- | Previous chat member @new_chat_member New chat member
[old_chat_member] :: Update -> Maybe ChatMember

[invite_link] :: Update -> Maybe ChatInviteLink

-- | Point in time (Unix timestamp) when the user rights was changed
--   @invite_link If user has joined the chat using an invite link, the
--   invite link; may be null
[date] :: Update -> Maybe Int

[actor_user_id] :: Update -> Maybe Int

-- | The chat identifier of the sent message @message_id A temporary
--   message identifier
[chat_id] :: Update -> Maybe Int

-- | A user sent a join request to a chat; for bots only <tt>chat_id Chat
--   identifier </tt>request Join request @invite_link The invite link,
--   which was used to send join request; may be null
UpdateNewChatJoinRequest :: Maybe ChatInviteLink -> Maybe ChatJoinRequest -> Maybe Int -> Update

[invite_link] :: Update -> Maybe ChatInviteLink

[request] :: Update -> Maybe ChatJoinRequest

-- | The chat identifier of the sent message @message_id A temporary
--   message identifier
[chat_id] :: Update -> Maybe Int
instance GHC.Classes.Eq TD.Data.Update.Update
instance GHC.Show.Show TD.Data.Update.Update
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.Update.Update
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.Update.Update


module TD.Data.Updates

data Updates

-- | Contains a list of updates @updates List of updates
Updates :: Maybe [Update] -> Updates

[updates] :: Updates -> Maybe [Update]
instance GHC.Classes.Eq TD.Data.Updates.Updates
instance GHC.Show.Show TD.Data.Updates.Updates
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.Updates.Updates
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.Updates.Updates


module TD.Data.InputPassportElement

-- | Contains information about a Telegram Passport element to be saved
data InputPassportElement

-- | A Telegram Passport element to be saved containing the user's personal
--   details @personal_details Personal details of the user
InputPassportElementPersonalDetails :: Maybe PersonalDetails -> InputPassportElement

[personal_details] :: InputPassportElement -> Maybe PersonalDetails

-- | A Telegram Passport element to be saved containing the user's passport
--   @passport The passport to be saved
InputPassportElementPassport :: Maybe InputIdentityDocument -> InputPassportElement

[passport] :: InputPassportElement -> Maybe InputIdentityDocument

-- | A Telegram Passport element to be saved containing the user's driver
--   license @driver_license The driver license to be saved
InputPassportElementDriverLicense :: Maybe InputIdentityDocument -> InputPassportElement

[driver_license] :: InputPassportElement -> Maybe InputIdentityDocument

-- | A Telegram Passport element to be saved containing the user's identity
--   card @identity_card The identity card to be saved
InputPassportElementIdentityCard :: Maybe InputIdentityDocument -> InputPassportElement

[identity_card] :: InputPassportElement -> Maybe InputIdentityDocument

-- | A Telegram Passport element to be saved containing the user's internal
--   passport @internal_passport The internal passport to be saved
InputPassportElementInternalPassport :: Maybe InputIdentityDocument -> InputPassportElement

[internal_passport] :: InputPassportElement -> Maybe InputIdentityDocument

-- | A Telegram Passport element to be saved containing the user's address
--   @address The address to be saved
InputPassportElementAddress :: Maybe Address -> InputPassportElement

[address] :: InputPassportElement -> Maybe Address

-- | A Telegram Passport element to be saved containing the user's utility
--   bill @utility_bill The utility bill to be saved
InputPassportElementUtilityBill :: Maybe InputPersonalDocument -> InputPassportElement

[utility_bill] :: InputPassportElement -> Maybe InputPersonalDocument

-- | A Telegram Passport element to be saved containing the user's bank
--   statement @bank_statement The bank statement to be saved
InputPassportElementBankStatement :: Maybe InputPersonalDocument -> InputPassportElement

[bank_statement] :: InputPassportElement -> Maybe InputPersonalDocument

-- | A Telegram Passport element to be saved containing the user's rental
--   agreement @rental_agreement The rental agreement to be saved
InputPassportElementRentalAgreement :: Maybe InputPersonalDocument -> InputPassportElement

[rental_agreement] :: InputPassportElement -> Maybe InputPersonalDocument

-- | A Telegram Passport element to be saved containing the user's passport
--   registration @passport_registration The passport registration page to
--   be saved
InputPassportElementPassportRegistration :: Maybe InputPersonalDocument -> InputPassportElement

[passport_registration] :: InputPassportElement -> Maybe InputPersonalDocument

-- | A Telegram Passport element to be saved containing the user's
--   temporary registration @temporary_registration The temporary
--   registration document to be saved
InputPassportElementTemporaryRegistration :: Maybe InputPersonalDocument -> InputPassportElement

[temporary_registration] :: InputPassportElement -> Maybe InputPersonalDocument

-- | A Telegram Passport element to be saved containing the user's phone
--   number @phone_number The phone number to be saved
InputPassportElementPhoneNumber :: Maybe String -> InputPassportElement

[phone_number] :: InputPassportElement -> Maybe String

-- | A Telegram Passport element to be saved containing the user's email
--   address @email_address The email address to be saved
InputPassportElementEmailAddress :: Maybe String -> InputPassportElement

[email_address] :: InputPassportElement -> Maybe String
instance GHC.Classes.Eq TD.Data.InputPassportElement.InputPassportElement
instance GHC.Show.Show TD.Data.InputPassportElement.InputPassportElement
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.InputPassportElement.InputPassportElement
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.InputPassportElement.InputPassportElement


module TD.Query.SetPassportElement

-- | Adds an element to the user's Telegram Passport. May return an error
--   with a message <a>PHONE_VERIFICATION_NEEDED</a> or
--   <a>EMAIL_VERIFICATION_NEEDED</a> if the chosen phone number or the
--   chosen email address must be verified first <tt>element Input Telegram
--   Passport element </tt>password Password of the current user
data SetPassportElement
SetPassportElement :: Maybe String -> Maybe InputPassportElement -> SetPassportElement

[password] :: SetPassportElement -> Maybe String

[element] :: SetPassportElement -> Maybe InputPassportElement
instance GHC.Classes.Eq TD.Query.SetPassportElement.SetPassportElement
instance GHC.Show.Show TD.Query.SetPassportElement.SetPassportElement
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SetPassportElement.SetPassportElement


module TD.Data.AddedReaction

data AddedReaction

-- | Represents a reaction applied to a message <tt>reaction Text
--   representation of the reaction </tt>sender_id Identifier of the chat
--   member, applied the reaction
AddedReaction :: Maybe MessageSender -> Maybe String -> AddedReaction

[sender_id] :: AddedReaction -> Maybe MessageSender

[reaction] :: AddedReaction -> Maybe String
instance GHC.Classes.Eq TD.Data.AddedReaction.AddedReaction
instance GHC.Show.Show TD.Data.AddedReaction.AddedReaction
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.AddedReaction.AddedReaction
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.AddedReaction.AddedReaction


module TD.Data.AddedReactions

data AddedReactions

-- | Represents a list of reactions added to a message <tt>total_count The
--   total number of found reactions </tt>reactions The list of added
--   reactions @next_offset The offset for the next request. If empty,
--   there are no more results
AddedReactions :: Maybe String -> Maybe [AddedReaction] -> Maybe Int -> AddedReactions

[next_offset] :: AddedReactions -> Maybe String

[reactions] :: AddedReactions -> Maybe [AddedReaction]

[total_count] :: AddedReactions -> Maybe Int
instance GHC.Classes.Eq TD.Data.AddedReactions.AddedReactions
instance GHC.Show.Show TD.Data.AddedReactions.AddedReactions
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.AddedReactions.AddedReactions
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.AddedReactions.AddedReactions


module TD.Data.AccountTtl

data AccountTtl

-- | Contains information about the period of inactivity after which the
--   current user's account will automatically be deleted @days Number of
--   days of inactivity before the account will be flagged for deletion;
--   30-366 days
AccountTtl :: Maybe Int -> AccountTtl

[days] :: AccountTtl -> Maybe Int
instance GHC.Classes.Eq TD.Data.AccountTtl.AccountTtl
instance GHC.Show.Show TD.Data.AccountTtl.AccountTtl
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.AccountTtl.AccountTtl
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.AccountTtl.AccountTtl


module TD.Query.SetAccountTtl

-- | Changes the period of inactivity after which the account of the
--   current user will automatically be deleted @ttl New account TTL
data SetAccountTtl
SetAccountTtl :: Maybe AccountTtl -> SetAccountTtl

[ttl] :: SetAccountTtl -> Maybe AccountTtl
instance GHC.Classes.Eq TD.Query.SetAccountTtl.SetAccountTtl
instance GHC.Show.Show TD.Query.SetAccountTtl.SetAccountTtl
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SetAccountTtl.SetAccountTtl


module TD.Data.GeneralResult
data GeneralResult
Error :: Error -> GeneralResult
Ok :: Ok -> GeneralResult
TdlibParameters :: TdlibParameters -> GeneralResult
AuthenticationCodeType :: AuthenticationCodeType -> GeneralResult
AuthenticationCodeInfo :: AuthenticationCodeInfo -> GeneralResult
EmailAddressAuthenticationCodeInfo :: EmailAddressAuthenticationCodeInfo -> GeneralResult
TextEntity :: TextEntity -> GeneralResult
TextEntities :: TextEntities -> GeneralResult
FormattedText :: FormattedText -> GeneralResult
TermsOfService :: TermsOfService -> GeneralResult
AuthorizationState :: AuthorizationState -> GeneralResult
PasswordState :: PasswordState -> GeneralResult
RecoveryEmailAddress :: RecoveryEmailAddress -> GeneralResult
TemporaryPasswordState :: TemporaryPasswordState -> GeneralResult
LocalFile :: LocalFile -> GeneralResult
RemoteFile :: RemoteFile -> GeneralResult
File :: File -> GeneralResult
InputFile :: InputFile -> GeneralResult
PhotoSize :: PhotoSize -> GeneralResult
Minithumbnail :: Minithumbnail -> GeneralResult
ThumbnailFormat :: ThumbnailFormat -> GeneralResult
Thumbnail :: Thumbnail -> GeneralResult
MaskPoint :: MaskPoint -> GeneralResult
MaskPosition :: MaskPosition -> GeneralResult
StickerType :: StickerType -> GeneralResult
ClosedVectorPath :: ClosedVectorPath -> GeneralResult
PollOption :: PollOption -> GeneralResult
PollType :: PollType -> GeneralResult
Animation :: Animation -> GeneralResult
Audio :: Audio -> GeneralResult
Document :: Document -> GeneralResult
Photo :: Photo -> GeneralResult
Sticker :: Sticker -> GeneralResult
Video :: Video -> GeneralResult
VideoNote :: VideoNote -> GeneralResult
VoiceNote :: VoiceNote -> GeneralResult
AnimatedEmoji :: AnimatedEmoji -> GeneralResult
Contact :: Contact -> GeneralResult
Location :: Location -> GeneralResult
Venue :: Venue -> GeneralResult
Game :: Game -> GeneralResult
Poll :: Poll -> GeneralResult
ProfilePhoto :: ProfilePhoto -> GeneralResult
ChatPhotoInfo :: ChatPhotoInfo -> GeneralResult
UserType :: UserType -> GeneralResult
BotCommand :: BotCommand -> GeneralResult
BotCommands :: BotCommands -> GeneralResult
BotMenuButton :: BotMenuButton -> GeneralResult
ChatLocation :: ChatLocation -> GeneralResult
AnimatedChatPhoto :: AnimatedChatPhoto -> GeneralResult
ChatPhoto :: ChatPhoto -> GeneralResult
ChatPhotos :: ChatPhotos -> GeneralResult
InputChatPhoto :: InputChatPhoto -> GeneralResult
ChatPermissions :: ChatPermissions -> GeneralResult
ChatAdministratorRights :: ChatAdministratorRights -> GeneralResult
User :: User -> GeneralResult
BotInfo :: BotInfo -> GeneralResult
UserFullInfo :: UserFullInfo -> GeneralResult
Users :: Users -> GeneralResult
ChatAdministrator :: ChatAdministrator -> GeneralResult
ChatAdministrators :: ChatAdministrators -> GeneralResult
ChatMemberStatus :: ChatMemberStatus -> GeneralResult
ChatMember :: ChatMember -> GeneralResult
ChatMembers :: ChatMembers -> GeneralResult
ChatMembersFilter :: ChatMembersFilter -> GeneralResult
SupergroupMembersFilter :: SupergroupMembersFilter -> GeneralResult
ChatInviteLink :: ChatInviteLink -> GeneralResult
ChatInviteLinks :: ChatInviteLinks -> GeneralResult
ChatInviteLinkCount :: ChatInviteLinkCount -> GeneralResult
ChatInviteLinkCounts :: ChatInviteLinkCounts -> GeneralResult
ChatInviteLinkMember :: ChatInviteLinkMember -> GeneralResult
ChatInviteLinkMembers :: ChatInviteLinkMembers -> GeneralResult
ChatInviteLinkInfo :: ChatInviteLinkInfo -> GeneralResult
ChatJoinRequest :: ChatJoinRequest -> GeneralResult
ChatJoinRequests :: ChatJoinRequests -> GeneralResult
ChatJoinRequestsInfo :: ChatJoinRequestsInfo -> GeneralResult
BasicGroup :: BasicGroup -> GeneralResult
BasicGroupFullInfo :: BasicGroupFullInfo -> GeneralResult
Supergroup :: Supergroup -> GeneralResult
SupergroupFullInfo :: SupergroupFullInfo -> GeneralResult
SecretChatState :: SecretChatState -> GeneralResult
SecretChat :: SecretChat -> GeneralResult
MessageSender :: MessageSender -> GeneralResult
MessageSenders :: MessageSenders -> GeneralResult
MessageForwardOrigin :: MessageForwardOrigin -> GeneralResult
MessageForwardInfo :: MessageForwardInfo -> GeneralResult
MessageReplyInfo :: MessageReplyInfo -> GeneralResult
MessageReaction :: MessageReaction -> GeneralResult
MessageInteractionInfo :: MessageInteractionInfo -> GeneralResult
UnreadReaction :: UnreadReaction -> GeneralResult
MessageSendingState :: MessageSendingState -> GeneralResult
Message :: Message -> GeneralResult
Messages :: Messages -> GeneralResult
FoundMessages :: FoundMessages -> GeneralResult
MessagePosition :: MessagePosition -> GeneralResult
MessagePositions :: MessagePositions -> GeneralResult
MessageCalendarDay :: MessageCalendarDay -> GeneralResult
MessageCalendar :: MessageCalendar -> GeneralResult
SponsoredMessage :: SponsoredMessage -> GeneralResult
FileDownload :: FileDownload -> GeneralResult
DownloadedFileCounts :: DownloadedFileCounts -> GeneralResult
FoundFileDownloads :: FoundFileDownloads -> GeneralResult
NotificationSettingsScope :: NotificationSettingsScope -> GeneralResult
ChatNotificationSettings :: ChatNotificationSettings -> GeneralResult
ScopeNotificationSettings :: ScopeNotificationSettings -> GeneralResult
DraftMessage :: DraftMessage -> GeneralResult
ChatType :: ChatType -> GeneralResult
ChatFilter :: ChatFilter -> GeneralResult
ChatFilterInfo :: ChatFilterInfo -> GeneralResult
RecommendedChatFilter :: RecommendedChatFilter -> GeneralResult
RecommendedChatFilters :: RecommendedChatFilters -> GeneralResult
ChatList :: ChatList -> GeneralResult
ChatLists :: ChatLists -> GeneralResult
ChatSource :: ChatSource -> GeneralResult
ChatPosition :: ChatPosition -> GeneralResult
VideoChat :: VideoChat -> GeneralResult
Chat :: Chat -> GeneralResult
Chats :: Chats -> GeneralResult
ChatNearby :: ChatNearby -> GeneralResult
ChatsNearby :: ChatsNearby -> GeneralResult
PublicChatType :: PublicChatType -> GeneralResult
ChatActionBar :: ChatActionBar -> GeneralResult
KeyboardButtonType :: KeyboardButtonType -> GeneralResult
KeyboardButton :: KeyboardButton -> GeneralResult
InlineKeyboardButtonType :: InlineKeyboardButtonType -> GeneralResult
InlineKeyboardButton :: InlineKeyboardButton -> GeneralResult
ReplyMarkup :: ReplyMarkup -> GeneralResult
LoginUrlInfo :: LoginUrlInfo -> GeneralResult
WebAppInfo :: WebAppInfo -> GeneralResult
MessageThreadInfo :: MessageThreadInfo -> GeneralResult
RichText :: RichText -> GeneralResult
PageBlockCaption :: PageBlockCaption -> GeneralResult
PageBlockListItem :: PageBlockListItem -> GeneralResult
PageBlockHorizontalAlignment :: PageBlockHorizontalAlignment -> GeneralResult
PageBlockVerticalAlignment :: PageBlockVerticalAlignment -> GeneralResult
PageBlockTableCell :: PageBlockTableCell -> GeneralResult
PageBlockRelatedArticle :: PageBlockRelatedArticle -> GeneralResult
PageBlock :: PageBlock -> GeneralResult
WebPageInstantView :: WebPageInstantView -> GeneralResult
WebPage :: WebPage -> GeneralResult
CountryInfo :: CountryInfo -> GeneralResult
Countries :: Countries -> GeneralResult
PhoneNumberInfo :: PhoneNumberInfo -> GeneralResult
BankCardActionOpenUrl :: BankCardActionOpenUrl -> GeneralResult
BankCardInfo :: BankCardInfo -> GeneralResult
Address :: Address -> GeneralResult
ThemeParameters :: ThemeParameters -> GeneralResult
LabeledPricePart :: LabeledPricePart -> GeneralResult
Invoice :: Invoice -> GeneralResult
OrderInfo :: OrderInfo -> GeneralResult
ShippingOption :: ShippingOption -> GeneralResult
SavedCredentials :: SavedCredentials -> GeneralResult
InputCredentials :: InputCredentials -> GeneralResult
PaymentProvider :: PaymentProvider -> GeneralResult
PaymentForm :: PaymentForm -> GeneralResult
ValidatedOrderInfo :: ValidatedOrderInfo -> GeneralResult
PaymentResult :: PaymentResult -> GeneralResult
PaymentReceipt :: PaymentReceipt -> GeneralResult
InputInvoice :: InputInvoice -> GeneralResult
DatedFile :: DatedFile -> GeneralResult
PassportElementType :: PassportElementType -> GeneralResult
Date :: Date -> GeneralResult
PersonalDetails :: PersonalDetails -> GeneralResult
IdentityDocument :: IdentityDocument -> GeneralResult
InputIdentityDocument :: InputIdentityDocument -> GeneralResult
PersonalDocument :: PersonalDocument -> GeneralResult
InputPersonalDocument :: InputPersonalDocument -> GeneralResult
PassportElement :: PassportElement -> GeneralResult
InputPassportElement :: InputPassportElement -> GeneralResult
PassportElements :: PassportElements -> GeneralResult
PassportElementErrorSource :: PassportElementErrorSource -> GeneralResult
PassportElementError :: PassportElementError -> GeneralResult
PassportSuitableElement :: PassportSuitableElement -> GeneralResult
PassportRequiredElement :: PassportRequiredElement -> GeneralResult
PassportAuthorizationForm :: PassportAuthorizationForm -> GeneralResult
PassportElementsWithErrors :: PassportElementsWithErrors -> GeneralResult
EncryptedCredentials :: EncryptedCredentials -> GeneralResult
EncryptedPassportElement :: EncryptedPassportElement -> GeneralResult
InputPassportElementErrorSource :: InputPassportElementErrorSource -> GeneralResult
InputPassportElementError :: InputPassportElementError -> GeneralResult
MessageContent :: MessageContent -> GeneralResult
TextEntityType :: TextEntityType -> GeneralResult
InputThumbnail :: InputThumbnail -> GeneralResult
MessageSchedulingState :: MessageSchedulingState -> GeneralResult
MessageSendOptions :: MessageSendOptions -> GeneralResult
MessageCopyOptions :: MessageCopyOptions -> GeneralResult
InputMessageContent :: InputMessageContent -> GeneralResult
SearchMessagesFilter :: SearchMessagesFilter -> GeneralResult
ChatAction :: ChatAction -> GeneralResult
UserStatus :: UserStatus -> GeneralResult
Stickers :: Stickers -> GeneralResult
Emojis :: Emojis -> GeneralResult
StickerSet :: StickerSet -> GeneralResult
StickerSetInfo :: StickerSetInfo -> GeneralResult
StickerSets :: StickerSets -> GeneralResult
TrendingStickerSets :: TrendingStickerSets -> GeneralResult
CallDiscardReason :: CallDiscardReason -> GeneralResult
CallProtocol :: CallProtocol -> GeneralResult
CallServerType :: CallServerType -> GeneralResult
CallServer :: CallServer -> GeneralResult
CallId :: CallId -> GeneralResult
GroupCallId :: GroupCallId -> GeneralResult
CallState :: CallState -> GeneralResult
GroupCallVideoQuality :: GroupCallVideoQuality -> GeneralResult
GroupCallStream :: GroupCallStream -> GeneralResult
GroupCallStreams :: GroupCallStreams -> GeneralResult
RtmpUrl :: RtmpUrl -> GeneralResult
GroupCallRecentSpeaker :: GroupCallRecentSpeaker -> GeneralResult
GroupCall :: GroupCall -> GeneralResult
GroupCallVideoSourceGroup :: GroupCallVideoSourceGroup -> GeneralResult
GroupCallParticipantVideoInfo :: GroupCallParticipantVideoInfo -> GeneralResult
GroupCallParticipant :: GroupCallParticipant -> GeneralResult
CallProblem :: CallProblem -> GeneralResult
Call :: Call -> GeneralResult
PhoneNumberAuthenticationSettings :: PhoneNumberAuthenticationSettings -> GeneralResult
AddedReaction :: AddedReaction -> GeneralResult
AddedReactions :: AddedReactions -> GeneralResult
AvailableReaction :: AvailableReaction -> GeneralResult
AvailableReactions :: AvailableReactions -> GeneralResult
Reaction :: Reaction -> GeneralResult
Animations :: Animations -> GeneralResult
DiceStickers :: DiceStickers -> GeneralResult
ImportedContacts :: ImportedContacts -> GeneralResult
AttachmentMenuBotColor :: AttachmentMenuBotColor -> GeneralResult
AttachmentMenuBot :: AttachmentMenuBot -> GeneralResult
SentWebAppMessage :: SentWebAppMessage -> GeneralResult
HttpUrl :: HttpUrl -> GeneralResult
InputInlineQueryResult :: InputInlineQueryResult -> GeneralResult
InlineQueryResult :: InlineQueryResult -> GeneralResult
InlineQueryResults :: InlineQueryResults -> GeneralResult
CallbackQueryPayload :: CallbackQueryPayload -> GeneralResult
CallbackQueryAnswer :: CallbackQueryAnswer -> GeneralResult
CustomRequestResult :: CustomRequestResult -> GeneralResult
GameHighScore :: GameHighScore -> GeneralResult
GameHighScores :: GameHighScores -> GeneralResult
ChatEventAction :: ChatEventAction -> GeneralResult
ChatEvent :: ChatEvent -> GeneralResult
ChatEvents :: ChatEvents -> GeneralResult
ChatEventLogFilters :: ChatEventLogFilters -> GeneralResult
LanguagePackStringValue :: LanguagePackStringValue -> GeneralResult
LanguagePackString :: LanguagePackString -> GeneralResult
LanguagePackStrings :: LanguagePackStrings -> GeneralResult
LanguagePackInfo :: LanguagePackInfo -> GeneralResult
LocalizationTargetInfo :: LocalizationTargetInfo -> GeneralResult
PremiumLimitType :: PremiumLimitType -> GeneralResult
PremiumFeature :: PremiumFeature -> GeneralResult
PremiumLimit :: PremiumLimit -> GeneralResult
PremiumFeatures :: PremiumFeatures -> GeneralResult
PremiumSource :: PremiumSource -> GeneralResult
PremiumFeaturePromotionAnimation :: PremiumFeaturePromotionAnimation -> GeneralResult
PremiumState :: PremiumState -> GeneralResult
DeviceToken :: DeviceToken -> GeneralResult
PushReceiverId :: PushReceiverId -> GeneralResult
BackgroundFill :: BackgroundFill -> GeneralResult
BackgroundType :: BackgroundType -> GeneralResult
Background :: Background -> GeneralResult
Backgrounds :: Backgrounds -> GeneralResult
InputBackground :: InputBackground -> GeneralResult
ThemeSettings :: ThemeSettings -> GeneralResult
ChatTheme :: ChatTheme -> GeneralResult
Hashtags :: Hashtags -> GeneralResult
CanTransferOwnershipResult :: CanTransferOwnershipResult -> GeneralResult
CheckChatUsernameResult :: CheckChatUsernameResult -> GeneralResult
CheckStickerSetNameResult :: CheckStickerSetNameResult -> GeneralResult
ResetPasswordResult :: ResetPasswordResult -> GeneralResult
MessageFileType :: MessageFileType -> GeneralResult
PushMessageContent :: PushMessageContent -> GeneralResult
NotificationType :: NotificationType -> GeneralResult
NotificationGroupType :: NotificationGroupType -> GeneralResult
NotificationSound :: NotificationSound -> GeneralResult
NotificationSounds :: NotificationSounds -> GeneralResult
Notification :: Notification -> GeneralResult
NotificationGroup :: NotificationGroup -> GeneralResult
OptionValue :: OptionValue -> GeneralResult
JsonObjectMember :: JsonObjectMember -> GeneralResult
JsonValue :: JsonValue -> GeneralResult
UserPrivacySettingRule :: UserPrivacySettingRule -> GeneralResult
UserPrivacySettingRules :: UserPrivacySettingRules -> GeneralResult
UserPrivacySetting :: UserPrivacySetting -> GeneralResult
AccountTtl :: AccountTtl -> GeneralResult
SessionType :: SessionType -> GeneralResult
Session :: Session -> GeneralResult
Sessions :: Sessions -> GeneralResult
ConnectedWebsite :: ConnectedWebsite -> GeneralResult
ConnectedWebsites :: ConnectedWebsites -> GeneralResult
ChatReportReason :: ChatReportReason -> GeneralResult
TargetChat :: TargetChat -> GeneralResult
InternalLinkType :: InternalLinkType -> GeneralResult
MessageLink :: MessageLink -> GeneralResult
MessageLinkInfo :: MessageLinkInfo -> GeneralResult
FilePart :: FilePart -> GeneralResult
FileType :: FileType -> GeneralResult
StorageStatisticsByFileType :: StorageStatisticsByFileType -> GeneralResult
StorageStatisticsByChat :: StorageStatisticsByChat -> GeneralResult
StorageStatistics :: StorageStatistics -> GeneralResult
StorageStatisticsFast :: StorageStatisticsFast -> GeneralResult
DatabaseStatistics :: DatabaseStatistics -> GeneralResult
NetworkType :: NetworkType -> GeneralResult
NetworkStatisticsEntry :: NetworkStatisticsEntry -> GeneralResult
NetworkStatistics :: NetworkStatistics -> GeneralResult
AutoDownloadSettings :: AutoDownloadSettings -> GeneralResult
AutoDownloadSettingsPresets :: AutoDownloadSettingsPresets -> GeneralResult
ConnectionState :: ConnectionState -> GeneralResult
TopChatCategory :: TopChatCategory -> GeneralResult
TMeUrlType :: TMeUrlType -> GeneralResult
TMeUrl :: TMeUrl -> GeneralResult
TMeUrls :: TMeUrls -> GeneralResult
SuggestedAction :: SuggestedAction -> GeneralResult
Count :: Count -> GeneralResult
Text :: Text -> GeneralResult
Seconds :: Seconds -> GeneralResult
FileDownloadedPrefixSize :: FileDownloadedPrefixSize -> GeneralResult
DeepLinkInfo :: DeepLinkInfo -> GeneralResult
TextParseMode :: TextParseMode -> GeneralResult
ProxyType :: ProxyType -> GeneralResult
Proxy :: Proxy -> GeneralResult
Proxies :: Proxies -> GeneralResult
InputSticker :: InputSticker -> GeneralResult
DateRange :: DateRange -> GeneralResult
StatisticalValue :: StatisticalValue -> GeneralResult
StatisticalGraph :: StatisticalGraph -> GeneralResult
ChatStatisticsMessageInteractionInfo :: ChatStatisticsMessageInteractionInfo -> GeneralResult
ChatStatisticsMessageSenderInfo :: ChatStatisticsMessageSenderInfo -> GeneralResult
ChatStatisticsAdministratorActionsInfo :: ChatStatisticsAdministratorActionsInfo -> GeneralResult
ChatStatisticsInviterInfo :: ChatStatisticsInviterInfo -> GeneralResult
ChatStatistics :: ChatStatistics -> GeneralResult
MessageStatistics :: MessageStatistics -> GeneralResult
Point :: Point -> GeneralResult
VectorPathCommand :: VectorPathCommand -> GeneralResult
BotCommandScope :: BotCommandScope -> GeneralResult
Update :: Update -> GeneralResult
Updates :: Updates -> GeneralResult
LogStream :: LogStream -> GeneralResult
LogVerbosityLevel :: LogVerbosityLevel -> GeneralResult
LogTags :: LogTags -> GeneralResult
TestInt :: TestInt -> GeneralResult
TestString :: TestString -> GeneralResult
TestBytes :: TestBytes -> GeneralResult
TestVectorInt :: TestVectorInt -> GeneralResult
TestVectorIntObject :: TestVectorIntObject -> GeneralResult
TestVectorString :: TestVectorString -> GeneralResult
TestVectorStringObject :: TestVectorStringObject -> GeneralResult
data ResultWithExtra
ResultWithExtra :: GeneralResult -> Maybe String -> ResultWithExtra
instance GHC.Classes.Eq TD.Data.GeneralResult.GeneralResult
instance GHC.Show.Show TD.Data.GeneralResult.GeneralResult
instance GHC.Classes.Eq TD.Data.GeneralResult.ResultWithExtra
instance GHC.Show.Show TD.Data.GeneralResult.ResultWithExtra
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.GeneralResult.ResultWithExtra
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.GeneralResult.GeneralResult

module TD.Lib
create :: IO Client
send :: ToJSON a => Client -> a -> IO ()
sendWExtra :: ToJSON a => Client -> a -> IO String
receive :: Client -> IO (Maybe ResultWithExtra)
destroy :: Client -> IO ()
type Client = Ptr ()
