{-# LANGUAGE OverloadedStrings #-}

-- |
module TD.Data.InputFile where

import qualified Data.Aeson as A
import qualified Data.Aeson.Types as T
import qualified Utils as U

-- | Points to a file
data InputFile
  = -- | A file defined by its unique identifier @id Unique file identifier
    InputFileId
      { -- |
        _id :: Maybe Int
      }
  | -- | A file defined by its remote identifier. The remote identifier is guaranteed to be usable only if the corresponding file is still accessible to the user and known to TDLib.
    -- For example, if the file is from a message, then the message must be not deleted and accessible to the user. If the file database is disabled, then the corresponding object with the file must be preloaded by the application
    InputFileRemote
      { -- | Remote file identifier
        __id :: Maybe String
      }
  | -- | A file defined by a local path @path Local path to the file
    InputFileLocal
      { -- |
        path :: Maybe String
      }
  | -- | A file generated by the application
    InputFileGenerated
      { -- | Expected size of the generated file, in bytes; 0 if unknown
        expected_size :: Maybe Int,
        -- | String specifying the conversion applied to the original file; must be persistent across application restarts. Conversions beginning with '#' are reserved for internal TDLib usage
        conversion :: Maybe String,
        -- | Local path to a file from which the file is generated; may be empty if there is no such file
        original_path :: Maybe String
      }
  deriving (Eq)

instance Show InputFile where
  show
    InputFileId
      { _id = _id_
      } =
      "InputFileId"
        ++ U.cc
          [ U.p "_id" _id_
          ]
  show
    InputFileRemote
      { __id = __id_
      } =
      "InputFileRemote"
        ++ U.cc
          [ U.p "__id" __id_
          ]
  show
    InputFileLocal
      { path = path_
      } =
      "InputFileLocal"
        ++ U.cc
          [ U.p "path" path_
          ]
  show
    InputFileGenerated
      { expected_size = expected_size_,
        conversion = conversion_,
        original_path = original_path_
      } =
      "InputFileGenerated"
        ++ U.cc
          [ U.p "expected_size" expected_size_,
            U.p "conversion" conversion_,
            U.p "original_path" original_path_
          ]

instance T.FromJSON InputFile where
  parseJSON v@(T.Object obj) = do
    t <- obj A..: "@type" :: T.Parser String

    case t of
      "inputFileId" -> parseInputFileId v
      "inputFileRemote" -> parseInputFileRemote v
      "inputFileLocal" -> parseInputFileLocal v
      "inputFileGenerated" -> parseInputFileGenerated v
      _ -> mempty
    where
      parseInputFileId :: A.Value -> T.Parser InputFile
      parseInputFileId = A.withObject "InputFileId" $ \o -> do
        _id_ <- o A..:? "id"
        return $ InputFileId {_id = _id_}

      parseInputFileRemote :: A.Value -> T.Parser InputFile
      parseInputFileRemote = A.withObject "InputFileRemote" $ \o -> do
        __id_ <- o A..:? "id"
        return $ InputFileRemote {__id = __id_}

      parseInputFileLocal :: A.Value -> T.Parser InputFile
      parseInputFileLocal = A.withObject "InputFileLocal" $ \o -> do
        path_ <- o A..:? "path"
        return $ InputFileLocal {path = path_}

      parseInputFileGenerated :: A.Value -> T.Parser InputFile
      parseInputFileGenerated = A.withObject "InputFileGenerated" $ \o -> do
        expected_size_ <- o A..:? "expected_size"
        conversion_ <- o A..:? "conversion"
        original_path_ <- o A..:? "original_path"
        return $ InputFileGenerated {expected_size = expected_size_, conversion = conversion_, original_path = original_path_}
  parseJSON _ = mempty

instance T.ToJSON InputFile where
  toJSON
    InputFileId
      { _id = _id_
      } =
      A.object
        [ "@type" A..= T.String "inputFileId",
          "id" A..= _id_
        ]
  toJSON
    InputFileRemote
      { __id = __id_
      } =
      A.object
        [ "@type" A..= T.String "inputFileRemote",
          "id" A..= __id_
        ]
  toJSON
    InputFileLocal
      { path = path_
      } =
      A.object
        [ "@type" A..= T.String "inputFileLocal",
          "path" A..= path_
        ]
  toJSON
    InputFileGenerated
      { expected_size = expected_size_,
        conversion = conversion_,
        original_path = original_path_
      } =
      A.object
        [ "@type" A..= T.String "inputFileGenerated",
          "expected_size" A..= expected_size_,
          "conversion" A..= conversion_,
          "original_path" A..= original_path_
        ]
